(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1641496,      33511]
NotebookOptionsPosition[   1610084,      33018]
NotebookOutlinePosition[   1610777,      33043]
CellTagsIndexPosition[   1610702,      33038]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[StyleBox["Target Probabilities with Quantum Circuits ",
 FontColor->RGBColor[0.6666666666666666, 0., 0.]]], "Title",
 CellChangeTimes->{{3.448190122176695*^9, 3.44819012385317*^9}, {
   3.485609127497636*^9, 3.485609133015955*^9}, {3.514308355088097*^9, 
   3.514308374696691*^9}, 3.5146594348020153`*^9, 3.5146601881617107`*^9, {
   3.885505591542729*^9, 3.885505633383753*^9}, 3.8855250889037437`*^9, 
   3.8855253286211233`*^9},ExpressionUUID->"76ee9e23-f369-4f3f-955a-\
400a966ac51e"],

Cell[CellGroupData[{

Cell["Introduction ", "Section",
 CellChangeTimes->{
  3.483202458955147*^9, {3.514308340990994*^9, 3.514308352103572*^9}, {
   3.885505809622458*^9, 3.8855058189898567`*^9}, {3.885513914823503*^9, 
   3.885513917283519*^9}},ExpressionUUID->"5862e289-b8a0-4802-bdfd-\
912b642713d9"],

Cell[TextData[{
 "This computational essay is part of work that focuses on quantum state \
preparation, an essential subroutine for quantum computing using the Wolfram \
quantum framework paclet . A high - level circuit model has been proposed [",
 ButtonBox["reference",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://community.wolfram.com/groups/-/m/t/2777794"], None},
  ButtonNote->"https://community.wolfram.com/groups/-/m/t/2777794"],
 "] that generates probability results in line with a random probability \
generator . Addressing the challenges in quantum \
computation\[CloseCurlyQuote] logic model, a generic method is introduced for \
synthesizing quantum circuits capable of producing any desired quantum state \
from a given basis state, enabling both theoretical determination of upper \
bounds and experimental assessment of the required number of quantum gates \
[ref: ",
 StyleBox["Logic Synthesis for Quantum State Generation (2016 IEEE 46th \
International Symposium on Multiple-Valued Logic]",
  FontColor->RGBColor[0, 0, 1]],
 ".  The work outlines a three step process for synthesizing the desired \
quantum circuit from a basis state, followed by a generalized method for \
generating n - qubit systems using a multiplexer function with controlled \
rotation gates and swap operations, aiming to provide a robust framework for \
the design and implementation of quantum circuits ."
}], "Text",
 CellChangeTimes->{{3.889747457606591*^9, 3.8897474590641403`*^9}, {
   3.88974751166549*^9, 3.8897475549790773`*^9}, {3.889747596541493*^9, 
   3.8897476046707783`*^9}, {3.889747635624584*^9, 3.889747673402176*^9}, {
   3.889747734398498*^9, 3.8897478106068783`*^9}, 3.889747872418532*^9, {
   3.889747943400134*^9, 3.88974794366575*^9}, {3.889748065547894*^9, 
   3.8897480671074123`*^9}, {3.889748271762274*^9, 3.889748314754115*^9}, {
   3.889748650469652*^9, 
   3.889748658455756*^9}},ExpressionUUID->"37f4e627-a5ac-4566-ad86-\
8ed4f72bcc3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Methodology", "Section",
 CellChangeTimes->{{3.889682961990181*^9, 
  3.889682966477084*^9}},ExpressionUUID->"0ec8d413-8f88-41ac-ab41-\
b1ba286a69d2"],

Cell[TextData[{
 "Quantum systems are composed of qubits. Qubits can be in one of the \
computational basis state |0> and |1>. More formally, a qubit can be \
described by a two-dimensional Hilbert space where its (quantum) state is \
given by unit vector so called state vector.\nBy inverting the resulting \
circuit , the desired quantum circuit transforming a basis state is \
synthesized. More precisely three steps are performed:\n\n(a) ",
 StyleBox["Unify Phases: transformation of potentially different phases \
amplitudes to a single (global) phase.\n\n(b) Unify probabilities: \
transformation of the potentially different moduli of amplitudes to an equal \
probability distribution.\n\n(c) Remove superposition: transformation of \
unified amplitudes to a state with a single non-zero amplitude and, by this, \
generating a basis state (potentially with a negligible global phase).",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, 3.83303154442404*^9, {3.88245010447875*^9, 
   3.882450142975518*^9}, {3.8824502788589067`*^9, 3.8824503359763193`*^9}, {
   3.882450405885453*^9, 3.882450414094026*^9}, {3.882450724075857*^9, 
   3.882450863209869*^9}, 3.8824510359129667`*^9, {3.8824510969618387`*^9, 
   3.88245112032974*^9}, 3.8824512103483467`*^9, {3.882451258664089*^9, 
   3.882451259891781*^9}, {3.8824513339956913`*^9, 3.882451738356538*^9}, {
   3.882488446513208*^9, 3.8824884770812283`*^9}, {3.8825130906400747`*^9, 
   3.882513095927278*^9}, {3.882521103993545*^9, 3.882521105804371*^9}, {
   3.882521149269555*^9, 3.8825211503991423`*^9}, {3.885523079492388*^9, 
   3.8855230810878677`*^9}, {3.885531297489539*^9, 3.8855313025732403`*^9}, {
   3.8897485408950863`*^9, 
   3.889748541840831*^9}},ExpressionUUID->"3f0db774-9384-4e5b-abdf-\
aa14587d8032"],

Cell["\<\
Multiplexer function is used in our module to map various quantum circuits at \
one place (in this case controlled rotation gates)\
\>", "Text",
 CellChangeTimes->{{3.8855242640554237`*^9, 3.8855243296690817`*^9}, {
  3.885524491634227*^9, 3.885524503259975*^9}, {3.885524542161826*^9, 
  3.8855245641795692`*^9}},ExpressionUUID->"f3c1143c-c739-4227-9c6d-\
d68ed661ab64"],

Cell[TextData[StyleBox["Generalizing methods for generating n-qubit system is \
as follows:\n(a) Multiplexer function followed by swapping {n,n-1}\n(b) \
Multiplexer function followed by swapping {n,n-2}\n(c) Multiplexer function \
followed by swapping {n,n-3}\n.\n.\n.\n.\n(d) Multiplexer function followed \
by swapping {n,1}\n(e) Finally apply Hadamard for realizing non-zero \
amplitude",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.8021862859717093`*^9, 3.8021862866993*^9}, {
   3.802186780928506*^9, 3.802186861789569*^9}, {3.832335906349555*^9, 
   3.832335909229568*^9}, 3.83303154442404*^9, {3.88245010447875*^9, 
   3.882450142975518*^9}, {3.8824502788589067`*^9, 3.8824503359763193`*^9}, {
   3.882450405885453*^9, 3.882450414094026*^9}, {3.882450724075857*^9, 
   3.882450863209869*^9}, 3.8824510359129667`*^9, {3.8824510969618387`*^9, 
   3.88245112032974*^9}, 3.8824512103483467`*^9, {3.882451258664089*^9, 
   3.882451259891781*^9}, {3.8824513339956913`*^9, 3.882451738356538*^9}, {
   3.882488446513208*^9, 3.8824884770812283`*^9}, {3.8825130906400747`*^9, 
   3.882513095927278*^9}, {3.882521103993545*^9, 3.882521105804371*^9}, {
   3.882521149269555*^9, 3.8825211503991423`*^9}, {3.885523079492388*^9, 
   3.8855230810878677`*^9}, {3.885524069832217*^9, 3.885524070429966*^9}, {
   3.8855245174942617`*^9, 
   3.8855245290714808`*^9}},ExpressionUUID->"9643b92a-9374-4773-8aac-\
86d924b4ac0e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QPU setup", "Section",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.8851711970478773`*^9, 3.8851711980008163`*^9}, {
  3.885171604220536*^9, 
  3.8851716066712713`*^9}},ExpressionUUID->"e16377b6-7cfe-4c54-82eb-\
1265b968bdd8"],

Cell["\<\
Wolfram quantum framework now comes with the IBM-Q service. We are utilizing \
it to access results from IBM  Quantum processors. We have mainly used two \
quantum processors namely: ibm_nairobi and ibmq_belem.\
\>", "Text",
 CellChangeTimes->{{3.8897781652196283`*^9, 3.8897782670153637`*^9}, {
  3.88977849553189*^9, 
  3.8897786248042727`*^9}},ExpressionUUID->"896ca019-dc0a-4ff2-b9bf-\
23ad1b9d38bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "=", 
  RowBox[{"ServiceConnect", "[", 
   RowBox[{"\"\<IBMQ\>\"", ",", "\"\<New\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887630807867723*^9, 3.8876308078728027`*^9}, {
  3.890959050535439*^9, 3.89095905298199*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"2d5a5978-d4d7-4bee-86ff-7860699f758e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ServiceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GraphicsBox[
             TagBox[
              RasterBox[CompressedData["
1:eJzs3U2OZMuWnueln4aglqagWahpaqpLQQMgoRKhTgkoChDUWyPQlGxo1HWe
ykoPP+6RHm5773eZ2fsAHwESxbrbvrXMc3tGnHP/x//wf/27/+O/joj/9N/9
4//4d//+//mf/+Vf/v3/+7/+D//4v/xv//yf/s//+M//9L//L//8f//Tf/yn
f/mf/sN/84//x/yvIv6//z7ivw1JkiRJknSh9o/kQ/o/8p+B9CfP0o4+sCRJ
kiRJkiRJkiRJkiRJ0sJafP1dTOJ3Qo/K/TkkSZIkSZIkSZIkSZIkSZJ21mKN
3w/99PdJ20h5kiRJkiRJkiRJkiRJkiRJhWXs9zuiP/1dUkmSJEmSJEmSJEmS
JEmSpBll+Hui/h6pJEmSJEmSJEnSWuifI5nzf04nfg6mZnr8/ln2LS2kn8vg
d3k0eXAn0tla8PdmJJJqa/HXn423d0X682Kl9PCdW5IkSZIkSZIkqQr6Z0fm
3GTohp6DmTMZ/mxbf5bB7+oRkWbSg78z3jdpLS3W+TN9lmT4ni1JkiRJkiRJ
kkShf1Zkzv9ZnPg5mHWS4b3SVxn8Xh6129IMWvD3ZTSSamixzp/jsyfD3yGV
JEmSJEmSJEm6Ev3zIXP+z9/Ez8Gsmwx/xr27DH4Pj0o7tBnpHD34uzIaSayM
NT5LVkwPv8NKkiRJkiRJkiRdgf65kDk3Gbqh52D2SIa/d7ejDH73jko/thrp
cBn8PTkikq7Xwt8VnS0ZvltLkiRJkiRJkiSdhf5ZkDn/Z23i52D2S4Y/595F
Br9vR6YdWY50MPp+HBVJ18nw90Vnz21+LSRJkiRJkiRJknQk+mdA5txk6Iae
g9k3PbyHq8vg9+zonZUqyuDvx1GRdL4M/q6b45MhSZIkSZIkSZKkI9A/9zH+
XO0K9ByMuSVDK8rgd+votAP7kY5C34sjI+k8GfwdN+cnQ5IkSZIkSZIkSSPo
n/cYf552BXoOxtwnQyvJ4Hfq6PQjC5IOkMHfiyMj6XgZ/N021+c2d0mSJEmS
JEmSJP0c/XMe48/RrkDPwZhnydAKMvhdOiPtuIqkYfR9ODqSjpPB32nDJ0OS
JEmSJEmSJEk/Qf98x/jzsyvQczDmu2RoZhn8Dp2RfmBH0ogM/j4cHUnjMvi7
bOqlhSRJkiRJkiRJkt5B/1zHnJsM3dBzMOZP6eHPuWeVwe/PWWmHtSR9pgV/
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
4Rl0nQx+P1bZdYnUgr8Ds6V/UrT+za0/eoazRZIkSZJ21oL/XkYkx6uTJEmS
lkS/q/vuPjd6X9wf3aP377vo5zL4uY3MkH7eZ2kfnEPno/fiPvnDZ88Czzxy
T6Uj9eDvwEzpn9WsB+7dz5IftSxJkiRJa9j1O2Qe0J0kSZK0Ivpd3Xf3udH7
4v7oHr1/7uaxMvi53Wf257+lf3AOnSuD34uV9lwi0fs/U/qHHeu5W5/0TGeK
JEmSJO1o5++OOV6fJEmStCT6Xd1397nR++L+6F4Gv4Pu5nEy+Lnd5xP0Mz9L
+/AsOl4Lfh9GP6eywHOP3lPpCBn8/s+S/lnF+oNbr/RsZ0l+VrEkaUH5Imf9
udq/+c+UpJuM4z6Pnn3mtNNPoKp2/86Yww1KkrS+Fue9i7YLnl/Ha/H37xTu
xHrod3Xf3edG74v7o3sZ/A66m8fJ4Od2nxXOcEv/8Cw63m0W9D6stuMShd79
WdI/LVhvufVLz3iGuIeStI+MY37eRf15df/8ktbSYvznrkd+zmhdLeb7M/CM
5FiNkiQtJ4P9rvzrP181tGC/n/jdhEW/q/vuPjd6X9wf3cvgd9DdPE4GP7f7
fIp+7mdpA+fRMVrwe3DEZ1QWePYj7qk0IoPf/RnSP+xXP3PrmZ71DGkf9itJ
qqkF//tXVybDn6dIs2kxx++wZ/jZspIMfqeqJIealCRpfhm13w16+Of1lVrU
/36S4U5chZ617+5zo/fF/dG9DH4H3c3jZPBzu88q57ilD5xHx7jNgN6DFfdb
IlS7zxXTP25Xn3An/5z8tFxJUgkZ9b6L0PnVSfusUkknyJj73byH780zajH3
3p3556QkSbvJmPe94Pbs7eA+dpcx7z708H3uTPR8n91/zYPeF/dH9zL4HXQ3
j5PBz+0+I+hnf5Y2eCZ9rgU//6M+n7LA8x91T6VP0XtfPf3zajWAnvsMkSTN
I6Ped4/q6eHP2SRCizU/r359pqiejLl/B+Cq5EftSpI0nxZrvRf4HjomY619
+LUT7biKFPxMH5OnnlZHo/fF/dG9DH4H3c3jZPBzu89KZzniTPpcD372q+62
dLUMfu+rp33Yrca04GdfPflht7PK4Duno9cy+Pn4eaB7LdzLM/Y83x2ApkHv
FZ1KMvg+rvw8aQd0tpsMfnZmrsyA7ohODje4Nno+dHZCd02nigy+i7PTw/fQ
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
+HnS6b0Mfj/edUYGP3+z1lZGz55O++j90KlG74MumyeoV+i90mXzBK+N3g/d
SuhZ06lG74NONXofdLOg5/RYdn1aHY0+L54ffYs+o57dz2Xwe7lPv9uC399e
pduTX18Gvz/vqXrJ4M/0SGXLMDWNDP6sjVRpGeZgMvh50um9DH4/ZNk6wElt
wc/e7IhWRs+eTvvo/dCpRu+DLpsnqFfovdJl8wSvjd4P3UroWdOpRu+DTjV6
H3SzoOf0WHZ9Wh2NPi+eH31rC/6czv69cZYMfifu5xgl+P29a+v32EvI4Hfo
PVVP9JkeKX9eroE+Z6N1JRn8POn0Xga/H7JsHeCEtuDnbnZUK6NnT6d99H7o
VKP3QZfNE9Qr9F7psnmC10bvh24l9KzpVKP3QacavQ+6WdBzeiy7Pq2ORp8X
z4++lcGf09m/N86Swe/E/RxnC36Hryodn3kFGfwOvafqiT7To6Xro8/YaF1J
Bj9POr2Xwe+HLFsHOJkMfuZmR7YyevZ02kfvh041eh902TxBvULvlS6bJ3ht
9H7oVkLPmk41eh90qtH7oJsFPafHsuvT6mj0efH86FsZ/Dl9V+n21HPK4Hdy
n9rRO3xs6/u4S8jg9+g9VU/0mR4tXVsJ/oyN1NY0zfFk8DOl03sZ/H7IsnWA
EynBz9vs6FZGz55O++j90KlG74MumyeoV+i90mXzBK+N3g/dSuhZ06lG74NO
NXofdLOg5/RYdn1aHY0+L54f/YI+p57fz2TwO7lP7TL4PbrTY2Xwe3Sn6imD
P9cjlS3D1PAy+DM2UtkyzAFl8DOl03sZ/H687/2V4Gdt1qOV0bOn0z56P3Sq
0fugy+YJ6hV6r3TZPMFro/dDtxJ61nSq0fugU43eB90s6Dk9ll2fVkejz4vn
R7+gz6nn9zMZ/E7u0zHoPXrfjpXB79J7qp4y+HM9UtkyTA0vgz9jI5UtwxxQ
Bj9TOr2Xwe/H+95XCX7OZr1aGT17Ou2j90OnGr0PumyeoF6h90qXzRO8Nno/
dCuhZ02nGr0POtXofdDNgp7TY9n1aXU0+rx4fvQL+pxe4bvjDBn8PtzN8TL4
XbrP42Twu3Sv6qkEf65HamuapkZHn6/RupoMfqZ0ei+D3w9Ztg5wAlvwczbr
1cro2dNpH70fOtXofdBl8wT1Cr1Xumye4LXR+6FbCT1rOtXofdCpRu+Dbhb0
nB7Lrk+ro9HnxfOjX2TwZ3X2744zZPD7cDd90LvM7k+4jgx+n95T9Uaf69HS
ddFna7SuJoOfKZ3ey+D3Q5atAxzcFvyMzXq2Mnr2dNpH74dONXofdNk8Qb1C
75Uumyd4bfR+6FZCz5pONXofdKrR+6CbBT2nx7Lr0+po9Hnx/OgXGfxZnf27
4wwZ/D7cTR8l3OVVZPB3092qN/pcj1ZpmqZGlcGfrZHamqY5pgx+rnR6L4Pf
D1m2DnBgJfj5mvVuZfTs6bSP3g+davQ+6LJ5gnqF3itdNk/w2uj90K2EnjWd
avQ+6FSj90E3C3pOj2XXp9XR6PPi+dEvMviz+q7S7annk8Hv4z4dawvv2BVk
8HfTe6reMvizPVLZMkwNK4M/WyOVLcMcVAY/Vzq9l8Hvxzt/vBL8bM3OaGX0
7Om0j94PnWr0PuiyeYJ6hd4rXTZP8Nro/dCthJ41nWr0PuhUo/dBNwt6To9l
16fV0ejz4vnRLzL4s+oZ/lsGv4/7dKwS5+9wO+PBFpPB303vqXrL4M/2aOl6
6DM1WqVpmmPK4OdKp/cy+P2QZesAB7UFP1uzM1oZPXs67aP3Q6cavQ+6bJ6g
XqH3SpfNE7w2ej90K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9IsM/qx6
hv+Wwe/jPh1vi3N3WE55qrVk8HfTe6oz0Gd7tHQtJfgzNVpXlMHPlU7vZfD7
IcvWAQ6oBD9Xs7NaGT17Ou2j90OnGr0PumyeoF6h90qXzRO8Nno/dCuhZ02n
Gr0POtXofdDNgp7TY9n1aXU0+rx4fvSLDP6seob/lsHv4z4dr8R5+9vOeaTl
ZPB303uqM9Bne7SyaZoaTQZ/pkbrijL4udLpvQx+P2TZOsAB0TM1O7OV0bOn
0z56P3Sq0fugy+YJ6hV6r3TZPMFro/dDtxJ61nSq0fugU43eB90s6Dk9ll2f
Vkejz4vnR78owZ9Vz/DfMvh93Kc+Ms7ZXznncZaTwd9N76nOkMGf75Hamqap
0dDnabSyaZrjyuBnS6f3Mvj9eO+Pk8HP9Grl4NHzoVsZPXs67aP3Q6cavQ+6
bJ6gXqH3SpfNE7w2ej90K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9Cv6
rL5r6/nQk8ng93Gf+vG7YV4Z/N30nuoMGfz5Hi1dQwn+LI1WNsxzZBn8bOn0
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
Q6dnW/B7ocr28ekPGfyeZ2r7acr9ZPAzuVoroWdNpxq9DzrV6H3QzYKe02PZ
9Wl1NPq8eH70yhb8WbzKdwQpg9+TO5P2ZfB303uqmZTg74nZVSuhb2zB72y2
bjPLH2Z9hBLj/d51pfLDPYyEntlIbY2znMHtGek5j1x2aBb07Om0j94PnZ5l
8Huh2qLP98WRlZhbCX7PM5bB7f72z97efC5rbyX0rOlUo/dBpxq9D7pZ0HN6
LLs+rY5GnxfPjx6V4M/hX229Hv5iMvhd3SfpWQZ/N72nmk0Gf1fMrlaGvpXB
723mbvMr3438ayXc05n7nA09s9EqTdMc2xb8fFdsFvSc6LSP3g+dnmXwe7H3
5bvFTYSe4cxtcc4ZyPD3y7NaCT1rOtXofdCpRu+Dbhb0nB7Lrk+ro9HnxfOj
eyX4M/hJpc/jX04Gv6v7JD3L4O+m91Qz2oK/L2ZXSt8rwe/tKm3R/h5pif/+
O0P086xY7q9nSBn83EarNMxzRCX8nZFsFvSc6LSP3g+dnpXg92Lvy3eLm8gW
/ByvUkb7mfj3/4d7YVoJPWs61eh90KlG74NuFvScHsuuT6uj0efF86N/leDP
3ydtnZ7/ijL4fd0n6VkGfze9p5pRCf6+mF2lEvoVvbsVyhdtA3wue97TbDL4
uY1Y+X2kQynBz3L1ZkHPiU776P3Q6TV6L/a+fL+2aWTwc7x6W7z+90z6c9lz
K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9K8t+PPnGT1WBr+v+yQ9y+Dv
pvdUs8rg74zZ7G2hFrf50Ts0G6GM+WTwcxu18vNUx7AFP0ObBz0nOu2j90On
1+i92Pvy/dqmUYKfo9korYSeNZ1q9D7oVKP3QTcLek6PZden1dHo8+L5UYm5
/kxdn8vg9+XupH0Z/N30nmpmM/0OYzZaW6hVBr9HsxHKmBM9t5HbGuZKyeDn
Zv81C3pOdNpH74dOr2Xwu7HX5dutzYWeo9korYSeNZ1q9D7oVKP3QTcLek6P
Zden1dHo8+L5WVsJ/sx5PvvJ4Hd2n6RnGfzd9J5qZiX4e2M2ayV0BHqPZiOU
MSd6bjNUfh3uiTL4Odlzs6DnRKd99H7o9FoGvxt7Xb7d2lwy+FmajdBK6FnT
qUbvg041eh90s6Dn9Fh2fVodjT4vnp91leDP21W/F0aRwe/M/Un7Mvi76T3V
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
8R792ehWQs+aTjV6H3Sq0fsw61mGbug9mJFtoZ4y+B3fJ+lZBn83vadaWQn+
3pn9WgmNLoM/J3ZcGe/lAJ9v1NnMqAQ/Uzuvb2wDfN5ZmgU9Jzrto/dDp9/Q
e1u5/Hs9l0DP2Y5tD/3Z6FZCz5pONXofdKrR+zDrWYZu6D2YUW2h3jL4Pd8n
6VkGfze9p1pdCf7umX1bCc2CPit2XHtygM9Hln/MZ0Zb8HO18c5uDvCZZ2kW
9JzotI/eD51+U4Lf3arln9u5hgx+1nbOmaU/H91K6FnTqUbvg041eh9mPcvQ
Db0HM6ItdIYMftf3SXqWwd9N76n0z9/r3H4/oe+g2SeV0ExK8GfG+t+7HOAz
kuUf85kVPVfr3y/ozzxLs6DnRKd99H7o9Lst+P2tWH6wm6vwjM3f9rTVZ/Rn
pFsJPWs61eh90KlG78OsZxm6ofdgdnZb6CwZ/L7vk/Qsg7+b3lPpP7ffU+h7
aPauLTSr2+7o82N9714O8DnJ8oMZzSiDn631q8RvcoDPPkOzoOdEp330fujU
ht7fiuUni7mIEvy8ra0Sf6M/I91K6FnTqUbvg041eh9mPcvQDb0HszPbQmfK
4Hd+n6RnGfzd9J5KtdvvK/RdNHtsC82OPkP2e+V5nU9ygM9Jlh/MaFZb8PO1
49uijefi72ZBz4lO++j90KlNCX6Hq5Uf7OVKMviZW9+zSn9OupXQs6ZTjd4H
nWr0Psx6lqEbeg9mZ7WFzpbB7/0+Sc8y+LvpPZWeleDvo9m/ZegKSvBnyb6v
PK/ypRzgs5Llh3OaUQl+vnZ8rcoAzzB6s6DnRKd99H7o1K4Ev8eVyk+WcjFb
8HO379pebvI1+rPSrYSeNZ1q9D7oVKP3YdazDN3QezA7oy1EyOB3f5+kZxn8
3fSeSq+V4O+kWQldyRb8mbLP216v8aUc4POS5RezmlEJfsZ2XCWOsQ3wLCM3
C3pOdNpH74dOx9iC3+Uq5WcruZQS/Nztu8qLPb5Df1a6ldCzplON3gedavQ+
zHqWoRt6D2a920KUDH7/90l6lsHfTe+ptO/2uwx9N229ttBV3XZLny/7rG/k
AJ+XLL+c14y24Ods7W2Pi21QBniekZsFPSc67aP3Q6fjbMHvc4Xyw31cTQl+
9tbnjNKfl24l9KzpVKP3QacavQ+znmXoht6DWc+2ECmDPwP3SXqWwd9N76n0
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
5/A+Sc8y+LvpPZXGluGf25/dbeblz81IY8jg78wIZdsYm93++fQMVp7/rEr4
Hf+u21zy18FOrsQ1fv+bBT0nOu2j90Onayjx398T0Weqd3nAvOTvqP+2Bf9n
Q/QM6FZCz5pONXofdKrR+zDrWYZu6D3Y/G3x37/335L+lcGfz/skPcvg76b3
VJpHifF+blylDP7vA6QWGWv+3V62j+4QGfws3MPcMvg9jtAWfh8/KjHn+z6z
oOdEp330fuh0bfnQFvyZay2PGo7+R4n5fv84oi3G+X2UngXdSuhZ06lG74NO
NXofdGmXroRu0uyPSki/KcGf3/skPSvB3837JM2jxD/3dgv+391nbAt/7uma
Svxztuk71vv+lkOmdZwS/O9xZLfn1zFKXP8O+518vBL8z4HHZpGLp325eNIr
OXDlh+fRZzKu/+dPedCsjpSLt5JcPNVy8VTLxZMkSZIkSX8r8c+/R1/9z/Fb
/vw/w79H0loyrvMzYQv/rFDryf+Nvn/eaUmSJN2UuNbvpxn+OZEkSZIkSZIk
6VpKXPt9k2+SNOfPg38/s6Rr/O9DMrzTkiRJV1Fivt9Pt/BdUUmSJEmSJEnS
ejL4P6MnkvQsY7yfCf9+Jkl/KzHmPf63LbzTkiRJKykx3nuk//5OWjo9syRJ
kiRJkiRJM8jg/8yeSNJnMs55D+3+n1P6PpK0nLzrjL+zv//nlZ4PJkmSpOlk
nPO76Rb+TipJkiRJkiRJ0jsZ/DucRJKOUaL+e7+/Kqd9MknfKPHdXc7TPpkk
SZJWk18mSZIkSZIkSZK+k8G/w+l7o5IkSZIkSZIkSZIkSZIkSf1l8O9w+t6o
JEmSJEmSJEmSJEmSJElSfxn8O5y+NypJkiRJkiRJkiRJkiRJktRfBv8Op++N
SpIkSZIkSZIkSZIkSZIk9ZfBv8Ppe6OSJEmSJEmSJEmSJEmSJEn9ZfDvcPre
qCRJkiRJkiRJkiRJkiRJUn8Z/DucvjcqSZIkSZIkSZIkSZIkSZLUXwb/Dqfv
jUqSJEmSJEmSJEmSJEmSJPWXwb/D6XujkiRJkiRJkiRJkiRJkiRJ/WXw73D6
3qgkSZIkSZIkSZIkSZIkSVJ/Gfw7nL43KkmSJEmSJEmSJEmSJEmS1F8G/w6n
741KkiRJkiRJkiRJkiRJkiT1l8G/w+l7o5IkSZIkSZIkSZIkSZIkSf2V4N/h
9L1RSZIkSZIkSZIkSZIkSZKkc9DvcPreqCRJkiRJkiRJkiRJkiRJ0jnodzh9
b1SSJEmSJEmSJEmSJEmSJOkc9DucvjcqSZIkSZIkSZIkSZIkSZJ0DvodTt8b
lSRJkiRJkiRJkiRJkiRJOgf9DqfvjUqSJEmSJEmSJEmSJEmSJJ2DfoeTKCdN
kiRJkiRJkiRJkiRJkiSpBf0Op32eJEmSJEmSJEmSJEmSJElSiwz+fUjzvVFJ
kiRJkiRJkiRJkiRJktRfBv8+pPneqCRJkiRJkiRJkiRJkiRJ6i+Dfx/SfG9U
kiRJkiRJkiRJkiRJkiT1l8G/D2m+NypJkiRJkiRJkiRJkiRJks5Bvw9pvjcq
SZIkSZIkSZIkSZIkSZLOQb8Pab43KkmSJEmSJEmSJEmSJEmSzkG/D2m+NypJ
kiRJkiRJkiRJkiRJks6Rwb8Tab43KkmSJEmSJEmSJEmSJEmS+svg34k03xuV
JEmSJEmSJEmSJEmSJEn9leDfiTTfG5UkSZIkSZIkSZIkSZIkSeeg34k03xuV
JEmSJEmSJEmSJEmSJEnn2IJ/L9J8b1SSJEmSJEmSJEmSJEmSJPWXwb8Xab43
KkmSJEmSJEmSJEmSJEmS+ivBvxdpvjcqSZIkSZIkSZIkSZIkSZLOQb8Xab43
KkmSJEmSJEmSJEmSJEmSzpHBvxtpvjcqSZIkSZIkSZIkSZIkSZL6K8G/G2m+
NypJkiRJkiRJkiRJkiRJks5BvxtpvjcqSZIkSZIkSZIkSZIkSZLOkcG/H2m+
NypJkiRJkiRJkiRJkiRJkvorwb8fab43KkmSJEmSJEmSJEmSJEmSzrEF/46k
+d6oJEmSJEmSJEmSJEmSJEnqrwT/jqT53qgkSZIkSZIkSZIkSZIkSToH/Y6k
+d6oJEmSJEmSJEmSJEmSJEk6Rwb/nqT53qgkSZIkSZIkSZIkSZIkSTrHFvy7
kuZ7o5IkSZIkSZIkSZIkSZIkqb8S/LuS5nujkiRJkiRJkiRJkiRJkiTpHFvw
70ua741KkiRJkiRJkiRJkiRJkqT+SvDvS5rvjUqSJEmSJEmSJEmSJEmSpHNk
8O9MmiRJkiRJkiRJkiRJkiRJ0jm24N+bXD1JkiRJkiRJkiRJkiRJkqQzlODf
m1w9SZIkSZIkSZIkSZIkSZKks5Tg351cOUmSJEmSJEmSJEmSJEmSpDNtwb8/
uWqSJEmSJEmSJEmSJEmSJEln891R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuV
JEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmS
JEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmS
JEmSJEmSJEnryODfrbxykiRJkiRJkiRJkiRJkiRJIynBv1951SRJkiRJkiRJ
kiRJkiRJkka0Bf+e5dWSJEmSJEmSJEmSJEmSJEkaVQnfH/W9UUmSJEmSJEmS
JEmSJEmStJIM/p3LKyRJkiRJkiRJkiRJkiRJkjSLDP7dy5mTJEmSJEmSJEmS
JEmSJEmaTQb/DuaMSZIkSZIkSZIkSZIkSZIkzSr/f1vw72POkiRJkiRJkiRJ
kiRJkiRJ0uxK+N8g9b1RSZIkSZIkSZIkSZIkSZK0mhK+Q+p7o5IkSZIkSZIk
SZIkSZIkaUUZvkfqe6OSJEmSJEmSJEmSJEmSJGlF+b9twb/H6XujkiRJkiRJ
kiRJkiRJkiRJ58uH6Hc8fW9UkiRJkiRJkiTpAP8PV6WNNA==
               "], {{0, 384.}, {2702., 0}}, {0, 255}, ColorFunction -> 
               RGBColor], 
              BoxForm`ImageTag[
              "Byte", ColorSpace -> "RGB", Interleaving -> True, 
               MetaInformation -> <|
                "Comments" -> <|"Software" -> "Adobe ImageReady"|>|>], 
              Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
             ImageSizeRaw -> {2702., 384.}, 
             PlotRange -> {{0, 2702.}, {0, 384.}}], 
            GridBox[{{
               TagBox["\"IBMQ\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-1054d579374ff2760c8ff481812d2881"]], 
                   "Connected", "Not Connected"], StandardForm], 
                 ImageSizeCache -> {75., {1., 8.}}], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            GraphicsBox[
             TagBox[
              RasterBox[CompressedData["
1:eJzs3U2OZMuWnueln4aglqagWahpaqpLQQMgoRKhTgkoChDUWyPQlGxo1HWe
ykoPP+6RHm5773eZ2fsAHwESxbrbvrXMc3tGnHP/x//wf/27/+O/joj/9N/9
4//4d//+//mf/+Vf/v3/+7/+D//4v/xv//yf/s//+M//9L//L//8f//Tf/yn
f/mf/sN/84//x/yvIv6//z7ivw1JkiRJknSh9o/kQ/o/8p+B9CfP0o4+sCRJ
kiRJkiRJkiRJkiRJ0sJafP1dTOJ3Qo/K/TkkSZIkSZIkSZIkSZIkSZJ21mKN
3w/99PdJ20h5kiRJkiRJkiRJkiRJkiRJhWXs9zuiP/1dUkmSJEmSJEmSJEmS
JEmSpBll+Hui/h6pJEmSJEmSJEnSWuifI5nzf04nfg6mZnr8/ln2LS2kn8vg
d3k0eXAn0tla8PdmJJJqa/HXn423d0X682Kl9PCdW5IkSZIkSZIkqQr6Z0fm
3GTohp6DmTMZ/mxbf5bB7+oRkWbSg78z3jdpLS3W+TN9lmT4ni1JkiRJkiRJ
kkShf1Zkzv9ZnPg5mHWS4b3SVxn8Xh6129IMWvD3ZTSSamixzp/jsyfD3yGV
JEmSJEmSJEm6Ev3zIXP+z9/Ez8Gsmwx/xr27DH4Pj0o7tBnpHD34uzIaSayM
NT5LVkwPv8NKkiRJkiRJkiRdgf65kDk3Gbqh52D2SIa/d7ejDH73jko/thrp
cBn8PTkikq7Xwt8VnS0ZvltLkiRJkiRJkiSdhf5ZkDn/Z23i52D2S4Y/595F
Br9vR6YdWY50MPp+HBVJ18nw90Vnz21+LSRJkiRJkiRJknQk+mdA5txk6Iae
g9k3PbyHq8vg9+zonZUqyuDvx1GRdL4M/q6b45MhSZIkSZIkSZKkI9A/9zH+
XO0K9ByMuSVDK8rgd+votAP7kY5C34sjI+k8GfwdN+cnQ5IkSZIkSZIkSSPo
n/cYf552BXoOxtwnQyvJ4Hfq6PQjC5IOkMHfiyMj6XgZ/N021+c2d0mSJEmS
JEmSJP0c/XMe48/RrkDPwZhnydAKMvhdOiPtuIqkYfR9ODqSjpPB32nDJ0OS
JEmSJEmSJEk/Qf98x/jzsyvQczDmu2RoZhn8Dp2RfmBH0ogM/j4cHUnjMvi7
bOqlhSRJkiRJkiRJkt5B/1zHnJsM3dBzMOZP6eHPuWeVwe/PWWmHtSR9pgV/
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
4Rl0nQx+P1bZdYnUgr8Ds6V/UrT+za0/eoazRZIkSZJ21oL/XkYkx6uTJEmS
lkS/q/vuPjd6X9wf3aP377vo5zL4uY3MkH7eZ2kfnEPno/fiPvnDZ88Czzxy
T6Uj9eDvwEzpn9WsB+7dz5IftSxJkiRJa9j1O2Qe0J0kSZK0Ivpd3Xf3udH7
4v7oHr1/7uaxMvi53Wf257+lf3AOnSuD34uV9lwi0fs/U/qHHeu5W5/0TGeK
JEmSJO1o5++OOV6fJEmStCT6Xd1397nR++L+6F4Gv4Pu5nEy+Lnd5xP0Mz9L
+/AsOl4Lfh9GP6eywHOP3lPpCBn8/s+S/lnF+oNbr/RsZ0l+VrEkaUH5Imf9
udq/+c+UpJuM4z6Pnn3mtNNPoKp2/86Yww1KkrS+Fue9i7YLnl/Ha/H37xTu
xHrod3Xf3edG74v7o3sZ/A66m8fJ4Od2nxXOcEv/8Cw63m0W9D6stuMShd79
WdI/LVhvufVLz3iGuIeStI+MY37eRf15df/8ktbSYvznrkd+zmhdLeb7M/CM
5FiNkiQtJ4P9rvzrP181tGC/n/jdhEW/q/vuPjd6X9wf3cvgd9DdPE4GP7f7
fIp+7mdpA+fRMVrwe3DEZ1QWePYj7qk0IoPf/RnSP+xXP3PrmZ71DGkf9itJ
qqkF//tXVybDn6dIs2kxx++wZ/jZspIMfqeqJIealCRpfhm13w16+Of1lVrU
/36S4U5chZ617+5zo/fF/dG9DH4H3c3jZPBzu88q57ilD5xHx7jNgN6DFfdb
IlS7zxXTP25Xn3An/5z8tFxJUgkZ9b6L0PnVSfusUkknyJj73byH780zajH3
3p3556QkSbvJmPe94Pbs7eA+dpcx7z708H3uTPR8n91/zYPeF/dH9zL4HXQ3
j5PBz+0+I+hnf5Y2eCZ9rgU//6M+n7LA8x91T6VP0XtfPf3zajWAnvsMkSTN
I6Ped4/q6eHP2SRCizU/r359pqiejLl/B+Cq5EftSpI0nxZrvRf4HjomY619
+LUT7biKFPxMH5OnnlZHo/fF/dG9DH4H3c3jZPBzu89KZzniTPpcD372q+62
dLUMfu+rp33Yrca04GdfPflht7PK4Duno9cy+Pn4eaB7LdzLM/Y83x2ApkHv
FZ1KMvg+rvw8aQd0tpsMfnZmrsyA7ohODje4Nno+dHZCd02nigy+i7PTw/fQ
d7TYZx/yiMKEz/IxeeppdTR6X9wf3cvgd9DdPE4GP7f7jKKf372soQU/9yN3
IAuc4ch7Kv0UvfPV0z5uVkfI4HegcvrHzc4pg++cjl7L4OdDJkcL1CFauItX
pYd7vwp6l+hUkMH3QH6WtNECN5LBz8zMlRnQHdHJ4QbXRs+Hzk7orunQMvgO
rk4P30Ofyaj37y66Kjnc3t7o+TnPudH74v7oXga/g+7mcTL4ud1ntfMcdS79
DD3v1fdaulILfucrp3/crI50mwO9C5Wzkwy+bzp6LYOfD5kcLVBDMvgd2Dm3
/tv3I1Jh9P7QIWXw56+SHn6OvCODn5WZKzOgO6KTww2ujZ4PnZ3QXdOh5DfP
tEt6+B56k8HPokpyqMl90XNzjnOj98X90b0MfgfdzeNk8HO7zxHoM7ibrAx+
3kfPvtqZpCtl8DtfOaqD3oXKyc9rnU4G3zcdvZbBz8fPgr208J9tqJh8PTIV
Re8MHUL+4Pl2Sw9/bv+dDH5GZq7MgO6ITg43uDZ6PnR2QndN52ot/D79mB57
vodm8N1XzK77MIKe2WPy1NPqaPS+uD+6l8HvoLt5nAx+bvdZ8UxHnk1/Rs95
h52WrkTve+W0z2vVCVrwO1E5u8jgu6aj1zL4+ZDJ0QL1tgx/vjVDbnNqzwao
cuhdoXOlFn5+vZv8qOH1ZfCzMXNlBnRHdHK4wbXR86GzE7prOlfqBz/7asmP
m51LC77rGdI/7HdH9Kx2vcuroPfF/dG9DH4H3c3jZPBzu89R6HO4n4wMfs5n
zLzauaSrtOD3vWr657XqRLe50LtRNe3zWqeSwXdNR69l8PMhk6MF6o8y+Dmb
n6fHPn9OzoreETpXyRPPsGp6+PnxKIOfi5krM6A7opPDDa6Nng+dndBd07lC
u/A8s6fHuu+hLfx7/k/Sfl71dugZPSZPPa2ORu+L+6N7GfwOupvHyeDndp9V
z3X0+fQcPd9d9lm6Sga/71Wjmlrwu1E1+XGrc8ngu6aj1zL4+fg5sKYMfr5m
PD38OUtV9G7QOVsLfy47mvxh5yvL4Odh5soM6I7o5HCDa6PnQ2cndNd0ztbh
882a/KDrytwD9+FM9Hyc19zofXF/dC+D30F38zgZ/NzucyT6LO7otTL4+Z41
62pnk65C73rV5ECnOl8GvyNVs4MMvmc6ei2Dnw+ZHC1Qf5PBz9Ucnx7+/mg1
9E7QOVMrcL5V0n9W/bIy+FmYuTIDuiM6Odzg2uj50NkJ3TWds7TwdwVH039a
ekEt+B5XyQr7cBZ6No/JU0+ro9H74v7oXga/g+7mcTL4ud1n5bP9Sjv4nPoL
Pdeddlm6Qgt+16tG9dE7UjVtoNNZZPA909FrGfx8yORogfo3Lfh5mvPTQ1XQ
u0DnLL3A2VZM+8EMVpTBz8DMlRnQHdHJ4QbXRs+Hzk7orumcoRU410ppPym/
kB58dyum/WAGu6Bn8pg89bQ6Gr0v7o/uZfA76G4eJ4Of232ORp/nWfoJ59zd
rVN6rmd+FmWBM515T6VnMvhdr5j2eaW6UAa/KxWTn1c6jQy+Zzp6LYOfj58B
c2tR77uP8e7sgN4BOmfoBc61ctrbk1hPBt+/mSszoDuik8MNro2eD52d0F3T
OVorcKYV094fAa6F30vch2vR83hMnnpaHY3eF/dH9zL4HXQ3j5PBz+0+q5/v
V9oJZ91VC36eu+2xdAV6zyumDzWqq9H7UjE77HAG3zMdvZbBz4dMjha4uQx+
hoZLD/8egUTPn86RWviz2avS3xvJcjL47s1cmQHdEZ0cbnBt9Hzo7ITums6R
ssB5Vk6+OwhQC76nXdLemsge6FnMeFf1G70v7o/uZfA76G4eJ4Of233OQJ/p
WfpJZ93RrUt6nmd/DmWBc519T6V7Lfg9r5j2eaUCZPA7UzGry+A7pqPXMvj5
kMnRAjfVot53HsMlQwR67nSO0gqcZbf0dwazmAy+dzNXZkB3RCeHG1wbPR86
O6G7pnOUXuAsO6S/OxCAO3B92juD2QA9h8fkqafV0eh9cX90L4PfQf/MOU4G
P7f77HBG9/U4Lfg57rjD0tky+D2vGM2H3pmKyZFCJ5DBd0xHr2Xw8/H+zyWD
n5uplx66Gj1zOkdoBc6xa/qfx7OUDL5zM1dmQHdEJ4cbXBs9Hzo7obumc4Re
4Bw7pb83lku5A1zan8ezPHoGj8lTT6uj0fvi/uheBr+Dr6Kfy+DndsUM6XM9
Sz/xvLu4dUjP8T550jmzwNmuuKfSL9XudoXkSKHCZPC7Uy19pNAJZPAd09Fr
Gfx8yORogRtp4fuQ+XNa6Cr0rOmMagXOsHv6n4a0kAy+bzNXZkB3RCeHG1wb
PR86O6G7pjMqC5xhx/Q3ZnOFFv49S4W078e0PLr/x+Spp9XR6H1xf3Qvg9/B
V9HPZfBzu2KG1c75K+28Iy+vBT+/XfdXOhu94xWjedG7UzEry+D7paPXMvj5
kMnRAjfRgp+VmScZugI9ZzojWoHnN3+lfz+qZWTwXZu5MgO6Izo53ODa6PnQ
2QndNZ0RrcDz75z+xwmdqwXfgfmd9t2wFkd3/5g89bQ6Gr0v7o/uZfA7+Cr6
uQx+blfNkD7bs/RTT7y2W3f0/O6TJ541C5zvqnsqZfA7Xi050Kd4PfgdqpY2
UmhxGXy/dPRaBj8fMjla4AZ68HMy86WHzkbPmM6IXuD5ze/kt9NaQwbfs5kr
M6A7opPDDa6Nng+dndBd0/lUK/Dshvv74PbGs5l99oFG9/6YPPW0Ohq9L+6P
7mXwO/gs/cQzryyDn919zpQFzudn6jFa8HPbeXelM2XwO14tbaBP8VrwO1Qt
OdBndRl8v3T0WgY/H+9+XT34GZl500NnoudL51O9wLObv6d9M7MVZPAdm7ky
A7ojOjnc4Nro+dDZCd01nU+0As9tfqd9N6wTtAOe2ZyXHdGdPyZPPa2ORu+L
+6N7GfwOupfHyeBnd5+z0eejzr0ael5Xf/5kgTO6r7oKvd/V0sfqVBH0HlXL
ynudwfdLR69l8PMhk6MFLqqFv1tljkmP9X8fjELPls4neoHnNq/TXk5ufhl8
v2auzIDuiE4ON7g2ej50dkJ3TecTvcBzm69p3w3sQO2Cs5ix9FfDWxjd+WPy
1NPqaPS+uD+6l8HvoHt5nAx+dvc5W4Jnc3+PkcHPa/e9lc5E73e15FCbqiKD
36VqWVUG3y0dvZbBz4dMjha4oBb8XMx6aaGj0TOl81OtwDOb4+c6iwy+WzNX
ZkB3RCeHG1wbPR86O6G7pvNTvcAzm7+nfze0A9HnNO8lX8xvVXTfu/c/O3pf
3B/do/fvVdqJZ15ZBj+7+1yBPiN59hXQc3pMnnravyRwLndVhAx+v6tFa2jB
71K1tIE+K8vgu6Wj1zL4+ZDJ0QIX04KfiVk3LXQkep50fqIVeF7zXvrzEU4v
g+/WzJUZ0B3RyeEG10bPh85O6K7p/EQr8LzmdfrLyR2jFzijeT/t6RTXRHf9
mDz1tDoavS/uj+7R+/cq+kwGP7ur55gXnsfP1mNl8HNyZ6XzZPD7XSl9qE1V
Q+9TteRQm3Vl8N3S0WsZ/Hy89zW04Odh1k8LHYWeJZ2f6AWe17yffDrFuWXw
vZq5MgO6Izo53ODa6PnQ2QndNZ13tQLPav6c9nx8w3qBs5mfZxd0z4/JU0+r
o9H74v7oHr1/u/95crQMfnbEHOlz0uefFT2fx+Spp/0tLziLe6oK6N2ulhxq
U9Vk8DtVKX2ozboy+G7p6LUMfj5kcrTARbTgZ2H2iY5Bz5HOu7LAs5qfp/19
lFPL4Ds1c2UGdEd0crjBtdHzobMTums67+oFntW8l/Z8hB9z9vOmP5nniuie
H5OnnlZHo/fF/dE9ev/cyWNl8PO7z1XyxDO4y+fI4Ofjvl57bu2H3u1q0Vpa
8DtVLSvK4Hulo9cy+PmQydECF9CCn4PZKz10BHqOdN7RCjyn+Sz97+OcWgbf
qZkrM6A7opPDDa6Nng+dndBd03lHFnhO83760yl+phU4jxlLi/XRHT8mTz2t
jkbvi/ujXzL4/XMnj5XBz+8+V6LP+irtxDPPjJ4L+bmTJzz/LPdU+8jgd7ta
tB56p6qlDbVZUwbfKx29lsHPh0yOFji5FvwMzJ7poVH0DOm8oxd4TvN58m8T
nVcG36eZKzOgO6KTww2ujZ4PnZ3QXdOxozXTng3yh1qBc5jx9Fgf3fFj8tTT
6mj0vrg/+iWD379naecdeXkZ/Pzuc6V24HMfmX7imWd164SeC7mreeBzz3Z2
7SOD3+1KyZEyVVYGv1uVkiNlFpXB90pHr2Xw8/HOM1rw/Zu900Mj6PnR+ZMs
8IxmPC3WkMF3aebKDOiO6ORwg2uj50NnJ3TXdP6kF3hGc85s/8TZr5OMtdH9
7tb3auh9cX/0Sw9+/55Fn8vg50fOsupOtxPPPJsW/Dzo+eQBzzzzPdUe6L2u
ljbUpqrK4HerUnKkzKIy+F7p6LUMfj7e+eu14Ls35pYW+hQ9Ozr2s0f642An
lcF3aebKDOiO6ORwg2uj50NnJ3TXdL7TCjyf+Tz9bxN9XxZ4fnNsVkZ3+5g8
9bQ6Gr0v7o9+oXfPfTxeBj/D+1ytDTzrmeknnnk2ty7oedCzyQ+fdZV7qj3Q
e10tWhe9W9Wymgy+Uzp6LYOfD5kcLXBCLfjejblPC32Cnhud72SB5zPHpcX8
MvgezVyZAd0RnRxucG30fOjshO6aznd6geczY2mPQ31DK/Dc5vj0WBfd7WPy
1NPqaPS+uD+6acHvnvt4vAx+hvch9B8+41VpJ555Fi34OVSYS37wnKvdU62t
Bb/XldKH2lR19H5Vy2oy+E7p6LUMfj5kcrTAybTgOzfmMT30CXpudF5pBZ7N
HJse88vgezRzZQZ0R3RyuMG10fOhsxO6azqvtALPZsbT4+d6gec256TFmuhe
H5OnnlZHo/fF/dFNBr97z6IxGfwM6Xm2HzzfleknnnkWtw7oOVSYSb75fCvf
U60tg9/rSsmRMlVeBr9jlZIjZRaUwXdKR69l8PPxvl+nB9+5Mc+SoZ+iZ0bn
lV7g2czxyZhbBt+hmSszoDuik8MNro2eD52d0F3TeaUXeDZzTFq8Lws8rzkv
PdZE9/qYPPW0Ohq9L+6Pbui92+nPjCtl8HO8D6X/4bmotBPPXF0Lvv8q88g3
nm2He6p1ZfB7XSk5UqbKy+B3rFJypMyCMvhO6ei1DH4+3vdr9OD7Nua7tNBP
0POi80wr8Fzm2pnPIoPvz8yVGdAd0cnhBtdGz4fOTuiu6TzTCjyXOS493kc/
qzk/LdZDd/qYPPW0Ohq9L+6PWvB75y6eI4Of431I9NmfpZ964tpuZ6f7rzKL
fPFMO95TrYne6WrR2lrwO1YpOVJmQRl8p3T0WgY/H+/7+XrwXRvzp/TQT9Dz
ovNML/Bc5rxkzCuD78/MlRnQHdHJ4QbXRs+Hzk7oruk80ws8lzk2Lf4sCzyn
OT891kN3+pg89bQ6Gr0v7o8y+L17Fo3L4OdYZaYZ/PmfpZ135LIy+N7dzZpd
aE30TleL1kfvWLWsJIPvk45ey+DnQyZHC5xAC75nY95Nht5Fz4qOneyZWWXw
3Zm5MgO6Izo53ODa6PnQ2QndNZ1HrcAzmePT48/oZzTXpcVa6D4fk6eeVkej
98X9Eb1z7uF5MvhZ3odGn79qL1ej+672eXP7z6c72HkfdT56pyulD3apOdB7
Vi0ryeD7pKPXMvj5kMnRAotrwXdszE/TQu+g50TnURZ4JnN+Wswpg+/OzJUZ
0B3RyeEG10bPh85O6K7pPOoFnsmckxavZYHnM9flNu+V0H2u3u/q6H1xf/aW
we/cs7TzjryVDH6W96Fl8B3s/rmbwfftXtbuQ2vJ4He6UnKkTE0jg9+1Smkj
ZRaTwfdJR69l8PMhk6MFFteD79iYn6aH3kHPiY597Jkec8rguzNzZQZ0R3Ry
uMG10fOhsxO6azr2sU96vEY/m7k+K6G7fEyeelodjd4X92dv9L49Sz/1xHvJ
4Od5nwpu+0X3ULWbK9A9PyZPPe17MvgedtxFXSOD3+lKyZEyNY0MftcqJUfK
LCaD75OOXsvg5+NdP0cPvl9jPk0L/Qk9Izr3ssDzmOvSYj4ZfG9mrsyA7ohO
Dje4Nno+dHZCd03nXhZ4HnPdvH/JAs9lrs9t7qugu1y52x3Q++L+7CuD37dn
aecdeTsZ/DzvU0ELvoddP3sz+J7v00897fsy+C6q3VOtI4Pf6UppI2VqGhn8
rlVKjpRZTAbfJx29lsHPx7t+vBZ8t8aMpIf+hJ4RnXu9wPOY69JjPhl8b2au
zIDuiE4ON7g2ej50dkJ3Tccu9krG39HPZLisgu7xMXnqaXU0el/cn33Ru7b6
nw0VZPDzrDjbHnwXlfs5C93vY9qpp31fBt/FTnuoa9H7XC3aQwt+1yqlD7VZ
SwbfJx29lsHPh0yOFlgU3asxR6SFvkPPh84vrcCzGG7+s8jgOzNzZQZ0R3Ry
uMG10fOhsxO6azq/tALPYq6d+U0WeB7DpcUa6B4fk6eeVkej98X92VMPftfc
v/Nl8DO9TxUt+C522/8Mvt/79FNP+zMZfB8V76nWQO9ztWgf9K5Vyyoy+C7p
6LUMfj5kcrTAgnrwvRpzRHroO/R86PySBZ7FXJ/b3GeSwXdm5soM6I7o5HCD
a6PnQ2cndNd0fskCz2KuSYvfeoHnMVwy1kD3uGqvu6D3xf3ZTwt+z56ln3jm
XWXwc71PJbd9o/uo3tFRWvC9PqadeN6fyuD7WH0HxaH3uVq0D3rXqmUVGXyX
dPRaBj8fMjlaYEE9+F6NOSot9Ao9GzoZ/hm2c3rMJYPvzMyVGdAd0cnhBtdG
z4fOTuiu6WT45/xuuc37phV4FsNnBXSHj8lTT6uj0fvi/uyH3rFXaSeeeVcZ
/FzvU0kLvo9n6SeemXI7E91r5Y4z+E6q3lPNLYPf50rJkTI1HXrfqmUVGXyX
dPRaBj8fMjlaYFE9+G6NOSI99Ao9G2PotJhHBt+XmSszoDuik8MNro2eD52d
0F0bQ+QmCzyH4dNifnSHj8lTT6uj0fvi/uylB79jz9LPPPTGMvjZ3qeaDL6T
Z2nnHflyLfg+q/ebwXdS+Z5qXhn8PldKjpSp6fTgd65ScqjNOjL4LunotQx+
Pt7zc/Tg+zXmiOg5ei7G0MmYRwbfl5krM6A7opPDDa6Nng+dndBdG0OkF3gG
UyM95kd3+Jg89bQ6Gr0v7s8+bp+39H69Sjvv2FvL4Gd7n4roTp6ln3ria1X7
3MlTT/uZDL6X6vdUc8rg97lScqRMTSeD37lKyZEyC8ngu6Sj1zL4+XjPz9OD
79iY0WToGXouxlTILDL4rsxcmQHdEZ0cbnBt9Hzo7ITu2hhj6MyO7u8xeepp
dTR6X9yfPbTgd8udu14GP9/7VJTB9/Is7bwjX6YF36M7uEZHmlMGv8+VkiNl
ajoZ/M5VSo6UWUgG3yUdvZbBz8d7fq4WfM/GjEZ/R8/EmAppMYcMviszV2ZA
d0QnhxtcGz0fOjuhuzbGGDot5kb395g89bQ6Gr0v7s/6WvB79Sr9vGMr6v1d
WlV0L6vejdsZ6B7vk6ee9nMZfDcz3FPNh97lasmhNjWbDH7nKiVHyiwkg++S
jl7L4OfjPT9fC75rY0bSQo/omRhTIRlzyOC7MnNlBnRHdHK4wbXR86GzE7pr
Y4yhkzE3ur/V+twNvS/uz9pa8Dv1XdpZB9d/kcHP+D5VZfDdrHY/WvD9uX9r
9aT50LtcLW2oTc0mg9+5allBBt8jHb2Wwc+HTI4WOJEWfN/GfJoeekTPxJgK
6TGHDL4rM1dmQHdEJ4cbXBs9Hzo7obs2xpgKmRnd3WPy1NPqaPS+uD/r6sHv
k7vGyuDnfJ/KKt6XfuqJz1Wtzzz1tGMy+H5muaeaC73L1aK9ZPA7Vy0ryOB7
pKPXMvj5kMnRAifTgu+8cnIg9LPvEH1Fz8OYKplBBt+TmSszoDuik8MNro2e
D52d0F0bY0yFtJgX3d1j8tTT6mj0vrg/a+rB79J36ecdXXcy+Fnfp7IWfD/P
0s478mky+N5m+rzJ4Dua5Z5qLvQuV4v20oLfuWpZQQbfIx29lsHPh0yOFjip
Hnz39NxvaUMtvtbC3yc9a276jZ6HMVWSUV8G35OZKzOgO6KTww2ujZ4PnZ3Q
XRtjTIVkzIvubqUud0Tvi/uzlhb8Dv0p/azD628y+Hnfp7rbbtIdzdjbI7qv
x7RTTzsug+9o5n1TTRn8LleL9kPvXLWsIIPvkY5ey+DnQyZHC5xYD77/q3I7
ax7S2mfav/7n79T5WXPUb/Q8dk8+5B33//O9wBlWybv9kzL4nsxcmQHdEZ0c
bnBt9Hzo7ITuesdk/Ow99P5/thd4fnPePrT4s/v/effhuPQ3uq+K7u7ZTmse
9L64P+u4fY7S+/NO2knn199l8PO+T3Ut+I5m/1zO4Pu6Tz/1tMfI4Hua6Z5q
Dhn8LleL9kPvXLXkUJs1ZPA90tFrGfx8vOOcHvwMzsrtbO2wpo7Twns3Ev1G
z2KnZJz758Xtf3cvcM6ZU10G35GZKzOgO6KTww2ujZ4PnZ3QXe+QjOO/27bw
/WTG9Dh3H3qBM86cWdG9PSZPPa2ORu+L+zO/DH5v3k07pQG9ksHP/D4z6MH3
NGt3N3RPM37mZPA9zbhrqi2D3+Vq0X7onauWHGqzhgy+Rzp6LYOfj3ec1YOf
w64zzeD7mi3tg55XRc9i5fTgPkvyD89mnqe6DL4jM1dmQHdEJ4cbXBs9Hzo7
obteMT2u/Yxpsd7fC6wUYh/yoGffLe2nZRdB9/aYPPW0Ohq9L+7PvDL4fdnh
M35mGfzc7zMLuqdZP5sz+J7u00897XEy+K5mvKeqLYPf5WrRfuidq5YcarOG
DL5HOnotg5+Pd5zXgp/FSHrM/Xc3GXyHsyQ/anhN9CxWTP5kACdrwfcxU/KT
kjdCz4dODjeoZ+i50snhBtdGz4fOTuiuV0oG+7329p/dg+/B/N4Hmvsw38w+
Qfe2So+7ovfF/ZlPBr8nP007oQf9WQY/+/vMIoPvasb+6H5m6+uXDL6rGXtT
bRn8LleL9kPvXLXkUJs1ZPA90tFrGfx8vOM1tODn8dP0WOfvbVr4M5l3o7/Q
c1glPWp/jmTwHc2Q/KzebdDzoZPDDeoZeq50crjBtdHzobMTuusVkj8t/WQt
+E52Tv5pQBdr4d9VzDq7d9G9rdLjruh9cX/mkDHvnyXt8Db0rgx+/veZCd3V
bJ/P1T6f8tTTHiuD72vWe6q66D2uGO2H3rlqyaE2a8jge6Sj1zL4+XjH62jB
z2T32fXgu60e/YWew+zpMc/f/bbg+5oheo2eDZ0cblDP0HOlk8MNro2eD52d
0F3PnP5B31e6PR/d0U7Jt6bCcR/ey4zozma7C/qK3hf3p6YWc/+u6K+0Q1vR
T2XwO3CfmWTwfc3SYQu+lxl6eiWD72vW7lQXvccVo/3QO1ctfazOEjL4Huno
tQx+PmRytMAFtaj9dzr9tJPX0YLvuXLap8Uuhp7DzMmf111CD767ytFr9Gzo
5HCDeoaeK50cbnBt9Hzo7ITueta0D7om9OC7Wj23jtub86C14PuqnhnRnT0m
Tz2tjkbvi/vDa/FX77f04HfgqLSjCtLHMvg9uM9s6L5m+Yyu9rmVp572eBl8
ZzPfU9VE73HFaD/0zlXM7DL4DunotQx+PmRytMCF9eDn85h25oGLacH3XTX5
catroecwY/pHTddyOwPdY9W0z2tdHj0bOjncoJ6h50onhxtcGz0fOjuhu54t
/bOaUbdnpntbNfn+GMpowfdWOe3TYkF0Zyvci53R+/KYHr9/h9GcF3rOZ++Q
asjg9+E+s2nBd/Ys7bwj/1gLvo/Z9yyD72zm/lQTvccVo/3QO1cxs8vgO6Sj
1zL4+ZDJ0QIX14Of0X+Off++pgXffcXsug+P6DnMlvZRyzXd7gDdZ8XkQKer
o2dDJ4cb1DP0XOnkcINro+dDZyd01zOlfVZxCT34/lZL+8kAimnB91c1+XGr
HLqzFTrcGb0vxhyZHqokg9+J+8zottN0b5XvWbV+2qmnPUcG39vs91T10Htc
MdoPvXMVM7sMvkM6ei2Dnw+ZHC1wAz2cESmDvycVI34GM6V9VnFZLfhOKyY/
r3R59Gzo5HCDeoaeK50cbnBt9Hzo7ITuepa0D/utpAff4wq59dh+Vn1J7sPz
5ECnFLqzFTrcGb0vxhyVFqomg9+L+8yoBd9b1fvWgu/hPv3U054ng+9u9nuq
eug9rhjth965ipldBt8hHb2Wwc+HTI4WuIkMZj7t/KNNoQd/V6pF/AxmSP+4
3fpa8P1Wy8rzHkXPhk4ON6hn6LnSyeEG10bPh85O6K5nSPu03ILoLmdP/3nl
pd3OQ3daMbOh+3pMnnpaHY3eF2NG00NVZfD7cZ9Z3Xac7q7ivavWSzv1tOfJ
4Ltb4Z6qFnqPK0b7oXeuYmaXwXdIR69l8PMhk6MFbqTFtbNpVxxqIvRdqZYc
anMN9Ayqp39e7TRuZ6R7rhY9R8+FTg43qGfoudLJ4QbXRs+Hzk7orqunfdxs
TS34TmdN/3nd5bXge62Y2dB9PSZPPa2ORu+LMSNpocoy+B25z6xa8N1Vu3/t
yfOQ6aee9lwZfH8r3FPVkcHvccVoP/TOVczsMvgO6ei1DH4+ZHK0wM20uGYu
7ZrjTKUFf18qJUfKXAQ9g8rpA73Ohu66WvQcPRc6OdygnqHnSieHG1wbPR86
O6G7rpz2ea2l9eC7nTHtg65nkMF3Wy2zoft6TJ56Wh2N3hdjPkmGZpDB78p9
ZpbB9/eYfuaB/4A++2Paqac9Vwbf3yr3VDVk8HtcMdoPvXMVM7sMvkM6ei2D
nw+ZHC1wQy3Om0e/7hhTuvVD35kqybEql0DPoHJ2ksH3XSltpMyF0XOhk8MN
6hl6rnRyuMG10fOhsxO666ppA53OgO53trSPWp4H3W+1tKE2r0f39Zg89bQ6
Gr0vxvwkGZpJBr8z95kd3d+ztDMP/EJ+8Jx+Lr2WwXe40j0VL4Pf44rRfuid
q5gcKbSADL5DOnotg5+P93s+LY7/HcZ+5QEm1YK/M5WyO7r/qmkDnc6K7rxS
cqzKZdFzoZPDDeoZeq50crjBtdHzobMTuuuK6UONziGD73mW5EcNzyWD77lS
cqRMAN3X7P3tjt4XY95JhmaUwe/OfWaXwXf4mH7mgV+gz+xe2adqy+D3uGK0
H3rnKiZHCi0gg++Qjl7L4Ofj/Z5Xj+Nm0a599Gkd2fns2R3df8XkSKETy+C7
r5IcanJd9Fzo5HCDeoaeK50cbnBt9Hzo7ITuumJ2Qfc8Q/rH7c6H7rpScqzK
y9F9zd7f7uh9MeZVevh5MrsMfo/uswK6w2fJMw/8IE94/lnOfpYMvsfV7qlY
GfweV4z2Q+9cxeRIoQVk8B3S0WsZ/Hy833PrMT6HdvVDT6wFf2+qZHd0/9XS
x+qcHt1/leRgj6ui50InhxvUM/Rc6eRwg2uj50NnJ3TX1dKG2pxLBt939bQP
u51RBt93leRQk9ej+5q9v93R+2LMYzL2+vN3ZRn8Pt1nBRl8j2S39DndKTtV
fRn8HleM9kPvXMXkSKEFZPAd0tFrGfx8vN/z6/H5DNr1jzs9+t5Uye7o/qul
DbU5vx78DKpEf0fPhE4ON6hn6LnSyeEG10bPh85O6K4rpQ92OSO688pxH/bO
TOiuHpOnnlZHo/fFmFsy/HvBFWXwu3WfVfTgu3x2h8+WwLnoM18hg+9yxXsq
Tga/xxWj/dA7VzE5UmgBGXyHdPRaBj8f7/caMn7efwOecwUZ/N2pkByrcXp0
/5WSY1UuIYOfQ5Xo7+iZ0MnhBvUMPVc6Odzg2uj50NkJ3XWltLEqp9SD771q
2ue1Tst9+J2Z0F09Jk89rY5G74vZMxl+Vuwgg9+1+6yiBd8l0S99vvv0k896
pQy+zxXvqTgZ/B5XjPZD71zF5EihBWTwHdLRaxn8fLzf62hh91dowd+dCsmx
GqdH918p+gs9hyrR39EzoZPDDeoZeq50crjBtdHzobMTuusq6aNFTiqD775i
3AczE7qrx+Spp9XR6H0x+0T7yeD3btUd7MH3+Zjc6LztxLNeLYPvc9V7KkYG
v8cVo/3QO1cxOVJoARl8h3T0WgY/H+/3Wlr8ufdOPdxC6LtTITla4uTo/qsk
B3tcSQ9+HhWiv6NnQieHG9Qz9Fzp5HCDa6PnQ2cndNdV0gZ7nBndfcW0kUIn
R3dfJTOhu3pMnnpaHY3eF7NPtJ8Mfu9W3cEWfJ9XdVztrP2kc1Iy+E5Xvadi
ZPB7XDHaD71zFZMjhRaQwXdIR69l8PPxfq+nxevOO/dYS8ng7w+dHOxwdnT/
VdIGe1xJBj+PCtHf0TOhk8MN6hl6rnRyuMG10fOhsxO66yrZWQ++/2rZmfsw
3w7QXT0mTz2tjkbvi9kn+RCtL4Pfu/uspgff6bN7vvo52wlnJGXwna58T3W9
DH6PK0b7oXeuYnKk0AIy+A7p6LUMfj7e7zW1eP6drHGPtJQM/v7QycEOZ0f3
XyF9uMW1tOBnUiE5VuOS6JnQyeEG9Qw9Vzo53ODa6PnQ2QnddYXkaImTy+Bn
UCk5UuYCMvgZVEiO1XgpuquZuxO/L8bckv+aFlpJBr9b91kR3emztAPP1wqc
5z79wLNVkcH3uvo91bUy+D2uGO2H3rmKyZFCC8jgO6Sj1zL4+Xi/19bjd9+N
fZSltODvD50c7HB2dP8VkqMlLoieSYXkaIkLomdCJ4cb1DP0XOnkcINro+dD
Zyd01xXSRkucXAt+BpXSRspcQAt+BhWSYzVeiu5q5u7E74sxz5LhZ8kKMvhd
us+KMvheH9MPPF8vcB53yI41lwx+jytG+6F3rmJypNACMvgO6ei1DH4+3u/1
9Vjzn6Wj0feHTg43ODe6/wppoyUuqAc/Fzo5WuKC6JnQyeEG9Qw9Vzo53ODa
6PnQ2QnddYWIn0GliJ9BheRoiReiu5q5O/H7Ysyf0sPPlVll8Ptzn1XRvT5L
O+BcrcA57pMHnKmiDL7bHe6prpPB73HFaD/0zlVMjhRaQAbfIR29lsHPx/st
fYa+PxWyM7r7CtHfZfBzoZODHa6IngmdHG5Qz9BzpZPDDa6Nng+dndBd0+nj
FS7h1gM9iwpxH/7iPsz1nkB3NXN34vfFmJ8kw38GfSYZ/M7cZ1UZfLeP6Qec
qxc4h/tjz5pPBr/HFaP90DtXMTlSaAEZfId09FoGPx/vt/SZDP4O0dkZ3T2d
Pl7hkjL42dDJwQ5XRM+ETg43qGfoudLJ4QbXRs+Hzk7orunkcINryOBnUSE5
VuMyMvhZ0MnBDq9EdzVzd+L3xZhP0sPfH51BBr8r91kZ3e2ztIHztALPf58c
OEt1GXy/u9xTXaMHv8cVo/3QO1cxOVJoARl8h3T0WgY/H++39JkM/g7R2Rnd
PZ0cbnBNLfjZ0MnBDldEz4RODjeoZ+i50snhBtdGz4fOTuiu6eRwg2vI4GdR
ITlW4zIy+FnQycEOr0R3NXN34vfFmNFkqKoMfj/us7IWfL+P6QPnoZ99p93J
4PvdpWtdg97hqtF+6J2rmBwptIAMvkM6ei2Dn4/3W/pMBn+H6OyM7p5ODje4
Lno2dHK4wfXQM6GTww3qGXqudHK4wbXR86GzE7prOm24wTW04GdRIfpLC34W
dHKwwyvRXc3cnfh9MeaotFA1Gfxe3Gd1PfiOj7iXWeC5d/psyeA73ume6nz0
DleN9kPvXMXkSKEFZPAd0tFrGfx8vN/SZzL4O0RnZ3T3dNpwg+uiZ0Mnhxtc
Dz0TOjncoJ6h50onhxtcGz0fOjuhu6aj3+hZVIh+o2dBJ4cbvA7d1czdid8X
Y45MD/++sZIMfifus7oWfMfP7uRP0c88+vyzyeB73ume6nz0DleN9kPvXMXk
SKEFZPAd0tFrGfx8vN/SZzL4O0RnZ3T3dPQaPZsK0Vf0POjkcIN6hp4rnRxu
cG30fOjshO6ajn6jZ1Eh+o2eRYXMgu7pMXnqaXU0el+MOSM9VEEGvwv32cFt
9+meH9N+8PxZ4Hk/ffZZZfA973ZPda4Mfo8rRvuhd65icqTQAjL4DunotQx+
Pt5v6TMZ/B2iszO6ezp6rQc/Hzr6ip4HnRxuUM/Qc6WTww2ujZ4PnZ3QXdPR
b/QsKkS/0bOokFnQPT0mTz2tjkbvizFnpoVIGfwO3GcHLfieR7qnn/M+/QfP
PbMMvuvd7qnOlcHvccVoP/TOVUyOFFpABt8hHb2Wwc/H+y19pgV/h+jsjO6e
jl7L4OdDR1/R86CTww3qGXqudHK4wbXR86GzE7prOvotg58HHf2Wwc+Dzizo
nh6Tp55WR6P3xZiz00OUDH7+99nFbefprh+Tbzx3FnjO+7Q3nnkFGXzXO95T
nSeD3+OK0X7onauYHCm0gAy+Qzp6LYOfj/db+hx9h+jsjO6ejl7L4OdDR1/R
86CTww3qGXqudHK4wbXR86GzE7prOvotg58HHf2Wwc+Dzizonh6Tp55WR6P3
xZir0kJXy+Dnfp+d0F3/tP9W4Pnu0//wvCvJ4Pve9Z7qHBn8HleM9kPvXMXk
SKEFZPAd0tFrGfx8vN/S5+g7RGdndPd09FoGPx86+oqeB50cblDP0HOlk8MN
ro2eD52d0F3T0W8Z/Dzo6LcMfh50ZkH39Jg89bQ6Gr0vxlyZDF0pg5/5fXaS
wff9k/vXCzyfu1Ij0qgMfo8rRvuhd65icqTQAjL4DunotQx+Pt5v6XP0HaKz
M7p7Onotg58PHX1Fz4NODjeoZ+i50snhBtdGz4fOTuiu6ei3DH4edPRbBj8P
OrOge3pMnnpaHY3eF2OuTg9dJYOf9312Q/f97gxagee6T77R7Uoy+M53vqc6
Xga/xxWj/dA7VzE5UmgBGXyHdPRaBj8f77f0OfoO0dkZ3T0dvZbBz4eOvqLn
QSeHG9Qz9Fzp5HCDa6PnQ2cndNd09FsGPw86+i2DnwedWdA9PSZPPa2ORu+L
MUR6+N9bf4UMftb32U0G3/lj8slz9gLP5Z7UiTQqg9/jitF+6J2rmBwptIAM
vkM6ei2Dn4/3W/ocfYfo7Izuno5ey+DnQ0df0fOgk8MN6hl6rnRyuMG10fOh
sxO6azr6LYOfBx39lsHPg84s6J4ek6eeVkej98UYMi10pgx+xvfZUQ++9+/m
0Ao8z33yB92uIoPvffd7qmNl8HtcMdoPvXMVkyOFFpDBd0hHr2Xw8/F+S5+j
7xCdndHd09FrGfx86Ogreh50crhBPUPPlU4ON7g2ej50dkJ3TUe/teDnQUe/
ZfDzoDMLuqfH5Kmn1dHofTGGTgudJYOf73121ILv/TH97vl6ged59lw7yeC7
3/2e6lgZ/B5XjPZD71zF5EihBWTwHdLRaxn8fLzf0ufoO0RnZ3T3dPRaBj8f
OvqKngedHG5Qz9BzpZPDDa6Nng+dndBd09FX9Dzo6LcMfh50ZkH39Jg89bQ6
Gr0v7k8dLf7q/z70PlyVNtScXsngZ3ufXfXgu39MRr39aB+1O78MvnvvqY6U
we9xxWg/9M5VTI4UWkAG3yEdvZbBz8f7LX2OvkN0dkZ3T0ffo+dDR1/R86CT
ww3qGXqudHK4wbXR86GzE7prOvqKngcd/daCnwedWdA9PSZPPa2ORu+L+zOP
jLV/FtUO6km/ZfBzvc+uWvDdV0//tNwFZPD9e091pAx+jytG+6F3rmJypNAC
MvgO6ei1DH4+3m/pc/QdorMzuns6+h49Hzr6ip4HnRxuUM/Qc6WTww2ujZ4P
nZ3QXdPRV/Q86Ogreh50ZkH39Jg89bQ6Gr0v7s+8Mtb72VQ7rh5Fvf3YWQ++
/8ppHzc7vwy+f++pjpTB73HFaD/0zlVMjhRaQAbfIR29lsHPx/stfY6+Q3R2
RndPR9+j50NHX9HzoJPDDeoZeq50crjBtdHzobMTums6+oqeBx19Rc+Dzizo
nh6Tp55WR6P3xf1ZQ4t1fk7Vjixmcxn8PO+zsxZ8/1XTP691CRn8DLynOlIG
v8cVo/3QO1cxOVJoARl8h3T0WgY/H++39Dn6DtHZGd09HX2Png8dfUXPg04O
N6hn6LnSyeEG10bPh85O6K7p6Ct6HnT0FT0POrOge3pMnnpaHY3eF/dnPRnz
/7sNdYwMfpbO9bcMfgYV0z6vdAkZ/Ay8pzpSBr/HFaP90DtXMbPL4Duko9cy
+PmQydECJRh9h+jsjO6ejr5Hz4eOvqLnQSeHG9Qz9Fzp5HCDa6PnQ2cndNd0
9BU9Dzr6ip4HnVnQPT0mTz2tjkbvi/uzrhbz/v5oP76OLWXws7yP+BlUSw61
uYYMfg7eUx0pg9/jitF+6J2rmNll8B3S0WsZ/HzI5GiBEoy+Q3R2RndPR9+j
50NHX9HzoJPDDeoZeq50crjBtdHzobMTums6+oqeBx19Rc+Dzizonh6Tp55W
R6P3xf1ZX4s5f3+0n9DFbjL4Od5H9WZCR/V2QjoCvccVo/3QO1cxs8vgO6Sj
1zL4+ZDJ0QIlGH2H6OyM7p6OvkfPh46+oudBJ4cb1DP0XOnkcINro+dDZyd0
13T0FT0POvqKngedWdA9PSZPPa2ORu+L+7OPDH6/fpp2Qg87yeBneB/9hZ5D
leRgj6vI4GfhPdXR6D2uGO2H3rmKmV0G3yEdvZbBz4dMjhaoZeUkoe8QnZ3R
3dPR9+j50NFX9Dzo5HCDeoaeK50cbnBt9Hzo7ITumo6+oudBR1/R86AzC7qn
x+Spp9XR6H1xf/bSYr5/92g7oYddZPDzu4/+0oKfRYXoLxn8LJyLjkbvccVo
P/TOVczsMvgO6ei1DH4+ZHK0QJXVwt+z3CE7o7uno+/R86Gjr+h50MnhBvUM
PVc6Odzg2uj50NkJ3TUdfUXPg46+oudBZxZ0T4/JU0+ro9H74v7sKYPftXfT
z6lgCxn8/O6j3257Tc+DTBtucB0Z/Dy8pzoavccVo/3QO1cxs8vgO6Sj1zL4
+ZDJ0QKFyrv04PfJXJ+d0d3T0ffo+dDRV/Q86ORwg3qGniudHG5wbfR86OyE
7pqOvqLnQUdf0fOgMwu6p8fkqafV0eh9cX/21YLfN/fyXBn87O6j31rw86DS
x+tbSgY/E++pjkbvccVoP/TOVczsMvgO6ei1DH4+ZHK0QF2ihf++UPM8O6O7
p6Pv0fOho6/oedDJ4Qb1DD1XOjnc4Nro+dDZCd01HX1Fz4OOvqLnQWcWdE+P
yVNPq6PR++L+7K0Fv3Pvpp3SwNoy+LndR1/14GfiXeZl8DPxnupo9B5XjPZD
71y19LE6S8jge6Sj1zL4+ZDJ0QJ1uBb+jqh5Pzuju6ej79HzoaOv6HnQyeEG
9Qw9Vzo53ODa6PnQ2QndNR19Rc+Djr6i50FnFnRPj8lTT6uj0fvi/uimB797
f0o/7fTryuDndh991YKfifeYl8HPxXuqo9F7XDHaD71z1ZJDbdaQwfdIR69l
8PPxjitjjr/fMfWyM7p7OvoePR86+oqeB50cblDP0HOlk8MNro2eD52d0F3T
0Vf0POjoK3oedGZB9/SYPPW0Ohq9L+6PfunB79+f0s46/KIy+JndR383w73z
Dp8rg5+L91RHy+B3uVq0H3rnqiWH2qwhg++Rjl7L4OfjHd9PC3fPHJOd0d3T
0ffo+dDRV/Q86ORwg3qGniudHG5wbfR86OyE7pqOvqLnQUdf0fOgMwu6p8fk
qafV0eh9cX90j96/lf5sqCCDn5ez+zN6LlelH1XYYjL42XhPdbQMfperRfuh
d65acqjNGjL4HunotQx+Pt7xPWTs988fmvOzM7p7OvoePR86+oqeB50cblDP
0HOlk8MNro2eD52d0F3T0Vf0POjoK3oedGZB9/SYPPW0Ohq9L+6P7rXgd9Ad
PU4GP6/76LkMfjbOn5PBz8Y56WgZ/C5Xi/ZD71y15FCbNWTwPdLRaxn8fLzj
62rh74qac7Mzuns6+h49Hzr6ip4HnRxuUM/Qc6WTww2ujZ4PnZ3QXdPRV/Q8
6Ogreh50ZkH39Jg89bQ6Gr0v7o8eteD3cJU/H2gZ/Kyc23vo2ZydPKyp9WTw
8/Ge6mgZ/C5Xi/ZD71y15FCbNWTwPdLRaxn8fLzj68ngZ2v2yM7o7unoe/R8
6Ogreh50crhBPUPPlU4ON7g2ej50dkJ3TUdf0fOgo6/oedCZBd3TY/LU0+po
9L64P3omg99F93RcBj+r++i1DH4+zp6Rwc/HWeloGfwuV4v2Q+9ctawgg++R
jl7L4OdDJkcL1L9p4b9b1FyfndHd09H36PnQ0Vf0POjkcIN6hp4rnRxucG30
fOjshO6ajr6i50FHX9HzoDMLuqfH5Kmn1dHofXF/9EoPfh9X+DOClMHPyZm9
r/qd+zR5YEcryuBn5D3VGehdrhbtpQW/c9Wyggy+Rzp6LYOfD5kcLVD/pcMe
/CzNntkZ3T0dfY+eDx19Rc+DTg43qGfoudLJ4QbXRs+Hzk7orunoK3oedPQV
PQ86s6B7ekyeelodjd4X90evtOD30V0dk8HP6T76Xgt+RkenH1nQojL4OXlP
dQZ6l6tFe8ngd65aVpDB90hHr2Xw8yGTowVuLIOfnzE7o7uno+/R86Gjr+h5
0MnhBvUMPVc6Odzg2uj50NkJ3TUdfUXPg46+oudBZxZ0T4/JU0+ro9H74v7o
Oxn8Tq7w5wQlg5+R8/qZHvycjkw7tJ01ZfBz8p7qDPQuV0sbalOzyeB3rlpW
kMH3SEevZfDzIZOjBW6oBT83Y35lZ3T3dPQ9ej509BU9Dzo53KCeoedKJ4cb
XBs9Hzo7obumo6/oedDRV/Q86MyC7ukxeeppdTR6X9wf/Qm9k9+lnXfsJWTw
M7qP/qwFP6ej0o+tZlkZ/Ky8pzoDvcvVkkNtajYZ/M5VSh9qs44Mvks6ei2D
nw+ZHC1wIy3W++cFzfzZGd09HX2Png8dfUXPg04ON6hn6LnSyeEG10bPh85O
6K7p6Ct6HnT0FT0POrOge3pMnnpaHY3eF/dHf5LB7+Wr9POOvYQMfkb30Xtu
e03P6oi0g3tZVQY/K++pzpDB73Ol5EiZmk4Gv3OVkiNlFpLBd0lHr2Xw8/Ge
19eDn5Uxz7Izuns6+h49Hzr6ip4HnRxuUM/Qc6WTww2ujZ4PnZ3QXdPRV/Q8
6Ogreh50ZkH39Jg89bQ6Gr0v7o/eQe/lCn9W/P/t3FuW6zaTKOEcGoaWM+PU
zlG73RZ0YUkCwQCI+NaKx26LmUCpvDd/EzL4/bir75Xgd9XadvRQLiyD35f3
VD1k8Od5pLJlmJpOBn/mRipbhjmQDH6WdHovg9+P93xcGfyOzPZaGT17Ou2j
90OnGr0PumyeoF6h90qXzRO8Nno/dCuhZ02nGr0POtXofdDNgp7TY9n1aXU0
+rx4fvSJDP5sema/l8Hv5z59LoPfV0vl6IFcWAa/L++pesjgz/NIZcswNZ0t
+DM3Utk0zXFk8LOk03sZ/H685+Mp4XeCzdHK6NnTaR+9HzrV6H3QZfME9Qq9
V7psnuC10fuhWwk9azrV6H3QqUbvg24W9Jwey65Pq6PR58Xzo0/RZ/NdW8+H
nlwGv5/79B16X36PnCOD35n3VD1k8Od5pLJlmJoOfd5G6yoy+FnS6b0Mfj9k
2TrACyrB78Xs01ZGz55O++j90KlG74MumyeoV+i90mXzBK+N3g/dSuhZ06lG
74NONXofdLOg5/RYdn1aHY0+L54ffWoL/nzO/n1xtgx+N+7pdxn8ztxzfxn8
ztyfeqHP82hpHfRZG62ryOBnSaf3Mvj9kGXrAC9mC34nZt+0Mnr2dNpH74dO
NXofdNk8Qb1C75Uumyd4bfR+6FZCz5pONXofdKrR+6CbBT2nx7Lr0+po9Hnx
/OhTJfjz6bn9Tga/m/v0PXpn3sX+Mvi9eU/VC32eR0vroM/aaF1FBj9LOr2X
we+HLFsHeBElfGfU5mxl9OzptI/eD51q9D7osnmCeoXeK102T/Da6P3QrYSe
NZ1q9D7oVKP3QTcLek6PZden1dHo8+L50Tfo8/muredDTyyD3819+l4Gvzd3
3FcGvzd3qF7o8zxaWkMJ/qyN1NY0zbFk8POk03sZ/H7IsnWAF1CC34PZr62M
nj2d9tH7oVON3gddNk9Qr9B7pcvmCV4bvR+6ldCzplON3gedavQ+6GZBz+mx
7Pq0Ohp9Xjw/+kYGf0Zn/844Uwa/F3fUbgt+d35/9JPB7857ql4y+DM9UqVl
mJpGBn/WRipbhjmYDH6edHovg9+Pd51Tgt+BWUsro2dPp330fuhUo/dBl80T
1Cv0XumyeYLXRu+HbiX0rOlUo/dBpxq9D7pZ0HN6LLs+rY5GnxfPj75Rgj+j
nt3PZfB7uU+/KcHv7q+2Xg+/gAx+f95T9ZLBn+mRypZhahoZ/FkbqWwZ5mAy
+HnS6b0Mfj/edUYGP3+z1lZGz55O++j90KlG74MumyeoV+i90mXzBK+N3g/d
SuhZ06lG74NONXofdLOg5/RYdn1aHY0+L54ffYs+o57dz2Xwe7lPv9uC399e
pduTX18Gvz/vqXrJ4M/0SGXLMDWNDP6sjVRpGeZgMvh50um9DH4/ZNk6wElt
wc/e7IhWRs+eTvvo/dCpRu+DLpsnqFfovdJl8wSvjd4P3UroWdOpRu+DTjV6
H3SzoOf0WHZ9Wh2NPi+eH31rC/6czv69cZYMfifu5xgl+P29a+v32EvI4Hfo
PVVP9JkeKX9eroE+Z6N1JRn8POn0Xga/H7JsHeCEtuDnbnZUK6NnT6d99H7o
VKP3QZfNE9Qr9F7psnmC10bvh24l9KzpVKP3QacavQ+6WdBzeiy7Pq2ORp8X
z4++lcGf09m/N86Swe/E/RxnC36Hryodn3kFGfwOvafqiT7To6Xro8/YaF1J
Bj9POr2Xwe+HLFsHOJkMfuZmR7YyevZ02kfvh041eh902TxBvULvlS6bJ3ht
9H7oVkLPmk41eh90qtH7oJsFPafHsuvT6mj0efH86FsZ/Dl9V+n21HPK4Hdy
n9rRO3xs6/u4S8jg9+g9VU/0mR4tXVsJ/oyN1NY0zfFk8DOl03sZ/H7IsnWA
EynBz9vs6FZGz55O++j90KlG74MumyeoV+i90mXzBK+N3g/dSuhZ06lG74NO
NXofdLOg5/RYdn1aHY0+L54f/YI+p57fz2TwO7lP7TL4PbrTY2Xwe3Sn6imD
P9cjlS3D1PAy+DM2UtkyzAFl8DOl03sZ/H687/2V4Gdt1qOV0bOn0z56P3Sq
0fugy+YJ6hV6r3TZPMFro/dDtxJ61nSq0fugU43eB90s6Dk9ll2fVkejz4vn
R7+gz6nn9zMZ/E7u0zHoPXrfjpXB79J7qp4y+HM9UtkyTA0vgz9jI5UtwxxQ
Bj9TOr2Xwe/H+95XCX7OZr1aGT17Ou2j90OnGr0PumyeoF6h90qXzRO8Nno/
dCuhZ02nGr0POtXofdDNgp7TY9n1aXU0+rx4fvQL+pxe4bvjDBn8PtzN8TL4
XbrP42Twu3Sv6qkEf65HamuapkZHn6/RupoMfqZ0ei+D3w9Ztg5wAlvwczbr
1cro2dNpH70fOtXofdBl8wT1Cr1Xumye4LXR+6FbCT1rOtXofdCpRu+Dbhb0
nB7Lrk+ro9HnxfOjX2TwZ3X2744zZPD7cDd90LvM7k+4jgx+n95T9Uaf69HS
ddFna7SuJoOfKZ3ey+D3Q5atAxzcFvyMzXq2Mnr2dNpH74dONXofdNk8Qb1C
75Uumyd4bfR+6FZCz5pONXofdKrR+6CbBT2nx7Lr0+po9Hnx/OgXGfxZnf27
4wwZ/D7cTR8l3OVVZPB3092qN/pcj1ZpmqZGlcGfrZHamqY5pgx+rnR6L4Pf
D1m2DnBgJfj5mvVuZfTs6bSP3g+davQ+6LJ5gnqF3itdNk/w2uj90K2EnjWd
avQ+6FSj90E3C3pOj2XXp9XR6PPi+dEvMviz+q7S7annk8Hv4z4dawvv2BVk
8HfTe6reMvizPVLZMkwNK4M/WyOVLcMcVAY/Vzq9l8Hvxzt/vBL8bM3OaGX0
7Om0j94PnWr0PuiyeYJ6hd4rXTZP8Nro/dCthJ41nWr0PuhUo/dBNwt6To9l
16fV0ejz4vnRLzL4s+oZ/lsGv4/7dKwS5+9wO+PBFpPB303vqXrL4M/2aOl6
6DM1WqVpmmPK4OdKp/cy+P2QZesAB7UFP1uzM1oZPXs67aP3Q6cavQ+6bJ6g
XqH3SpfNE7w2ej90K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9IsM/qx6
hv+Wwe/jPh1vi3N3WE55qrVk8HfTe6oz0Gd7tHQtJfgzNVpXlMHPlU7vZfD7
IcvWAQ6oBD9Xs7NaGT17Ou2j90OnGr0PumyeoF6h90qXzRO8Nno/dCuhZ02n
Gr0POtXofdDNgp7TY9n1aXU0+rx4fvSLDP6seob/lsHv4z4dr8R5+9vOeaTl
ZPB303uqM9Bne7SyaZoaTQZ/pkbrijL4udLpvQx+P2TZOsAB0TM1O7OV0bOn
0z56P3Sq0fugy+YJ6hV6r3TZPMFro/dDtxJ61nSq0fugU43eB90s6Dk9ll2f
Vkejz4vnR78owZ9Vz/DfMvh93Kc+Ms7ZXznncZaTwd9N76nOkMGf75Hamqap
0dDnabSyaZrjyuBnS6f3Mvj9eO+Pk8HP9Grl4NHzoVsZPXs67aP3Q6cavQ+6
bJ6gXqH3SpfNE7w2ej90K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9Cv6
rL5r6/nQk8ng93Gf+vG7YV4Z/N30nuoMGfz5Hi1dQwn+LI1WNsxzZBn8bOn0
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
Q6dnW/B7ocr28ekPGfyeZ2r7acr9ZPAzuVoroWdNpxq9DzrV6H3QzYKe02PZ
9Wl1NPq8eH70yhb8WbzKdwQpg9+TO5P2ZfB303uqmZTg74nZVSuhb2zB72y2
bjPLH2Z9hBLj/d51pfLDPYyEntlIbY2znMHtGek5j1x2aBb07Om0j94PnZ5l
8Huh2qLP98WRlZhbCX7PM5bB7f72z97efC5rbyX0rOlUo/dBpxq9D7pZ0HN6
LLs+rY5GnxfPjx6V4M/hX229Hv5iMvhd3SfpWQZ/N72nmk0Gf1fMrlaGvpXB
723mbvMr3438ayXc05n7nA09s9EqTdMc2xb8fFdsFvSc6LSP3g+dnmXwe7H3
5bvFTYSe4cxtcc4ZyPD3y7NaCT1rOtXofdCpRu+Dbhb0nB7Lrk+ro9HnxfOj
eyX4M/hJpc/jX04Gv6v7JD3L4O+m91Qz2oK/L2ZXSt8rwe/tKm3R/h5pif/+
O0P086xY7q9nSBn83EarNMxzRCX8nZFsFvSc6LSP3g+dnpXg92Lvy3eLm8gW
/ByvUkb7mfj3/4d7YVoJPWs61eh90KlG74NuFvScHsuuT6uj0efF86N/leDP
3ydtnZ7/ijL4fd0n6VkGfze9p5pRCf6+mF2lEvoVvbsVyhdtA3wue97TbDL4
uY1Y+X2kQynBz3L1ZkHPiU776P3Q6TV6L/a+fL+2aWTwc7x6W7z+90z6c9lz
K6FnTacavQ861eh90M2CntNj2fVpdTT6vHh+9K8t+PPnGT1WBr+v+yQ9y+Dv
pvdUs8rg74zZ7G2hFrf50Ts0G6GM+WTwcxu18vNUx7AFP0ObBz0nOu2j90On
1+i92Pvy/dqmUYKfo9korYSeNZ1q9D7oVKP3QTcLek6PZden1dHo8+L5UYm5
/kxdn8vg9+XupH0Z/N30nmpmM/0OYzZaW6hVBr9HsxHKmBM9t5HbGuZKyeDn
Zv81C3pOdNpH74dOr2Xwu7HX5dutzYWeo9korYSeNZ1q9D7oVKP3QTcLek6P
Zden1dHo8+L5WVsJ/sx5PvvJ4Hd2n6RnGfzd9J5qZiX4e2M2ayV0BHqPZiOU
MSd6bjNUfh3uiTL4Odlzs6DnRKd99H7o9FoGvxt7Xb7d2lwy+FmajdBK6FnT
qUbvg041eh90s6Dn9Fh2fVodjT4vnp91leDP21W/F0aRwe/M/Un7Mvi76T3V
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
8R792ehWQs+aTjV6H3Sq0fsw61mGbug9mJFtoZ4y+B3fJ+lZBn83vadaWQn+
3pn9WgmNLoM/J3ZcGe/lAJ9v1NnMqAQ/Uzuvb2wDfN5ZmgU9Jzrto/dDp9/Q
e1u5/Hs9l0DP2Y5tD/3Z6FZCz5pONXofdKrR+zDrWYZu6D2YUW2h3jL4Pd8n
6VkGfze9p1pdCf7umX1bCc2CPit2XHtygM9Hln/MZ0Zb8HO18c5uDvCZZ2kW
9JzotI/eD51+U4Lf3arln9u5hgx+1nbOmaU/H91K6FnTqUbvg041eh9mPcvQ
Db0HM6ItdIYMftf3SXqWwd9N76n0z9/r3H4/oe+g2SeV0ExK8GfG+t+7HOAz
kuUf85kVPVfr3y/ozzxLs6DnRKd99H7o9Lst+P2tWH6wm6vwjM3f9rTVZ/Rn
pFsJPWs61eh90KlG78OsZxm6ofdgdnZb6CwZ/L7vk/Qsg7+b3lPpP7ffU+h7
aPauLTSr2+7o82N9714O8DnJ8oMZzSiDn631q8RvcoDPPkOzoOdEp330fujU
ht7fiuUni7mIEvy8ra0Sf6M/I91K6FnTqUbvg041eh9mPcvQDb0HszPbQmfK
4Hd+n6RnGfzd9J5KtdvvK/RdNHtsC82OPkP2e+V5nU9ygM9Jlh/MaFZb8PO1
49uijefi72ZBz4lO++j90KlNCX6Hq5Uf7OVKMviZW9+zSn9OupXQs6ZTjd4H
nWr0Psx6lqEbeg9mZ7WFzpbB7/0+Sc8y+LvpPZWeleDvo9m/ZegKSvBnyb6v
PK/ypRzgs5Llh3OaUQl+vnZ8rcoAzzB6s6DnRKd99H7o1K4Ev8eVyk+WcjFb
8HO379pebvI1+rPSrYSeNZ1q9D7oVKP3YdazDN3QezA7oy1EyOB3f5+kZxn8
3fSeSq+V4O+kWQldyRb8mbLP216v8aUc4POS5RezmlEJfsZ2XCWOsQ3wLCM3
C3pOdNpH74dOx9iC3+Uq5WcruZQS/Nztu8qLPb5Df1a6ldCzplON3gedavQ+
zHqWoRt6D2a920KUDH7/90l6lsHfTe+ptO/2uwx9N229ttBV3XZLny/7rG/k
AJ+XLL+c14y24Ods7W2Pi21QBniekZsFPSc67aP3Q6fjbMHvc4Xyw31cTQl+
9tbnjNKfl24l9KzpVKP3QacavQ+znmXoht6DWc+2ECmDPwP3SXqWwd9N76n0
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
5/A+Sc8y+LvpPZXGluGf25/dbeblz81IY8jg78wIZdsYm93++fQMVp7/rEr4
Hf+u21zy18FOrsQ1fv+bBT0nOu2j90Onayjx398T0Weqd3nAvOTvqP+2Bf9n
Q/QM6FZCz5pONXofdKrR+zDrWYZu6D3Y/G3x37/335L+lcGfz/skPcvg76b3
VJpHifF+blylDP7vA6QWGWv+3V62j+4QGfws3MPcMvg9jtAWfh8/KjHn+z6z
oOdEp330fuh0bfnQFvyZay2PGo7+R4n5fv84oi3G+X2UngXdSuhZ06lG74NO
NXofdGmXroRu0uyPSki/KcGf3/skPSvB3837JM2jxD/3dgv+391nbAt/7uma
Svxztuk71vv+lkOmdZwS/O9xZLfn1zFKXP8O+518vBL8z4HHZpGLp325eNIr
OXDlh+fRZzKu/+dPedCsjpSLt5JcPNVy8VTLxZMkSZIkSX8r8c+/R1/9z/Fb
/vw/w79H0loyrvMzYQv/rFDryf+Nvn/eaUmSJN2UuNbvpxn+OZEkSZIkSZIk
6VpKXPt9k2+SNOfPg38/s6Rr/O9DMrzTkiRJV1Fivt9Pt/BdUUmSJEmSJEnS
ejL4P6MnkvQsY7yfCf9+Jkl/KzHmPf63LbzTkiRJKykx3nuk//5OWjo9syRJ
kiRJkiRJM8jg/8yeSNJnMs55D+3+n1P6PpK0nLzrjL+zv//nlZ4PJkmSpOlk
nPO76Rb+TipJkiRJkiRJ0jsZ/DucRJKOUaL+e7+/Kqd9MknfKPHdXc7TPpkk
SZJWk18mSZIkSZIkSZK+k8G/w+l7o5IkSZIkSZIkSZIkSZIkSf1l8O9w+t6o
JEmSJEmSJEmSJEmSJElSfxn8O5y+NypJkiRJkiRJkiRJkiRJktRfBv8Op++N
SpIkSZIkSZIkSZIkSZIk9ZfBv8Ppe6OSJEmSJEmSJEmSJEmSJEn9ZfDvcPre
qCRJkiRJkiRJkiRJkiRJUn8Z/DucvjcqSZIkSZIkSZIkSZIkSZLUXwb/Dqfv
jUqSJEmSJEmSJEmSJEmSJPWXwb/D6XujkiRJkiRJkiRJkiRJkiRJ/WXw73D6
3qgkSZIkSZIkSZIkSZIkSVJ/Gfw7nL43KkmSJEmSJEmSJEmSJEmS1F8G/w6n
741KkiRJkiRJkiRJkiRJkiT1l8G/w+l7o5IkSZIkSZIkSZIkSZIkSf2V4N/h
9L1RSZIkSZIkSZIkSZIkSZKkc9DvcPreqCRJkiRJkiRJkiRJkiRJ0jnodzh9
b1SSJEmSJEmSJEmSJEmSJOkc9DucvjcqSZIkSZIkSZIkSZIkSZJ0DvodTt8b
lSRJkiRJkiRJkiRJkiRJOgf9DqfvjUqSJEmSJEmSJEmSJEmSJJ2DfoeTKCdN
kiRJkiRJkiRJkiRJkiSpBf0Op32eJEmSJEmSJEmSJEmSJElSiwz+fUjzvVFJ
kiRJkiRJkiRJkiRJktRfBv8+pPneqCRJkiRJkiRJkiRJkiRJ6i+Dfx/SfG9U
kiRJkiRJkiRJkiRJkiT1l8G/D2m+NypJkiRJkiRJkiRJkiRJks5Bvw9pvjcq
SZIkSZIkSZIkSZIkSZLOQb8Pab43KkmSJEmSJEmSJEmSJEmSzkG/D2m+NypJ
kiRJkiRJkiRJkiRJks6Rwb8Tab43KkmSJEmSJEmSJEmSJEmS+svg34k03xuV
JEmSJEmSJEmSJEmSJEn9leDfiTTfG5UkSZIkSZIkSZIkSZIkSeeg34k03xuV
JEmSJEmSJEmSJEmSJEnn2IJ/L9J8b1SSJEmSJEmSJEmSJEmSJPWXwb8Xab43
KkmSJEmSJEmSJEmSJEmS+ivBvxdpvjcqSZIkSZIkSZIkSZIkSZLOQb8Xab43
KkmSJEmSJEmSJEmSJEmSzpHBvxtpvjcqSZIkSZIkSZIkSZIkSZL6K8G/G2m+
NypJkiRJkiRJkiRJkiRJks5BvxtpvjcqSZIkSZIkSZIkSZIkSZLOkcG/H2m+
NypJkiRJkiRJkiRJkiRJkvorwb8fab43KkmSJEmSJEmSJEmSJEmSzrEF/46k
+d6oJEmSJEmSJEmSJEmSJEnqrwT/jqT53qgkSZIkSZIkSZIkSZIkSToH/Y6k
+d6oJEmSJEmSJEmSJEmSJEk6Rwb/nqT53qgkSZIkSZIkSZIkSZIkSTrHFvy7
kuZ7o5IkSZIkSZIkSZIkSZIkqb8S/LuS5nujkiRJkiRJkiRJkiRJkiTpHFvw
70ua741KkiRJkiRJkiRJkiRJkqT+SvDvS5rvjUqSJEmSJEmSJEmSJEmSpHNk
8O9MmiRJkiRJkiRJkiRJkiRJ0jm24N+bXD1JkiRJkiRJkiRJkiRJkqQzlODf
m1w9SZIkSZIkSZIkSZIkSZKks5Tg351cOUmSJEmSJEmSJEmSJEmSpDNtwb8/
uWqSJEmSJEmSJEmSJEmSJEln891R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuV
JEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmS
JEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmSJEmSJEmSJEnr8N1R3xuVJEmSJEmS
JEmSJEmSJEnryODfrbxykiRJkiRJkiRJkiRJkiRJIynBv1951SRJkiRJkiRJ
kiRJkiRJkka0Bf+e5dWSJEmSJEmSJEmSJEmSJEkaVQnfH/W9UUmSJEmSJEmS
JEmSJEmStJIM/p3LKyRJkiRJkiRJkiRJkiRJkjSLDP7dy5mTJEmSJEmSJEmS
JEmSJEmaTQb/DuaMSZIkSZIkSZIkSZIkSZIkzSr/f1vw72POkiRJkiRJkiRJ
kiRJkiRJ0uxK+N8g9b1RSZIkSZIkSZIkSZIkSZK0mhK+Q+p7o5IkSZIkSZIk
SZIkSZIkaUUZvkfqe6OSJEmSJEmSJEmSJEmSJGlF+b9twb/H6XujkiRJkiRJ
kiRJkiRJkiRJ58uH6Hc8fW9UkiRJkiRJkiTpAP8PV6WNNA==
               "], {{0, 384.}, {2702., 0}}, {0, 255}, ColorFunction -> 
               RGBColor], 
              BoxForm`ImageTag[
              "Byte", ColorSpace -> "RGB", Interleaving -> True, 
               MetaInformation -> <|
                "Comments" -> <|"Software" -> "Adobe ImageReady"|>|>], 
              Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
             ImageSizeRaw -> {2702., 384.}, 
             PlotRange -> {{0, 2702.}, {0, 384.}}], 
            GridBox[{{
               TagBox["\"IBMQ\"", "SummaryItem"]}, {
               TagBox[
                DynamicBox[
                 ToBoxes[
                  If[
                   TrueQ[
                    ServiceConnections`Private`authenticatedServiceQ[
                    "connection-1054d579374ff2760c8ff481812d2881"]], 
                   "Connected", "Not Connected"], StandardForm]], 
                "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ServiceObject["IBMQ", "ID" -> "connection-1054d579374ff2760c8ff481812d2881"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.887631005267066*^9, 3.887666968467245*^9, 3.887679056240953*^9, 
   3.887689591180635*^9, 3.887719887745265*^9, 3.887724118567926*^9, 
   3.887725371643454*^9, 3.8877255226780148`*^9, 3.887727004556841*^9, 
   3.887728171678425*^9, 3.887747017787836*^9, 3.887797946951107*^9, 
   3.8878726212065773`*^9, 3.887885703404005*^9, 3.889275134232771*^9, 
   3.889276091692775*^9, 3.889277667055111*^9, 3.889277796294051*^9, 
   3.8892781589503307`*^9, 3.8892782872341146`*^9, 3.889314202290514*^9, 
   3.889321370075267*^9, 3.8893235515732107`*^9, 3.8893333965645447`*^9, {
   3.889778638340425*^9, 3.889778657872498*^9}, 3.889943641538999*^9, 
   3.890958914772645*^9, 3.8909590021625566`*^9, 3.890959076404747*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"d9b43111-6602-4e81-8f92-02b2b2049931"]
}, Open  ]],

Cell["\<\
Extract \[OpenCurlyQuote]total qubits available\[CloseCurlyQuote], \
\[OpenCurlyQuote]quantum_volume\[CloseCurlyQuote] and \[OpenCurlyQuote]type \
of processor \[OpenCurlyQuote] information of ibmq_belem and ibm_nairobi QPUs.\
\>", "CodeText",
 CellChangeTimes->{{3.8897790682423153`*^9, 3.889779156512107*^9}, {
  3.889779220395851*^9, 3.889779223910791*^9}, {3.889779353023312*^9, 
  3.889779391604117*^9}},ExpressionUUID->"3d37205b-e741-4ffe-a53e-\
e49c613ce278"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"conf", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<Backend\>\"", ",", 
     RowBox[{"\"\<ID\>\"", "->", "\"\<ibmq_belem\>\""}], ",", 
     RowBox[{"\"\<Property\>\"", "->", "\"\<Configuration\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"conf", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<n_qubits\>\"", ",", "\"\<processor_type\>\"", ",", 
    "\"\<quantum_volume\>\""}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889778651960075*^9, 3.889778753498004*^9}, {
  3.8897788314403133`*^9, 3.889778882294084*^9}, {3.889778959159556*^9, 
  3.889778964095911*^9}, {3.889779015958044*^9, 3.889779048126107*^9}, {
  3.889779260183359*^9, 3.8897792844586143`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"cc0cecc3-66b0-481e-b39b-5b87aadf4927"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "n_qubits" -> 5, 
       "processor_type" -> <|
        "family" -> "Falcon", "revision" -> 4, "segment" -> "T"|>, 
       "quantum_volume" -> 16|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"n_qubits"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type", "family"} -> 
        TypeSystem`PackageScope`AtomShape[67.2], {
         "processor_type", "revision"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type", "segment"} -> 
        TypeSystem`PackageScope`AtomShape[33.6], {"quantum_volume"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 2], "InitialType" -> 
     TypeSystem`Struct[{"n_qubits", "processor_type", "quantum_volume"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Struct[{"family", "revision", "segment"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String]}], 
        TypeSystem`Atom[Integer]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"n_qubits"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type", "family"} -> 
        TypeSystem`PackageScope`AtomShape[67.2], {
         "processor_type", "revision"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type", "segment"} -> 
        TypeSystem`PackageScope`AtomShape[33.6], {"quantum_volume"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 2], "Type" -> 
     TypeSystem`Struct[{"n_qubits", "processor_type", "quantum_volume"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Struct[{"family", "revision", "segment"}, {
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String]}], 
        TypeSystem`Atom[Integer]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 3, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["n_qubits", 
                  Style[
                  "n_qubits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "n_qubits"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "n_qubits"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "n_qubits"}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["processor_type", 
                  Style[
                  "processor_type", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "processor_type", "family"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "family"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["family", 
                  Style[
                  "family", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "processor_type", "family"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "family"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Falcon", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "family"}, "Item", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["revision", 
                  Style[
                  "revision", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "processor_type", "revision"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "revision"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "revision"}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["segment", 
                  Style[
                  "segment", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "processor_type", "segment"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "segment"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["T", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "processor_type", "segment"}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["quantum_volume", 
                  Style[
                  "quantum_volume", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   "quantum_volume"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "quantum_volume"}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               RawBoxes["16"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                "quantum_volume"}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{235., {74.134033203125, 79.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{235., {74.134033203125, 79.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.889778693249625*^9, 3.8897786980120068`*^9}, {
   3.8897787428827963`*^9, 3.88977875598818*^9}, 3.889778855678294*^9, 
   3.889778886390883*^9, 3.889778967532956*^9, {3.889779045801333*^9, 
   3.889779049512518*^9}, {3.8897792686404037`*^9, 3.88977928750348*^9}, {
   3.890959031993821*^9, 3.8909590398455553`*^9}, 3.89095907920183*^9, 
   3.890997757525922*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"50e23d13-934c-4e21-900e-516dc981dee5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"conf2", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<Backend\>\"", ",", 
     RowBox[{"\"\<ID\>\"", "->", "\"\<ibm_nairobi\>\""}], ",", 
     RowBox[{"\"\<Property\>\"", "->", "\"\<Configuration\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"conf2", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<n_qubits\>\"", ",", "\"\<processor_type\>\"", ",", 
    "\"\<quantum_volume\>\""}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.889779177821623*^9, 3.889779189543589*^9}, {
  3.889779303291057*^9, 3.889779342381172*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"c7f0790f-7ec9-4e1a-a876-1f94000d2891"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "n_qubits" -> 7, 
       "processor_type" -> <|
        "family" -> "Falcon", "revision" -> "5.11", "segment" -> "H"|>, 
       "quantum_volume" -> 32|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"n_qubits"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"quantum_volume"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{"n_qubits", "processor_type", "quantum_volume"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Assoc[
         TypeSystem`Atom[
          TypeSystem`Enumeration["family", "revision", "segment"]], 
         TypeSystem`Atom[String], 3], 
        TypeSystem`Atom[Integer]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"n_qubits"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"processor_type"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"quantum_volume"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "Type" -> 
     TypeSystem`Struct[{"n_qubits", "processor_type", "quantum_volume"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Assoc[
         TypeSystem`Atom[
          TypeSystem`Enumeration["family", "revision", "segment"]], 
         TypeSystem`Atom[String], 3], 
        TypeSystem`Atom[Integer]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 3, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["n_qubits", 
                  Style[
                  "n_qubits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["n_qubits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["n_qubits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["n_qubits"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["processor_type", 
                  Style[
                  "processor_type", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["processor_type"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["processor_type"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"family" -> "Falcon", "revision" -> "5.11", 
                    "segment" -> "H"|>, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"family" -> "Falcon", "revision" -> "5.11", 
                    "segment" -> "H"|>, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["processor_type"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["processor_type"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["quantum_volume", 
                  Style[
                  "quantum_volume", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["quantum_volume"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["quantum_volume"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["quantum_volume"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{423., {47.134033203125, 52.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{423., {47.134033203125, 52.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8897792087435093`*^9, {3.889779315158639*^9, 3.889779344595992*^9}, 
   3.890997763114661*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"0c789448-a591-4b80-be66-a73159d951e8"]
}, Open  ]],

Cell["\<\
You can find more information about handling of IBM quantum processors on \
Wolfram Quantum Framework here: \
https://community.wolfram.com/groups/-/m/t/2846060\
\>", "Text",
 CellChangeTimes->{{3.889779398999967*^9, 3.889779455540915*^9}, {
  3.8897960669904346`*^9, 
  3.889796076053499*^9}},ExpressionUUID->"7936c76f-8589-4501-b29e-\
296b1c4490c7"],

Cell[CellGroupData[{

Cell["About", "Subsubsection",
 CellChangeTimes->{{3.889796083932845*^9, 
  3.889796085028022*^9}},ExpressionUUID->"b055450d-70a5-4892-93c7-\
abb89c134643"],

Cell["\<\
In this computational essay, we aim to explore examples of different number \
of qubits namely Right state, Bell state and GHZ state on wolfram quantum \
framework. These states are measured in different basis(Pauli-Z, Pauli-X and \
Pauli-Y) state and their probabilities are extracted. The results show the \
robustness of the framework. Further, the circuits in different basis are \
encoded in qiskit model and sent to a real IBM quantum processor units(QPU) \
through query which is a recently introduced feature \
(\[OpenCurlyQuote]ServiceConnect\[CloseCurlyQuote]) of the paclet. The result \
from the QPU is further analyzed and compared with the theoretical \
upper-bound. The result confirms the impact of noises as we scale the number \
of qubits in quantum circuit. \
\>", "Text",
 CellChangeTimes->{{3.889796087998659*^9, 3.889796101178439*^9}, {
  3.889796142552959*^9, 3.889796643339909*^9}, {3.889796681031004*^9, 
  3.88979673520715*^9}, {3.889796946383689*^9, 
  3.889796948427279*^9}},ExpressionUUID->"6154a2d3-c12b-4676-aadc-\
871da4d19291"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Right State", "Section",
 CellChangeTimes->{{3.886584543943859*^9, 
  3.886584554368469*^9}},ExpressionUUID->"d5bb8d8b-aa34-4385-9927-\
fe675c9bf921"],

Cell[TextData[{
 "A right state, also known as the ",
 Cell[BoxData[
  TemplateBox[{"+"},
   "Ket"]],ExpressionUUID->"ec942499-2a73-48b7-a2a8-db62fb929513"],
 " state, is a specific quantum state that is a balanced superposition of the \
basis states ",
 Cell[BoxData[
  TemplateBox[{"0"},
   "Ket"]],ExpressionUUID->"b880cf0c-f5e8-4b88-9499-b405935b8942"],
 " and ",
 Cell[BoxData[
  TemplateBox[{"1"},
   "Ket"]],ExpressionUUID->"e9106059-6f58-4673-9fc2-227e4cd55718"],
 ". Mathematically, the right state is represented as:\t",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     TemplateBox[{"0"},
      "Ket"], " ", "+", " ", 
     TemplateBox[{"1"},
      "Ket"]}], 
    SqrtBox["2"]], TraditionalForm]],ExpressionUUID->
  "cd9e68c8-7fd1-433e-bfd7-12d67f43073a"],
 "\nThe amplitudes of the basis states, ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SqrtBox["2"]], TraditionalForm]],ExpressionUUID->
  "b837f6ba-4dbe-4c46-83d2-cfd82aaad8fe"],
 " for both",
 Cell[BoxData[
  TemplateBox[{"0"},
   "Ket"]],ExpressionUUID->"b0e100a3-c287-4423-a36d-2f7e41fd82e1"],
 " and ",
 Cell[BoxData[
  TemplateBox[{"1"},
   "Ket"]],ExpressionUUID->"9ecd3fb2-e05c-4be1-8456-9e7876028e0e"],
 ", represent the probability amplitudes of finding the qubit in either the \
",
 Cell[BoxData[
  TemplateBox[{"0"},
   "Ket"]],ExpressionUUID->"bd29eeda-3420-4dd6-92f0-25b002a59323"],
 " or ",
 Cell[BoxData[
  TemplateBox[{"1"},
   "Ket"]],ExpressionUUID->"7c6cdda9-730e-4bc8-9914-0719aa5db63a"],
 " state upon measurement. "
}], "Text",
 CellChangeTimes->{{3.8897856907363157`*^9, 3.889785861547902*^9}, {
   3.8897859021496696`*^9, 3.8897859291631527`*^9}, {3.889785967810006*^9, 
   3.889786001234723*^9}, {3.889786073058483*^9, 3.889786086981098*^9}, 
   3.8897874488871202`*^9},ExpressionUUID->"c46c7e76-fb6a-4518-a9fa-\
fd6b6e77f1a4"],

Cell[CellGroupData[{

Cell["Define state", "Subsection",
 CellChangeTimes->{{3.886552717055009*^9, 
  3.8865527209438963`*^9}},ExpressionUUID->"027bb421-d9c4-4c6f-bfbc-\
0518bd84525e"],

Cell["Define the right state.", "CodeText",
 CellChangeTimes->{{3.8897799174669313`*^9, 
  3.889779937845792*^9}},ExpressionUUID->"f3e077fe-e588-4b38-b45f-\
d876f71b83da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Psi]1", "=", 
   RowBox[{"QuantumState", "[", "\"\<Right\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8865527093950644`*^9, 3.886552709398883*^9}, {
  3.886584516694098*^9, 3.886584517657381*^9}, {3.886755594049922*^9, 
  3.886755596940693*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"afd74368-260d-4fa1-b88d-9a2020d7eb7e"],

Cell["\<\
Build the quantum circuit from above state and measure in different basis \
namely: Pauli-Z(Computational), Pauli-Y and Pauli-X \
\>", "CodeText",
 CellChangeTimes->{{3.886552758172372*^9, 3.886552764537179*^9}, {
  3.889779858847822*^9, 3.889779871112637*^9}, {3.889779944164494*^9, 
  3.88978007891973*^9}},ExpressionUUID->"3dcfef4e-458e-47db-a39f-\
0594efa3aa40"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qcZ", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]1", "]"}], "/*", 
    RowBox[{"QuantumMeasurementOperator", "[", 
     RowBox[{"\"\<Computational\>\"", ",", 
      RowBox[{"{", "1", "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"qcX", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<H\>\"", "->", 
        RowBox[{"{", "1", "}"}]}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]1", "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qcY", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"QuantumOperator", "[", "\"\<S\>\"", "]"}], "[", 
         "\"\<Dagger\>\"", "]"}], "->", "1"}], ",", 
       RowBox[{"\"\<H\>\"", "->", "1"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]1", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.886552746992299*^9, 3.8865527776831923`*^9}, {
  3.886755600229405*^9, 3.886755611379642*^9}, {3.887724672766098*^9, 
  3.887724691658622*^9}, {3.887725104268632*^9, 3.8877251158121634`*^9}, {
  3.887728336508833*^9, 3.887728342484871*^9}, {3.8877284159657373`*^9, 
  3.887728416850507*^9}, {3.887728782534686*^9, 3.8877287876255627`*^9}, {
  3.887749652850443*^9, 3.887749663844298*^9}, {3.887750044346225*^9, 
  3.8877500517264853`*^9}, {3.887797938350762*^9, 3.887797940885194*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"989598de-dfee-43f3-a23a-3b9a64c2b771"],

Cell["\<\
Decompose the above quantum circuit and convert in Qiskit format.\
\>", "CodeText",
 CellChangeTimes->{{3.889780104666171*^9, 
  3.889780176705791*^9}},ExpressionUUID->"cf02547d-0033-4d54-9d51-\
2ef1c538f3fb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qiskitex1a", "=", 
   RowBox[{
    RowBox[{"qcZ", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex1b", "=", 
   RowBox[{
    RowBox[{"qcX", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex1c", "=", 
   RowBox[{
    RowBox[{"qcY", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.887631694696651*^9, 3.8876317013257236`*^9}, {
   3.8876321974927683`*^9, 3.887632222271023*^9}, {3.887632301006503*^9, 
   3.887632308366618*^9}, {3.887666388248209*^9, 3.887666390747714*^9}, {
   3.887668313328479*^9, 3.887668322332066*^9}, {3.887668627813238*^9, 
   3.887668630657523*^9}, {3.88766919593882*^9, 3.8876692006704493`*^9}, {
   3.8876700714422283`*^9, 3.8876700742564507`*^9}, {3.887675974233006*^9, 
   3.887675978649591*^9}, {3.887676461574398*^9, 3.88767646753831*^9}, {
   3.8876792440350122`*^9, 3.8876792848074093`*^9}, {3.887728239131995*^9, 
   3.887728256857421*^9}, 3.887728482585658*^9, 3.887728795583847*^9, 
   3.887728858292041*^9, {3.887760625466951*^9, 3.88776063209476*^9}, {
   3.887797966747827*^9, 3.887797984849815*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"1a87bad6-a3c5-48e6-9805-2b646ca18c05"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QPU ", "Subsection",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{
  3.483202458956718*^9, {3.514308604990972*^9, 3.514308608117634*^9}, {
   3.885374080523435*^9, 
   3.885374096259903*^9}},ExpressionUUID->"acac536d-6370-4303-9308-\
b1f6fa17c3e2"],

Cell["\<\
Encode the converted circuit.(in this case PauliZ basis circuit)\
\>", "CodeText",
 CellChangeTimes->{{3.889780198641026*^9, 3.889780235970044*^9}, {
  3.889780671000774*^9, 
  3.8897806778776913`*^9}},ExpressionUUID->"85229082-6b41-4427-94d5-\
c98ded1f243a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex1a", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex1a", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.887632422207745*^9, 3.887632424907255*^9}, {
   3.887666831663142*^9, 3.887666831963728*^9}, 3.887666995702601*^9, 
   3.887667822030875*^9, {3.887668359644808*^9, 3.887668364857914*^9}, {
   3.887668636730061*^9, 3.887668641904235*^9}, {3.88766921631632*^9, 
   3.887669221789707*^9}, {3.887670076670994*^9, 3.887670079841366*^9}, {
   3.887675990432712*^9, 3.887675998857706*^9}, {3.887676471231103*^9, 
   3.8876764774280767`*^9}, {3.8876793017940683`*^9, 3.887679363129356*^9}, {
   3.8877279672124033`*^9, 3.887727972169141*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"14d5ac3f-dbad-43af-a071-8fad63f7b764"],

Cell["Send the query on backend and get its information.", "CodeText",
 CellChangeTimes->{{3.88978024764272*^9, 3.8897802827790813`*^9}, {
  3.889780347443995*^9, 3.889780375996923*^9}, {3.889780626090789*^9, 
  3.889780660454475*^9}},ExpressionUUID->"2e0f97b1-6e64-48ca-bc5e-\
162866b3a226"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex1a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex1a"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.887667072681476*^9, 3.887667075376198*^9}, {
   3.8876680402116117`*^9, 3.887668042370393*^9}, {3.8876683698581667`*^9, 
   3.8876683726636763`*^9}, {3.887668646011137*^9, 3.887668654221838*^9}, {
   3.887669227849742*^9, 3.887669233238274*^9}, {3.887670083249711*^9, 
   3.887670086241091*^9}, {3.887676010770681*^9, 3.887676015478256*^9}, {
   3.8876764803899937`*^9, 3.887676483754882*^9}, {3.887679320077704*^9, 
   3.887679328041493*^9}, {3.887679369648963*^9, 3.887679392072727*^9}, {
   3.887798024092078*^9, 3.887798027050323*^9}, 3.887798104351062*^9},
 CellLabel->"In[65]:=",ExpressionUUID->"38c452a8-071a-49bf-8883-5802c0ccbca0"],

Cell["Check the job status. ", "CodeText",
 CellChangeTimes->{{3.889780382993585*^9, 
  3.889780438333764*^9}},ExpressionUUID->"76298719-df34-46b2-bad9-\
9fb60fc46c94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex1a", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887667170113241*^9, 3.887667170117807*^9}, {
  3.887667310897234*^9, 3.887667322674653*^9}, {3.8876680530699787`*^9, 
  3.887668059033929*^9}, {3.887668395117992*^9, 3.887668395370492*^9}, {
  3.8876686716390753`*^9, 3.887668673041271*^9}, {3.887669264206493*^9, 
  3.887669265345109*^9}, {3.8876700920215673`*^9, 3.887670092296917*^9}, {
  3.8876760264421663`*^9, 3.887676028520143*^9}, {3.88767648939774*^9, 
  3.887676489537549*^9}, {3.887679437421307*^9, 3.887679465080717*^9}, {
  3.887798047567432*^9, 3.8877980665116453`*^9}, {3.8877981003432817`*^9, 
  3.8877981365716543`*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"5838e4b1-2273-4fda-8fa0-6366781506d0"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgole1c42478c3i71rk0", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIGrjQGDiCLFcSDirIAMROUzZqcWZRcmlmia2Fu/\
1Lxd4iLrkReaU5OISNYDyPQAFQAMwOmnxlmZjIjWJaRMZkBHbBB9TFiyEBAUJR7Ykkq2KZUqJAlmhJ\
Nt5z8xBINdUM9U3MDc0szYyMzc0sTSwMDQ3UdhYKi1OTM4sz8PFtTY02wbcguRQfBEXDbBsBl9LONH\
SkcsNnom5pYXFoEsQ4aZwAFVT6m"|>|>, "program" -> <|"id" -> "circuit-runner"|>, 
       "created" -> "2023-04-08T11:59:01.709033Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgole1c42478c3i71rk0", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T11:59:01.709033Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8877981189514627`*^9, 3.887798139742697*^9}, 
   3.887798222466317*^9, {3.887872670152114*^9, 3.887872676280972*^9}, {
   3.887872718983329*^9, 3.887872772743863*^9}, 3.887873073177835*^9, 
   3.8893342180684347`*^9, 3.889334362343889*^9, 3.889335056174621*^9, 
   3.8899439466084013`*^9, 3.8899443252573347`*^9, 3.889956926413522*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"c398fbb4-6464-41d7-adc2-f0c268791285"]
}, Open  ]],

Cell["\<\
Only when the job status gets completed, results can be obtained from below \
code.\
\>", "Text",
 CellChangeTimes->{{3.8897804439116163`*^9, 
  3.889780563142214*^9}},ExpressionUUID->"dbc6054c-a02b-4aaa-b0a3-\
10f8bf671239"],

Cell["Extract the QPU and WQF results.", "CodeText",
 CellChangeTimes->{{3.889780572834771*^9, 
  3.8897806065666*^9}},ExpressionUUID->"efa455ec-c2f5-410c-871c-99746e040c2b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex1a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex1a", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex1a", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex1a", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex1a", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex1a", "=", 
  RowBox[{
   RowBox[{"qcZ", "[", "]"}], "[", "\"\<Probabilities\>\"", "]"}]}]}], "Input",\

 CellChangeTimes->{{3.887798130280224*^9, 3.887798131738863*^9}, {
   3.887798278313134*^9, 3.88779827913517*^9}, {3.8900115924220753`*^9, 
   3.890011605211814*^9}, 3.890347202954279*^9},
 CellLabel->
  "In[621]:=",ExpressionUUID->"6cc9efb2-9097-4079-bd48-b301caf18cb1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "2099"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "1901"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.887873101616728*^9, 3.889335061477868*^9, 3.889956954134087*^9, {
   3.8900116006198883`*^9, 3.890011606874333*^9}, 3.890347208237603*^9},
 CellLabel->
  "Out[622]=",ExpressionUUID->"2d535785-5a2e-41d1-9c3a-7dbc99cf0f4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.52475`", ",", "0.47525`"}], "}"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.887873101616728*^9, 3.889335061477868*^9, 3.889956954134087*^9, {
   3.8900116006198883`*^9, 3.890011606874333*^9}, 3.8903472082531767`*^9},
 CellLabel->
  "Out[623]=",ExpressionUUID->"6be92745-5921-4f00-97d9-03650e15a6bb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[0, "Dual" -> False]], "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[1, "Dual" -> False]], "\[Rule]", 
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.887873101616728*^9, 3.889335061477868*^9, 3.889956954134087*^9, {
   3.8900116006198883`*^9, 3.890011606874333*^9}, 3.8903472083503428`*^9},
 CellLabel->
  "Out[624]=",ExpressionUUID->"dba7b474-88fb-4384-99d3-83fd1ef7493c"]
}, Open  ]],

Cell["\<\
Similar approach is taken for Pauli-X and Pauli-Y circuits below.\
\>", "CodeText",
 CellChangeTimes->{{3.8897806987187443`*^9, 
  3.889780768016151*^9}},ExpressionUUID->"4d7ad652-26f9-4359-91ea-\
51912f1aaadb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex1b", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex1b", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8878731768075943`*^9, 3.887873177089293*^9}, {
  3.88787323166568*^9, 3.8878732329587107`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"38bd013e-460f-49c2-928f-dc429b557983"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex1b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex1b"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"031897f9-e821-4805-a0f3-53dd3311ffd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex1b", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887873254155609*^9, 3.887873254483869*^9}, {
  3.889335385578265*^9, 3.889335387125393*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"bcc78cf6-4b2a-46e8-91ba-46237116eb9c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolfi5aro2cnlorqe9g", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIGrjQGDiCLFcSDirIAMROUzZScWZRcmlmia2noIPp398\
vdy0vzSnNyChnBehiBBqACmBkw/\
cwwM5MZwbKMjMkM6IANTS86CI5wTyxJhdjEjqQWm3rf1MTi0iKIYqhNALWPFQ8="|>|>, 
       "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:02:17.063311Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolfi5aro2cnlorqe9g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:02:17.063311Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.887873269891181*^9, 3.8878733736711493`*^9, {3.887873504529859*^9, 
   3.887873536226307*^9}, {3.887873569006506*^9, 3.88787357130128*^9}, 
   3.8893347910971737`*^9, 3.8893350681972713`*^9, {3.889335197109817*^9, 
   3.889335271452629*^9}, 3.8893353955324163`*^9, 3.889335430783895*^9, 
   3.8893362700601473`*^9, 3.8899441407435303`*^9, 3.8899569608742247`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"df8c8caf-787a-4736-a339-a3b663a3f1fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex1b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex1b", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex1b", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex1b", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex1b", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "dssex1b"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex1b", "=", 
  RowBox[{
   RowBox[{"qcX", "[", "]"}], "[", "\"\<Probabilities\>\"", "]"}]}]}], "Input",\

 CellChangeTimes->{
  3.887798175125793*^9, {3.8877982895882397`*^9, 3.887798290350779*^9}, {
   3.889335108001391*^9, 3.8893351119142714`*^9}, {3.889335164114341*^9, 
   3.889335179980164*^9}, 3.890347215093734*^9},
 CellLabel->
  "In[625]:=",ExpressionUUID->"ceece7c8-d7bf-4703-ab0d-fb16b5cf109d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "2067"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "1933"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.88933507180606*^9, 3.889335115137992*^9, 
  3.889335182744514*^9, 3.8893354385606422`*^9, 3.889336273697522*^9, 
  3.889956967182069*^9, 3.890347217698866*^9},
 CellLabel->
  "Out[626]=",ExpressionUUID->"b8b10a9d-257c-4a46-8754-9d0b6e0679bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.51675`", ",", "0.48325`"}], "}"}]], "Output",
 CellChangeTimes->{3.88933507180606*^9, 3.889335115137992*^9, 
  3.889335182744514*^9, 3.8893354385606422`*^9, 3.889336273697522*^9, 
  3.889956967182069*^9, 3.890347217714806*^9},
 CellLabel->
  "Out[627]=",ExpressionUUID->"4b544864-3a70-46d6-85fa-2cf9d2e00b9f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[0, "Dual" -> False]], "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[1, "Dual" -> False]], "\[Rule]", 
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.88933507180606*^9, 3.889335115137992*^9, 
  3.889335182744514*^9, 3.8893354385606422`*^9, 3.889336273697522*^9, 
  3.889956967182069*^9, 3.890347217758915*^9},
 CellLabel->
  "Out[628]=",ExpressionUUID->"bf55922f-332d-4373-a42c-ef5dbc831a27"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex1c", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex1c", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"8e7c0c93-3edb-4feb-b809-fcfda59b3ab5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex1c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex1c"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"ab748503-21b1-4f41-8458-406405bfe82d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex1c", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.8877982351778*^9, {3.887873286061035*^9, 3.887873294444643*^9}, {
   3.889334801437462*^9, 3.889334810528811*^9}, {3.889335371288797*^9, 
   3.8893353770638523`*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"b690fb4a-4d2c-4148-82b9-10d21cdb1219"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolfr3nv0iib9vsin40", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIGrjQGDiCLFcSDirIAMRNMRXJmUXJpZomupZmD6N/\
dL3cvL80rzckpZATrYQQagApgZsD0M8PMTGYEyzIyJjOgA3YkvYwYsgwMvqmJxaVFqWCroLoBkIASb\
w=="|>|>, "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:02:52.542415Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolfr3nv0iib9vsin40", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:02:52.542415Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8893348351450787`*^9, 3.889335363715131*^9, 
  3.889335475465248*^9, 3.8893362814258623`*^9, 3.889944174203435*^9, 
  3.889956990814157*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"76b4a633-0c6a-46ad-8f8e-9b4416be2804"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex1c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex1c", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex1c", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex1c", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex1c", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex1c", "=", 
  RowBox[{
   RowBox[{"qcY", "[", "]"}], "[", "\"\<Probabilities\>\"", "]"}]}]}], "Input",\

 CellChangeTimes->{{3.887798198464162*^9, 3.8877981989048443`*^9}, {
   3.8877982960324078`*^9, 3.887798296499221*^9}, {3.89001161822843*^9, 
   3.890011621777933*^9}, 3.8903472217906237`*^9},
 CellLabel->
  "In[629]:=",ExpressionUUID->"f07953b1-b265-44e6-90fd-c08523d58469"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "3993"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "7"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.889336284653516*^9, 3.889957018800891*^9, 
  3.89001162687047*^9, 3.890347224130562*^9},
 CellLabel->
  "Out[630]=",ExpressionUUID->"ce89cb02-6611-4b2d-9379-1b7946ed9f3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.99825`", ",", "0.00175`"}], "}"}]], "Output",
 CellChangeTimes->{3.889336284653516*^9, 3.889957018800891*^9, 
  3.89001162687047*^9, 3.890347224146784*^9},
 CellLabel->
  "Out[631]=",ExpressionUUID->"c278ce87-1574-4f9a-b30f-8d1aba0cfaeb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[0, "Dual" -> False]], "\[Rule]", 
    "1"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[1, "Dual" -> False]], "\[Rule]", 
    "0"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.889336284653516*^9, 3.889957018800891*^9, 
  3.89001162687047*^9, 3.890347224215521*^9},
 CellLabel->
  "Out[632]=",ExpressionUUID->"000744bc-7fda-4b1b-9e5d-9fe4beba4807"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Results", "Subsection",
 CellChangeTimes->{{3.887667646006912*^9, 
  3.8876676472887287`*^9}},ExpressionUUID->"82da1cf6-3e15-4cf6-944c-\
2a4c2821c284"],

Cell["\<\
Plot the result (WQF and IBM QPU) in form of Bar chart and compare them \
side-by-side.\
\>", "Text",
 CellChangeTimes->{{3.8897816062844267`*^9, 3.889781690567278*^9}, {
   3.889781867698505*^9, 3.88978188929112*^9}, 
   3.889787468430154*^9},ExpressionUUID->"f72e5a57-16f7-42c5-8386-\
5c33524b3dc8"],

Cell[CellGroupData[{

Cell["PauliZ", "Subsubsection",
 CellChangeTimes->{{3.887679702463314*^9, 
  3.887679704480406*^9}},ExpressionUUID->"7689510c-0622-419e-b406-\
faad01398938"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex1a", "]"}], ",", "qpuResultsex1a"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Z basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"0\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"1\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8876675240263367`*^9, 3.8876675447006817`*^9}, {
   3.88766902717588*^9, 3.887669030401218*^9}, {3.8876693424322443`*^9, 
   3.887669346308251*^9}, {3.8876701335268917`*^9, 3.887670136566326*^9}, {
   3.887676246501913*^9, 3.887676250783317*^9}, {3.887676515784782*^9, 
   3.887676518869556*^9}, {3.887679660660509*^9, 3.887679670134234*^9}, {
   3.887679742165444*^9, 3.887679768681559*^9}, {3.887679860488686*^9, 
   3.8876798822532673`*^9}, 3.889335902069276*^9, {3.889959516735486*^9, 
   3.889959517249618*^9}, {3.889960788587286*^9, 3.889960789182706*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"7a5a19a8-e9fc-481b-8812-64dac89ccd42"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.3552804078659868, 0.}, {5.243991260014567, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{42.89777082505026, 
                 104.10057774323889`}, {-63.83201107718179, 
                 99.11762415246397}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.52475}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{110.16569164722377`, 
                 171.36849856541238`}, {-71.87326802104928, 
                 99.11762415246397}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.52475]& , TagBoxNote -> "0.52475"], 
             StyleBox["0.52475`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.52475, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{197.12895418135193`, 
                 258.3317610995406}, {-63.83201107718179, 
                 99.11762415246397}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.47525}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{264.39687500352545`, 
                 325.5996819217141}, {-55.79075413331432, 
                 99.11762415246397}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.47525]& , TagBoxNote -> "0.47525"], 
             StyleBox["0.47525`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.47525, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.500022928406972}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.500022928406972}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5509875000000001}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.1951930080116533`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.1951930080116533`, 0.5509875000000001}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.5247729284069721}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.5247729284069721}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5509875000000001}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5509875000000001}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.1951930080116533`, 0.5509875000000001}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.1951930080116533`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.52\"", ShowStringCharacters -> False], 0.52475, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.1951930080116533`, 0.5509875000000001}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.500022928406972}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.500022928406972}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5509875000000001}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5509875000000001}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.4879825200291332`, 0.5509875000000001}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.4879825200291332`, 0.5509875000000001}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.4879825200291332`, 0.5509875000000001}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.4879825200291332`, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.4879825200291332`, 0.5509875000000001}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.475272928406972}], 
            Offset[{0, 0}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 5}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 10}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 10}, {4.487982520029133, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.475272928406972}], 
            Offset[{0, 0}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 5}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 10}, {4.487982520029133, 0.5509875000000001}], 
            Offset[{0, 10}, {4.487982520029133, 0.5509875000000001}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.487982520029133, 0.5509875000000001}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.487982520029133, 0.5509875000000001}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.487982520029133, 0.5509875000000001}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.487982520029133, 0.5509875000000001}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.48\"", ShowStringCharacters -> False], 0.47525, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.487982520029133, 0.5509875000000001}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[
      StyleBox[{{
         Thickness[Tiny], 
         LineBox[{{0.3552804078659868, 0.}, {5.335669337217771, 0.}}], 
         StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
        StyleBox[{{
           Thickness[Tiny], 
           LineBox[{{0.7439912600145666, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
              0.}]}], 
           LineBox[{{4.93918426802622, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {
             LineBox[{{2.64639475600874, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
                0.}]}], 
             LineBox[{{3.0367807720320465`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
                0.}]}]}}}, 
          StyleBox[{
            Thickness[Tiny], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"0\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {1.6951930080116533`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"1\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {3.9879825200291332`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
           StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
       Antialiasing -> False], "GraphicsAxes", StripOnInput -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.3552804078659868, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], PlotLabel -> 
    FormBox["\"Pauli-Z basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.887667547306151*^9, 3.887668185526985*^9, 
  3.8876690314002037`*^9, 3.887669843626245*^9, 3.887670544368285*^9, 
  3.8893362897557*^9, 3.889957024307823*^9, 3.889959518348166*^9, 
  3.889960790335828*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"bf2e0aff-9d3f-4431-9814-00f5b064afe0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliX", "Subsubsection",
 CellChangeTimes->{{3.887679708262638*^9, 
  3.8876797122509317`*^9}},ExpressionUUID->"2ee84c4f-2897-4d5e-bd57-\
7b0fb8992179"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex1b", "]"}], ",", "qpuResultsex1b"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-X basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"0\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"1\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.887679678121592*^9, 3.887679687312405*^9}, {
   3.887679891299629*^9, 3.8876798952306957`*^9}, 3.889335907106415*^9, {
   3.889959510612629*^9, 3.889959511206689*^9}, {3.8899607835354633`*^9, 
   3.8899607841163282`*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"30f6cfeb-2524-4499-b334-a09442d60d42"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.3552804078659868, 0.}, {5.243991260014567, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{42.89777082505026, 
                 104.10057774323889`}, {-66.34695463177717, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.51675}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{110.16569164722377`, 
                 171.36849856541238`}, {-71.87326802104927, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.51675]& , TagBoxNote -> "0.51675"], 
             StyleBox["0.51675`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.51675, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{197.12895418135193`, 
                 258.3317610995406}, {-66.34695463177717, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.48325}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{264.39687500352545`, 
                 325.599681921714}, {-60.82064124250509, 99.11762415246399}}],
                "DelayedMouseEffectStyle"], StatusArea[#, 0.48325]& , 
              TagBoxNote -> "0.48325"], 
             StyleBox["0.48325`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.48325, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.5000225788552697}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.5000225788552697}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.5425875}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.1951930080116533`, 0.5425875}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.1951930080116533`, 0.5425875}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.1951930080116533`, 0.5425875}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.1951930080116533`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.1951930080116533`, 0.5425875}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.5167725788552697}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.5167725788552697}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5425875}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.5425875}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.1951930080116533`, 0.5425875}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.1951930080116533`, 0.5425875}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.1951930080116533`, 0.5425875}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.1951930080116533`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.52\"", ShowStringCharacters -> False], 0.51675, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.1951930080116533`, 0.5425875}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.5000225788552697}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.5000225788552697}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5425875}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.5425875}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.4879825200291332`, 0.5425875}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.4879825200291332`, 0.5425875}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.4879825200291332`, 0.5425875}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.4879825200291332`, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.4879825200291332`, 0.5425875}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.48327257885526975`}], 
            Offset[{0, 0}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 5}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 10}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 10}, {4.487982520029133, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.48327257885526975`}], 
            Offset[{0, 0}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 5}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 10}, {4.487982520029133, 0.5425875}], 
            Offset[{0, 10}, {4.487982520029133, 0.5425875}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.487982520029133, 0.5425875}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.487982520029133, 0.5425875}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.487982520029133, 0.5425875}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.487982520029133, 0.5425875}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.48\"", ShowStringCharacters -> False], 0.48325, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.487982520029133, 0.5425875}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[
      StyleBox[{{
         Thickness[Tiny], 
         LineBox[{{0.3552804078659868, 0.}, {5.335669337217771, 0.}}], 
         StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
        StyleBox[{{
           Thickness[Tiny], 
           LineBox[{{0.7439912600145666, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
              0.}]}], 
           LineBox[{{4.93918426802622, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {
             LineBox[{{2.64639475600874, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
                0.}]}], 
             LineBox[{{3.0367807720320465`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
                0.}]}]}}}, 
          StyleBox[{
            Thickness[Tiny], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"0\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {1.6951930080116533`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"1\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {3.9879825200291332`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
           StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
       Antialiasing -> False], "GraphicsAxes", StripOnInput -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.3552804078659868, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], PlotLabel -> 
    FormBox["\"Pauli-X basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.889336293507901*^9, 3.889957028517004*^9, 
  3.8899595123839417`*^9, 3.88996078559753*^9},
 CellLabel->
  "Out[197]=",ExpressionUUID->"d0e826c9-bc2c-4bea-bee7-552a4aae93c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliY", "Subsubsection",
 CellChangeTimes->{{3.8876797151883183`*^9, 
  3.887679717836677*^9}},ExpressionUUID->"5255a3d9-0d48-4ca6-87a8-\
0022078fc6e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex1c", "]"}], ",", "qpuResultsex1c"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Y basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"0\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"1\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.887679681045422*^9, 3.8876796919941587`*^9}, {
   3.887679898413301*^9, 3.887679902280917*^9}, 3.889335912491007*^9, {
   3.889959503049548*^9, 3.889959503726974*^9}, {3.8899607527307043`*^9, 
   3.889960770544046*^9}},
 CellLabel->
  "In[196]:=",ExpressionUUID->"4b76740a-211b-4a97-92a7-073be1c44dd7"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.3552804078659868, 0.}, {5.243991260014567, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  1.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{42.89777082505026, 
                 104.10057774323889`}, {-71.87326802104927, 
                 99.11762415246396}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 1]& , TagBoxNote -> "1"], 
             StyleBox["1", {}, StripOnInput -> False]], Annotation[#, 
             Style[1, {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.99825}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{110.16569164722377`, 
                 171.36849856541238`}, {-71.57490895974563, 
                 99.11762415246396}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.99825]& , TagBoxNote -> "0.99825"], 
             StyleBox["0.99825`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.99825, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{197.12895418135193`, 258.3317610995406}, {
                 98.61762415246396, 99.11762415246396}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0]& , TagBoxNote -> 
              "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.6719999999999999], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.00175}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{264.39687500352545`, 325.599681921714}, {
                 98.31926509116032, 99.11762415246396}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.00175]& , 
              TagBoxNote -> "0.00175"], 
             StyleBox["0.00175`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.00175, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             1.0000436939627861`}], 
            Offset[{0, 0}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 5}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {1.1951930080116533`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             1.0000436939627861`}], 
            Offset[{0, 0}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 5}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {1.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {1.1951930080116533`, 1.05}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.1951930080116533`, 1.05}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.1951930080116533`, 1.05}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.1951930080116533`, 1.05}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.1951930080116533`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"1.00\"", ShowStringCharacters -> False], 1., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.1951930080116533`, 1.05}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.9982936939627861}], 
            Offset[{0, 0}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 5}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {2.1951930080116533`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.9982936939627861}], 
            Offset[{0, 0}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 5}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {2.1951930080116533`, 1.05}], 
            Offset[{0, 10}, {2.1951930080116533`, 1.05}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.1951930080116533`, 1.05}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.1951930080116533`, 1.05}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.1951930080116533`, 1.05}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.1951930080116533`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"1.00\"", ShowStringCharacters -> False], 0.99825, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.1951930080116533`, 1.05}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.00014369396278610916`}], 
            Offset[{0, 0}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 5}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 10}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 10}, {3.4879825200291332`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.00014369396278610916`}], 
            Offset[{0, 0}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 5}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 10}, {3.4879825200291332`, 1.05}], 
            Offset[{0, 10}, {3.4879825200291332`, 1.05}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.4879825200291332`, 1.05}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.4879825200291332`, 1.05}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.4879825200291332`, 1.05}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.4879825200291332`, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.4879825200291332`, 1.05}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.0017936939627861092`}], 
            Offset[{0, 0}, {4.487982520029133, 1.05}], 
            Offset[{0, 5}, {4.487982520029133, 1.05}], 
            Offset[{0, 10}, {4.487982520029133, 1.05}], 
            Offset[{0, 10}, {4.487982520029133, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.0017936939627861092`}], 
            Offset[{0, 0}, {4.487982520029133, 1.05}], 
            Offset[{0, 5}, {4.487982520029133, 1.05}], 
            Offset[{0, 10}, {4.487982520029133, 1.05}], 
            Offset[{0, 10}, {4.487982520029133, 1.05}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.487982520029133, 1.05}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.487982520029133, 1.05}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.487982520029133, 1.05}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.487982520029133, 1.05}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0.00175, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.487982520029133, 1.05}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[
      StyleBox[{{
         Thickness[Tiny], 
         LineBox[{{0.3552804078659868, 0.}, {5.335669337217771, 0.}}], 
         StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
        StyleBox[{{
           Thickness[Tiny], 
           LineBox[{{0.7439912600145666, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
              0.}]}], 
           LineBox[{{4.93918426802622, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {
             LineBox[{{2.64639475600874, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
                0.}]}], 
             LineBox[{{3.0367807720320465`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
                0.}]}]}}}, 
          StyleBox[{
            Thickness[Tiny], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"0\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {1.6951930080116533`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"1\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {3.9879825200291332`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
           StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
       Antialiasing -> False], "GraphicsAxes", StripOnInput -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.3552804078659868, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], PlotLabel -> 
    FormBox["\"Pauli-Y basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.6719999999999999`", "]"}]}], 
                    "]"}], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.889336296501704*^9, 3.8899570316707993`*^9, 
  3.8899595070346403`*^9, 3.8899607715330973`*^9},
 CellLabel->
  "Out[196]=",ExpressionUUID->"30271acf-5255-46c7-8489-c0782310f072"]
}, Open  ]],

Cell["\<\
The result of WQF and IBM QPU matches to greater extent . The presence of \
noise in quantum processor (in this case ibm_nairobi) cause the mismatch in \
the result, however small here.\
\>", "Text",
 CellChangeTimes->{{3.889781812151462*^9, 
  3.889781857827085*^9}},ExpressionUUID->"e511a532-1b52-4c8e-89c5-\
730f7e862c35"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quantum State Estimate", "Subsection",
 CellChangeTimes->{{3.890011640003862*^9, 
  3.890011655987331*^9}},ExpressionUUID->"2a980647-3b4f-4c04-a44b-\
d509ed3853dc"],

Cell["\<\
Simulate measurement results in different basis state and find the \
corresponding quantum state estimation.\
\>", "CodeText",
 CellChangeTimes->{{3.890013217609788*^9, 
  3.890013277022872*^9}},ExpressionUUID->"69af87bd-0895-428b-9637-\
7a853f79ef70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"est1", "=", 
  RowBox[{"QuantumStateEstimate", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "\"\<X\>\"", "]"}], "->", 
      RowBox[{"Values", "@", "dssex1b"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "\"\<Y\>\"", "]"}], "->", 
      RowBox[{"Values", "@", "dssex1c"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "\"\<Z\>\"", "]"}], "->", 
      RowBox[{"Values", "@", "dssex1a"}]}]}], "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8900117367131042`*^9, 3.8900117530374517`*^9}, {
  3.8900117846346703`*^9, 3.890011792854273*^9}, {3.890011848836671*^9, 
  3.8900118527952633`*^9}, {3.890044240323113*^9, 3.890044253834031*^9}},
 CellLabel->
  "In[321]:=",ExpressionUUID->"f685d9fe-1588-47fd-98c7-d6eeb276bde9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumStateEstimation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
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
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
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
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
/GL4SOUZ7Ic3zJ4tJyr3/OTjj4xfgIvmxnopLysxOyx8oUD1d3Ql9n4mvMDP
kMoGZn1tpa7zJumOhm1927pOmfGo4kWPtdXl0qEyhsc69PXIFnBTX1uhule9
YrHWHmusq1QeUhfgxU3eA56uvPxS5Q//VL1qulx68UXy8YdLpLK0UOXFFsMI
+EBu5GanK04yJC83w26Dl21bNsnmTRuMl4Cb9J2Kk8wM/Y15qputkenKZ7DP
LXnvPcPIaFnC7TrVxbiNjQC+T5w9Y9y29bONXwQfqXscMuOYo4+W226ZL9VV
lbovNkhleZnOUt1TdxnHgEvAi7G9wr3Rb9xsMixwbNU1XFNZajoS67lVj+1t
yjE6WmxNJ2LtJhcSgazg+fqacmlUPHSZToUu1WrY4HleG9H3tjSijzXp4/CP
Rnsdr68qL1J+fYrx8WuuutJ0rJ3bN0thfpbkKxayMnYoBjZKlnKNXblZDh86
c22m22vAUdqOraZ37VB5gkzB5oVcycvNNp898mH2rFkWM4/MSMWIj22ErxD3
Bd+HvzDGMfKzjJ8dH/66cSQnFf79+WcrlHe2SQW4qNB9UfUpx7VrDQ/YXDmi
+8Ov4QXoS9GAN7Bm0afQlXpY28Eejx7U3lqvulidrXvWNY8jJ6orSwxXDXUV
hhWwwPpH7+LIfV6HDIl28ff0vmKltDhfv4vqNpnblZsfIXNvmKX6zc2qa90h
WzevlzJ9vmhXtpQU5JqutWPrJinIAzOZhon83Exd+5mGFW6np20NZEyGfuZO
xcw2w8nWzZtMnhDrMvmaa+SUk0+Wr776ymRtqr6VGtuInx1fJXoXY9z+u9/H
z4oPjw32OPxlxAWWlhRLS3OTFBbkp/gr2lQeNBjHgHvDM+AVY2EjYbalWsMI
coJ1Dccw2aL6ExNstDTW2NqvKCuUuuoyw1Mi0mZYQkYgH3pUxrSBFeUtYKtF
8cHzhhvVs/icTvhJvFPefXuR2a6w606+5irj5yedcLzZscBJtsoPZMjmjd9L
2rZNdj9T5USG8hCbehtOkqmPb9+K/XeL6V2Or2QoZtJk04b1yvE3ma/xuWed
zYJ4AfQtfCIeG6mxjYvefNNsW8RI+nM+ztv32/jZ8OGxsWnjRrO7PHD/fdLV
2WH+bmI18EfDwfFVw7nRqeAY6E3RABumA8EhAvnA46xzbFIeBxxNTuhrTZdS
Pak3Hpb+7k7lGw2GAZ5rUqx06rqP6+0Bfa5d8QFeoh3NduxSHPTA0+En+r6+
eIe+rstePzjQLY898qAcd8zRMnP6VItVfPbpJ2Tj+m/lwyXvpPCPbcrHN9v6
z85UPUvlCLJkF/JDsVCkHN74vOJk6+YNAU62Gm6yzAacYfxk/ffrJCc7S1at
/MJ0KPQt9Cr86qM5CbGNq1atsthGsMIYj23cb2O/4yOVh3/4wQdy+KGHyqcr
lpvfu66m2vh3SOVDe+DXNn6h+GjQNd+k+3fEbFMOE/EuJx8cFvDf1UuD8vFU
3CTsdW2GAT+7oyHTs8BDX6JDX9dmGOrVNQ+34PGEviesr4nq5zMjKj8i+hqw
wXO8BgyFlLf36PumXzdFTj35JLlh5vUy+eqr5PPlH0tjTYXxktLCXCkpzJFi
PYKL7Mwdyis2mzzJDORKcWGevKcyaOum7/U9xZKjulW6YiMnK81egw0Yv4nj
JlsVe9/rYztM38IfeaFycuxbxKmkYsTHNpLne8ykSZZP4se4betfHvsVH6l+
jWeeftp04x26H3Z2hM3vTcwT8VEdASbC4ENlCP6GOl1rXodCX4JzIyeY6Erm
y2ioMk6A/hPW+6xlbFKsZSa3kQPMpvpKO6IfoUvxPmRFrLPFjmCD9d9QWy6V
pbukWeVLqKVW36OfpZ8bU8wgiwZ6VIYoHznrzDPMpjtj6nVy3eRrZPvm76Wy
ZJfKhCzlHoqNXTr1mKtyYldepq37gvxMm9wGH7wf/8nmDWulWjECPsCTs3Vl
mq0rC79J4EvBLoy+lZeTY/GQxGTiHxrN27kNbqhxSvz9jGnTLPeLMc7b/6Wx
3/CRio0H7r/f8iN25eepnGg1uy2+DPwaXl6AC2Kk8GM0KgZqqhxHwA5bV1Me
cOV64wXIi4TKhJDpRCHTfWwmmJ2mSzHRmwZ7u3S/D9t7hvpjMtQXlW7VsZAf
6FpgA9yAD3C3acN38tILC00PalNZ4WUKepXpY4qR/Oydlk973bXX6F5+ucya
MU11pC2qN2XIrpx0w0ixcvTSolx7rEDXOsc8fV9xQbbN/Nx0uej883Sdz1Fe
caR89OES5fa7zOaVl50R2Lsyzd5ldi99bKs+t3H9OsNIfl6u+Uo4r5s3bbJY
x9EYqQliG69Vfk8OF7oXYxwjP3nsF3yk6lR33n67+bsKC3aZXwNcoEcRA2ix
tIoNcIEeBQ/Hf5Gfl234QGaABzCAXcpm3E10I2RGr912990MG04MI7rXM2O6
34eRAdihFBfgirUPxpyuhf+jzuxU69eultNOOUUalI/jXyS+JNLpbGTxrhb9
RQOy7tuvLAYK2YF999GHH1CdKkfyFRu7dN3nZaepvrRDOUaa7v9wie2Kmwy7
jW2roqxA1q9zf4fv/MWny+Tggw6URa+/os/nmM0LTgI3yQ9sXUxkC/7FrVs2
mX0rJytTHn7wQePt33///Zj2X3g8vnjihvFlon8xxm1bP2n8y/hIxcbdd91l
PoKSkmLVoUKGDTg49lpi/6Kd7RbrEWptNJmBrGgy22tp0lbLXo9eY1Nvs+eD
AThFR0h5c7diArmhx/4eh4negGNEkA3hJtO/WptrpDvebq/hCF9JBJ8RCzDS
3xtRXX+jXHDuuabbYQPj+3QjmxRvkY4m6e2JyfPPPmW6/a3zb5JrrrpCFr/x
iupy9VJbWSxlKjPKivNMdsBBHC62m1zBPwJGsAEvXvS68fo+5fxgbsumdTLx
iMNlwUMPSGVZoeRkpEka/AOunpGWtAdj58KfmJWxU7Gy1WJTHl3wiMVvbty4
cTeMpMY2Pv/cc8b/kDeMcYzs8/iX8eHjSR95+GE5QeVGUWGhyoew5RZ5Dt5U
X2O4IH6qTuVFcxD3hF8OrgHnBg+OW6fgIhZOygf84HCJQV3THhOsc3wTPB5V
XuHxMNQfNawMqK412BdRjDaafzwRC8nQQMxeh+zg5+/csUl1kbMV6H26TouM
P/f1JkyO9Xe7utLzVCf6x+mnmfy49uor5ULVk5hvL3pNaquKlX9kO5zoRJfK
y9lpmMlVeYLuVV9dJvfdfafMv/lG6euJ6F5RY38b38oJusfPu2mufk6pFKqO
l63YwD9CDBexj9n6GXB9eDs6F373nOxMue/ee1TXOlYxs303zu71LTBC7gz2
X452vcbtv/sy/iV8+P3olZdftv01H77R1mq2W3DR1REyuy3x4ehXxNp6/7bZ
nqJh4wD4M1jv7O/YWod1qAAfupfzPHs/coL1zgQTPYmwYUB03TO5DT54HBmC
n8/86noc1OfBZUg5Rq+u/R79zMz0rZZXTnwu3HrLxnX2m3oCWxcYvPjC8w1D
06ZcqxiZIsuXLpGnn3hUlrz9psqQIilXLJSX5Bk+wAq8A/0rN2uH6VdNdRXG
6d9SuTM42G+8Ch9MQvHfWFcl5/zzLPPJlxXlG8/Py043/yI+E+xacBRkCPpX
dma6yZL8vBy5847b5eSTTtLznm+8Y3ScPLpVa1ub6WLkzGMzYYzHNu71+Mn4
8DrVyi++kEMOOsjskORvo1O5HLxWi5MqLys2jODPiAV+DDedPoVfAq7A+kde
9JhuFTI9HVwwPSYa6yv1M1rtMTAwFOChz+tQ0TZbz8Qd4kOvx1eucoMYxM4O
YuLrbXbr3wI3cO+sjG1y9ln/kIh+nx3bNlmsejTaad83Huuw9X3s0ZNMr5qi
/Bz/IL4M4lTKivIkW3Up+Hup4gI7GDiBmxsnVzmC3lVekq8YPFM2b/jOTrnJ
xziys9H2CWxt8BpsZDkqM0oL8yU3c2cyTgVZQqw8cgUuDz6IBc7KzJA5s2dZ
/ju57nCP0TUhSoLYRmpIEAs67+abk9dw3P77o+Mn4cOfV+IaDj7wQPnqyy8t
1xU7Fb5w5Af5SfAOYs7BxbAP3GHD8w30fexE/QE+PO9G94oGMSD4QMBARPky
OhKxVcghZEEYe6yufXwm6EzIBrDUpzqYDMalR+WEyRv9HGSKa7nYbZ+jUkIK
d2VaPgafyengfehy/D3G1s3fm536+unT5PJLL1Z+fJ9UVxRJQV6G6U5M9KjM
tK3KIXYYT2eNg43C/EypqSiU9O2bjJc11JQZrrtjoaTtAaygHyKv7lZ5gJ1s
0/q1UqW6HvIMDsLctnWjxTfuNJvwTpMjO3VPIhaYWtkzpk93tbLHyEm02Ma6
OsMPMQzES0ejUft947atHxz7jA8vm9Ft0akWLXrT7FT4NvBrcAQb2HCxT7U2
17u1m4KNRMTFibA2sONib3W2Wse9sR0hUziiAyWw13Y5uYAfI6brF3mBjjSA
bgUOAplguBhKqGyJy2A/a6DHdCtkT1zXZTf6GPyks8V+fqi1Vrnzq/Z5fA7v
5bNaGquUW3WbTkTM2Ixp18mlF18or73ygmJaeXBpvvKVAptVzNIC8xNiw9qh
a3mnyiL0rPKSXfKJ6mMXnHtOYE/oDGwM4aTtwezWUfA6KC+/8JzZyj5d9pHi
sNgwgl61M8gryUjfYTkmHiNwduK2zlR+9MQTT1hc1lj9FnxsI7Jkzg03WF1U
dDLGOEb2OPYJH6m2qisvv1zuuP02y/EjDxyZQZ0Ep0u1mY2U2Fp8316vints
BPYp1ga6ODwCPxx4wA8IDpA3HfizdUa6Wu098PJIZ7PhYhDfhmIAGxSyBPzw
GGscvYvJ7T7l6OhaPfhH+mKm8/N6W5PxTuMBn69Yqo81m26GDEKWhJXrDA32
yP333iUnn3iC2a7AyCcfLZEy1aHAR0XZLqkoDabiAP2qurzQ7Fdwj3zFCjLj
qccXWEx8T3c0+L2tQQyM2xPCqvOZ7Vl/AxhZ8clSk8v4ZSoUd/nZziYGLvCP
ELeF3ReswE/Qs9Z99635VagPMdo3Mtq2hV+E3H7iyaiXzRi3bY059gkfHhvY
Dcmjxi9eW11l+Us1ysGRF2DDYm8720x2YDN18VOek7uYc2c/bZHK8iKTIehZ
+AfhChZfgg6ScBwaXHhbVK++D70KbMAf0K2GZUZsBDbADuvdPkf1FxlCt+qx
272JTuXrcdOlSnW9g43+QBbxWUxkzRWXX2rr7h9nnG4cIj1tkzQ3VZlfHHxU
lhc4nNgsMLtV5s5thpUS5S51VSXmT3zxOceNuyNt5sNH30OvwkfTid06HnZx
YOEmfVW/xTxOUDny0AP3mQzC174zkBsuHjjd5WDt2KacaYOUFBXKojfeMN8T
/Q/p7zZWfbrU2MbFixebbYu6wf76jvP2EWOv8eE5B/sN8p/421Bbq5QWF0pl
RZlhwqbVTGi1NZ6Mfw3y8lLjB/Ft3zLvZnn8sUfNR2jxUdipdK2j+7vp/H3c
Ro8a6GX9JkwekePXzecMpMqMeHKy9pETQwMJwwLyA3wM6fujug55Hj9EY32F
vKo6EzrbUIANO0qfcXlkB7an66dPtZjdfyiHnnbdZF2Xm6RIOXh5Wf4IjOAn
J57EyZR8kx8XnneurPzsE/0NCWczxkat3wc84BMlVpjf382+gd3abM99UqL6
Gjlk2H+Jbdy2eYPFBOfnZSnfTg98iDuNl2zdslm/S6nl7l83Zcoeucjo2EZi
6PGRUGvPX+dxjCTHXuHDx4709PRYDNC777yt67jbckQdNtpczEjYYcPbqtCV
yGsymRF1Nht0bvzgYGfhM0+abo/cYD1gYx3oiztc6BoyTASTx1j3YMK4PnoQ
nCHgGqlTBrtNh8HXYPLC40N/bn9f1HQsJ0tE9ZWd9pvAxwD6mT6OHVhv6DrM
UG4+wexWxJU8/ujDsmb1KnnhuWf0uXT97YW6lyvHQI5UFBg2Sotz9Zhh+hc8
Hj8h3LxKX9OvMrAzVK/nIGT2iEHFPfEu2OfQP8NBPJnL3WqxnHds3+eprMa+
BRdBjhCjBUZykxhJs1gtcnfxsfP3XtP1jh99LD1rdGwjdYqxC9Avzo9x25aN
vcKH16see/RRs5X09fboOiiyelLNVnOt1cWNhIN8jQ6Xm0H+K3427FHcR3cg
DhB7ZizQtdEf0F3wJaLvY2cd6I+brBjQtexmTLlFPIkLw4CuY/Qr7g8GmBjq
j9uaMiwm8O312OxWfCTQrxSDHPv0s4cGHT4KdmXJxRdeYDaAvl7H5w0nOj77
9GPbW+fMnmk1S8gBCas8bGmukSpd+xXIDZ15igtwVgZnV5yg+8BRGurK5dtv
VsrZqpexLwzqb0GPioQbLeZxQPFBPKSPH0PnTAR+0HbbQ+pU9nXpntAp06ZM
tvNELIr51bdvtiMxjUy4+zaVIbk52bL8k48ttgT74p70rNGxjeQrUteLutzU
sk+97v/G40fx4fcRfFATjjhc11Oe1AZx6q5uZ12Sc/h8pqj5wcO6VzaZrOgM
8vrIPyLm1vx+un47TdfuM/0B2z/7IPEU6N/IC7AB52Zib4I3j5ATipFelRH8
zV6L2+izI7jhp6FLmfzQx8AIz8f0ObAxOOD60uzKzzL/QY/pdk7eeHw8pvIC
/WrunNmWB7X2u6/1t5dJSTE4KLJZjLzIyzCMODlSaPeRI9jAsHdNnXItZ9Lw
INjUVB7i42lrqjGccN/b78CIt3VzHsmHsTpDup/cefutFp+4acNa1b3yLH/E
cncVJ+SgoGtRL6WgYJee0xtlxrTp1kP3x+r/WmxjDfHVdVbPmFw2ZA/j3xwj
e40P7ObPPPWU1XcuKyly2Giss5w/8OFlh8U5wcfJZQpi08EBeXr4M5Al6Fnw
CrP7wkm643KjrsFjJh1l+gJrCS6CzAAjnpuY7hPgBV7BNLmhR9Z9JKhbAg5M
dsA3hnp17UfMdgQu4uhW+jw5T4xdqteDj16VHd0BxgYNV0Myfdp1xsmnXTdF
1821yr12SHU1+kqRrqldyoMzpbAwWyorVZaYrpWu2MnVz8w03IRa6+S2W+dZ
bhWD3zyEf99m1Hg58gOsDAWcxGzcPm4g7uzdnMuG2gqTJc889YTxv5WfLVe+
U6QyY4PJD3KzfN4uOe3btm4xf+Dy5culqbnpRzGSGtt41513mr5FvLx9739f
29YP4sPvHdTeJ/a0upqamzVJbOD78zYr4xxBPhN5TPALbDTmH1fZwRogFr3X
x6TrekDn7yIOfZCvMWgxFtQdGBoaNJ7gbVXctrVuciNhuGF6bHCk/g624Cg5
gKqPDPSzxvvtc/t64/oZ2HpjhgOHgQAfu8DHOboG4kl8wNt7VJbgN7z0kotl
5vXT5fbbbrHXlpTssmOhcufyskLDRpnKjbJyN52ulW56F3Yucj4+Xb7UnU/l
H/gHZTBmvAMsuFgxFz9GbH5/EEuDf8RwEtSOcP4gZzd/7x1ndyLmkdhOdC7k
B3lY4INc3fzcHHnqiSfMzojfY197ktAzBd1yw/r1I9bCv9nYIz68H5DeSmDj
gw/eVy5HDecW6w/QbnXbqq3GSDTI+WuzvO9a06ewU6E/N9SUm77gfX9gw3QI
3UOxraIL9Qd8gL1/1Rcr9H7M9CvsT+bjG3SYSJUZwtE4Nj/B6U2s/0HFWiLe
Zb7KNupl6XpqbW3Ua95sM0odIH0+Gu2w35aha+rcc862x3k+FutQnCQUAznO
Lzh9mtVwe+zRR3QNlajcKDBscCwrcxN5UllZLFVVxSZHMtK3KT4KjY/gt9uV
52SixYkNJcx3DycXZGGvixezuHuVJQNBHktfgBGOUcuxbzI7HHXr+nqi8u3q
r+SQgw6Wx/V7kRtAvi66KbbfrMB3SMwPnIK+KD/G1ceKbVy2bJnhkDxQxr+h
bWuP+PD7BTnNrI/GxgaVG40BPmqMbyA/wlazrdny/JAZ3obbGuhTkSA33MUY
Omw4buHxQUxt1Gw7xil0kCe48vNlgV+jN8m7HS66DSuskYSuZWRFR7jFcnZj
sU637nX9o0+ZXqWv68QXA98NudckEhGdXdLX16scNt322G59bQfcSXHS09Ot
MvNTiyuZPvU6y29FjsDRF735upQoNnKJ+1DdDBwxC8khLMrTtZWvz6VLaUm+
bNq41jh1LIrO1x34+cMudhibtMpFdC2PEfCAzoXcgKtwH3lCfEEUjqVYoU4k
3F0Ge8xPSAwDccGllmu1QTIzXJxvZkaa2eBff/VVy2HHVlVZVbVX+EjGNiqm
NmzYYH7EJ1UWMVLz4P4Nxpj48LKDGB1sn8uXL7N6n2CDmp/UGKH2Dv4/5AUx
qCYzVBeAf7RaXduWwMYfMk5ufoyEw0af+fqixrfxy+EL6e+N2rpHnyK+/N23
35Rb590kjotEDAvRSFgiXe0247HOJAboQ+D0Ij/7UyY92Hokou/tVfkyMNCr
uECX0vXY2yNZusaIzQUf4Ai8cf1ffGGhyY8bZs2UaVOn6B78gjz4wH3y7DNP
SkMD66xY9ZEincUqQ4pM7ypSfKB7padvN5ny6isvml12aIjvlAhkpn7XocBf
Q4xlgBHv/yT+BIygjw7YOetI1pmAu+FvheeBGfYNfKvYf9Hj8nOzLJeduF9q
ohDHmKmTflrPPvPMPsmQ1NhGev6wDm6aOzcpP/5NMDImPrzsePONN6wuAL2W
0KnoJ0M9HqvrrFzDxSBWBfUSQrbHgQ10hb7ABoO8IF7Ec3Kw0R/gozuIqzK+
PZgwv4TZb4f6VTcpMNn++qsvCVw5GlE9rC8W2GWdTsXaJ8YWvYr8jeQchZV+
5SIh1QPdOh2w6W7DP3ItftdxDsVpv+Mlc2+YLWfq3n/j3BuMn+fonhxR2VKl
ugz6VWVlicOIcZBiu+8eK9L1lKl/r0EeuP8euUUx3tfbq/tLvbSqvknssNMZ
48M4QYakYGTQ/CQOI/gQkcG2t4CPQJYgo8FKX3fEdFTq1dFXh3rAyBUwkh3U
naNHCb1IsOFW7YMMSY1t5H3oEZdefLH1ZEldJ3/gsRs+vOzABo5c/vijpWaz
olZVR7uLzUWvsh4B9a6emqsz4mro4OfojbvcWJ+7AV7Qnwd0XTh8RGyNEEeF
HxEeAdcgTyOGXTjcbOu8qCBPJhx+mKz+epV9twGvZzGx5aJjxbHb9svggHts
9zmgvyWhXKSZXydergwOOnwUFxdYz04wGY9HVLboPt/fY5z9Mt2TqdUGN69U
HlxaqpyirNj0KbDhZQjyw98vU7yAjzb9LddNuVbeevM1/cyY+ez7dR9IEEep
ewJzBFb06OTHcCwN/qLWphrH2YOaRZ0mP1qSstrJbfLHwnLn7beZ3Wnd2jWW
P0LNoPS07ZZzSC8f8nT2VYZ42xb4wCePDMEuBue3a/LHxshu+PC/9/PPPjP7
DbG5dYHNinwn1z+gwvDA/gUH53aLYsbFV4Ush8P5OJyfg+uNjReugdxgsm9y
P0TtHl1L7K89ZteKGs/AJ8hgHzz04IPks0+X2X3DgXISdCZkylAgLzgOmh1s
pG4FJsAHPQgdPrz86Ld9IBxuk88/X2G3wQf6XGNjnfkZwM01V18lTz35hO6h
1VJWXmw4KSKPqWiX3YazOz2ryOQHvL2gIFdqayvknyqXNm74zvS6hPkr+X7d
xtGxW8eJ01fZC1aICRsIcrt8jlfc4k9q7Oh9iL42KvjgfHPb6qI2uRiEl55f
aPbfZR9/KIUqG9O2bbH43pdfetH6v1XtpS3rh2IbH3/sMcu3St+5067JH9j+
O6b8YFxy0cXy+muvWhwJvQWsb5/KDlcXt8nZcsPU5KwxHdjyOYJ8hu5Ahvg8
8b5uFz8FRtgf0auIK8QmjBxyua5u3WCr8nYqw4qOjRvWyp//9Cf5dMXHYnYg
xQZyo7/P23CdHjWMkYGUOaScvEv5R0fw+5zsgIdgRyYXasuWjfZcIu7+Hj42
6q3Nmnm9YeSNN153+ChDRtCnoySQISXBdHLD4aNQ9fYC2bZtk9n9Wlvr7DPB
AH579zuHYyCHghhjs3Vjzwhi+jlvxCqDE1cHuMV4PPIDf0iPxTO2J2vUW22L
Duf7WfbRB/b9X3rhOZPB263Hwg7Lk/zk44+NU/yYP+TH7L/vvvOO6b/kxzH+
oLGNI/CR6is/4fjjpKa6SrHQZnV5qI9L/jh1FvB5RINeAdQ6Aye+toLPGbfb
PvYWvaG3y659Q32l0zV6oyYv8A8730Ys6d8wGy7+O5Uj5vvQ8fWXKw0j9Nog
LyNMz4EROHAyw8mFfknFR2dnu+FjcHDAsJH6PPd7erCbDSpHdzLr7cWLrJY6
+avoV6wt+thWVhKnUWbHwsJ8082QIW6WGEawaxUX58uyZUvlogvON8wOmZ+y
2zDi4iKdLcvHVQ5zEefzgZORr+LyWTpNB3O5hm12romDh6u7PIGwq9dNnVTq
bWPbUv1z04Z1VreS/tTUDaJO/P333Wt5VC174VP/MU5Cnsk333xjPpJXX3kl
uX7+YBgZgQ+vW1FH+vbbbrU4K/QqevKR94TNCpyEg5h1ron5x0NNydjD3hTe
wR7o4glbXJ8NdIKo6zmA/mQ55HqthwYTY2LD+f16zLfHeH/JO6Zf0xetr6/H
1n0iEQ04tcMC69zLCHK9OXaoXhg32TAow7hwOgE9m+kjODQET3Hc/O677rQ6
6nPn3GDxsNQLWfbJx7pvKC+vchhBjhTo3lxZWWb8g9voVdiLG/WcPPvMU8bt
3Xnl+/fYMYLfY8jLSn08GS8zHJcfCfLqydnivJGbwl5DzQlXN9jxO5/HH9I9
xtUzcr1PsIcM6TkkNoBaQDfMmmXx7/RItBpzaWmWG7U3/dl/yLZF7MpO1bGO
O/ZYueeuu5Lr6A9k20riw+Menxm8nB560UiX5ZMTaxUO+jRhu3I+8jqX+4Rv
oak2wEc4ySOtHg912KjlGcTmDQY54+gR5IVbrLm3X+0BG3ANpsfIwmefNtlG
D2cGNifWPnoSWOnr6w6w4bg5epR7Dtng8TGYxAdrHr3DyRZsWAnLP0VXnz1r
pvnzWV//OPNMWb36a1379YqHEpu5OVnKxbOlULGBToVtC5w0qM55w+yZ8vKL
z9vfGLBYL2d3I37fxbj0mC4pqbHHgy4mH2xYbn2/s2sRp0weMdyDOBPkR080
nOzr095Sb9iwia826KfVp+eGPqQWB3DxxdZnl/hDerztKc9wX+WIr52CD2nK
5MkW4+1+8x+Ctyfx4X8Pfbz4regT1FtAt6L+iO81gI+cCSbs+nSFzC8YC+o+
o1ch78EGsmPA22SCOHUw4nPHsd/g90aWOGwkxsSGm32KkW6z1a784nN5++03
paam0r4zOgw4YG3HYhHdox0ekAdwbuK7HD6GB9yDQSwf8Vf+fm1tjdUEuW7K
ZOMe1Czs6AhLRWWF8nK4d75yjzzVr3bZ5HZVVYXJE/Qs8AFOLjj/PD2Xq4Nz
G9ikA38/+HBcpGeYbwVyA/2KfcOfL8vJ7e10tr6uNuvnA0ZcTbwu5w9J6Zvl
7OyuVxy+23i0QyqVI11x2WU2n3v2Gesdjc32X5EfSduWj22sr5dpU6faXoP+
lrqmfsdjN3zcMn++PPTAA7oWe8zn4fom1wR9zVxPS2oNJoL60dazjJoh9M3A
RqtHbFjYrAYCXwdH9Gj2RHRkcMNaQa7AP8xWpZw7KTu8DTcVH/g6iE0P5EhX
V1g++OBdkxns+86ONWQTXQk5AiZaW5vNdhUKter7sSPFDS/cdv7BTNsPuE/N
WuKN8Bezz15x+WWKw8W6P5ZY7aLiYmy57LnlioUKwwW9CJAljpeUGSfJycmQ
M047VaqrSu27Dpk9mt/gfpdxEZ+jBWYUD5yXXuJ7A9sWNvDhPLHOpN8IXcvF
tVU7H4jqVVbLIsCGxwkxv53trpd7v8qRmPIvcqKxO6E7btu27Udj3/fF/suR
WkLo5vj0qaXN+J3btgwfXrdCNp5+6mmuF6DqVtV6/fEJgg/ONz5BYn06gxqg
w/nkIdvTiGEfsJy/IMYqsOV7ueHyu9uCeCr28x6zb6ILDHlcjCU7Ah8fsVFw
C3QqRmlpkTxwn8vpARPD/j+v/w4ZFnguGo2YXjww0G8TbLAn5OZmJ/HBtXzn
7beN1944Z47l4X3zzdcWWwMmqqoqDRfcdhgpN/6CHOF2eXmpyZGvv/7SfI7E
tjh+PhIflqelvx85MhjEnZnc0P2DvJd+mz73JRI81mUx+MhldFVsfuQmsx/5
mhaRIEaUPUsCOzhxJ4sXvSHXXHml6c233XKLHPCXv1j8YWdnp/GIfxUfo21b
+Fmwn61b52qJ/Y7liOHD86n09HQ7h/TowGcONyc3EH8g+GgL+v35/Cf2L64P
0+9l3p7r9IIuu7Zggz2wI9xk19zbqsAJ+Rox6xsYMv+42WpTsEFsLzZb4kPg
4d4+BX8gjhCucMv8efb9h59TXay/z3hJZ6eLQ2xra7VeucgPJnhgP8jIcPFX
Ed0PuP/AffdZTcPp01xc4lrdK8rLy1S3KrS6qciSVBkCLtC5PD5qVR999ZWX
rS4VA1yDATgIx6GhAP+K+a4uZ28iL2soGbfvJjkow/lhEYtN6bacmWZnI7fa
YZXJ2vbULR3odbmRnMvPln9stbqOP/YY+31PPv6ofPP1Kjtvi99aJH9TjCxd
utT8GaN7S/+rnCSkGFmxYoXZf+mn6NfY79C2Zfjw+CZGZ87s2coFnU0X2UGd
N3I8wAi6EL0IuEZwjza7X29xD3DyWFDz3PY7csZ7h3kH+57HhvnBgpw/8EF+
3JD5+0Lm1+A2Ezsu2PDxUm4M2oRvgAF63pJbNX/eTSYTuro6ba3H43HjDcgN
Huc2R2ISeR+3kRe5OTlW65z7XMPJQe3za1RHv1X3WvgImCgsLFAeXmB8Zdeu
/OTk8ZycbMMIsgR83HTjjTJzxnRpamwM/DGpY8h+DzGV5Ep2Woyyt08M27IG
R+GD2AP8ifiQLE5Rz7vxe/YYPf8ZO7fK16s+k7RtG/WcRuWeu+6QZ5583Pq5
4Vtnr6FXdkL3BfraEVtGXb+nn37aMOL9f/sDIz62cdOmTRbjiT/RfvnvL7Zx
hH7Fmnh78VsWi9hifo7mZH8nOJ7V3MFnTixRUGs91eeBbuX8uy4u3cXkBrl/
cI7BxIhrDz4G+2ImP/gqg5a/1Kk6VyjQoZyu5GILHW9gvcO/wQWT9Y4tAZ0a
uyzD26aQE553Iy8cN3G/NZWfn6t48K/HpwePpWcTtejXrFlt3MPJiuGJ/ECu
wE+RLdnZWcbV8/JyZaFyYPpwEIcB97/pxrny5huvWb+COrhbvGvERegxTt4d
6FUj84o5eg4SsxpZgR1M95WC/Cx5YeHTFl95wnHHKT4+tzowToftNk5HTXpy
11yt/CrDB3IQPeG1V1+V8849R+bddNNuPdz2B0boI4ovjb9FzS2Pjd8RRnr9
eiHmjPg26mC4WN3moDeg619jNdYjTmagYzn9yuUx+H4DfRZLEjFfltU7G3S1
oOGUnnOk1hnxawAOYjl7pncMWM4fMbrtissQNa5VhsG1wQd+D+ff4xwPBbfF
6jfCq994/VW7D25isah4zg6u3OsHbcLpGciA8wJ8sG6sx+D06XK9Tvwi2LLg
6sQfuf115HQ8vdLkCPoVcqS+vtb4+tatm+XDD9+33nJXXnG5xTuedsrJ1hv6
jttulXcWL7J4wob6quC3+zFkvB0O4vKG3W8k/+v7dautJhe+R7BMv1D85TWV
xTKor0e3ot6Fxfyge9EzqMP1WrH6x51h+yz41VuLFpmcRf9ib8QnUjOqh9u/
qmvxmcRqsedcfOGFxnkYvxNO0uuxTB1w8o655k0NdVZDNxxyNRDpRcB5xmbS
bDkfjebrsL7g0VCyxrrPnx7o6zLfHzbJro6mIB5xWLc23Ur1CfTlAc9TqcPT
E9c9kvi9cGCXjem+1mA5G/39LsfQ+wB9DJXzcbhYwypdq3DrLz7/zO6jZ7nh
YvWdzBgybMDRGez3rDPG119/bfadWddfb9yD2jdcX3gZe+vwtd8dI9i2kDPg
w/H0MrNvVVf7CZffJRs3rpN3312sa/weufbqq0zOnHH6aYaZu+64Xd5/723L
JzcZIG4NZWXusFhgcklOO/UU65/79Zef2zXx+iZyuyuoic97qZkPPmJd7UFt
gDaLf6AOBnbwxYvetFxzBna762fMsO9SXFQ0Zj34f8W25WMbqf2LnOdcMn4H
tq3e1DwobP70XW6oq3G9bMLsQXWWs4bPvLqqzHyDoYCPIztG4CPg5T7+tKmh
Msh3SIzAh+nNVkcnbjURWhUD5PmR10curLNDDZrfAD2LtQxe0Kvg3MiQYX/5
UPBahxHWOzEPxFcyPCZS8cH0+MDGiR7FeG6hy/lAdsxUjIALv//tfu3LkzoW
s0JlCzwEOVJaWmy6FhOfCXFb+Njxj9TUlOv6q7Z+i5zPvNwsi7cFF48+8pDx
Fjg1dd7Iy3pQZQ/xhsQTf6WY8LLEjT7zy+IvBBvNDVUm46mLj0/K2VLaAt9V
m+17rrZ+k6xa+bnJDe/PY9D3i/gE/Ov4xvenbcvHNj715JO2h9EnjvEbx0gS
H7ffdps8/NCDun93WT9y6y2rGGEfws8EP+ca4Bc0H0fE6VYuVrdjBD6szmFQ
nwTdymrtDAbxFINObiAzOrGDxTstpr3H+DffZThvg1xA5wf363rAsOH85V0B
VrxckaTOhCz8y5//LF9/5eoCggt0Lf+8e8zxrkgkIt999509htzA18zx1vnz
k+tjN95aXiEuxiTgIGWlNjMUT/hT4CP4RLBpuZitUsMHcY0+l6qstNDiZNgb
mlVnpdfHW4teV64yx2JAqHvy/pLFqofdYvW3kC/oVNSJePih++XTFR9JUUGO
6bkeM9iweoJ8dYv7sd4qVXYdwQg5CqEgzjQvJyuoKVA9om7sG6+/bvsL/aLb
dD3vV/tvkLeLTQvb1mfBHvYbjm1M8g/0iY+WLrU9GttVFz3Jm+rNH9jcUJus
TUItW/qK+14dqfjoT8EH2LA8wX5s9S5mAp+x1RghPgJ7pPlAXOwIvBybVaq/
w8WbD8ekD/s2vA/QYyWS9PcxGVs2b5aXXnrRfBfokOhaY/FCb3dEx2A/vfrK
K61/H7XSkB1c21TdiuuM7lFSXGyywtuz0K9ysrNNx6KOhcNPWVLXcrG/JcpN
qqVN9aJ65elbNq+X5xc+Y3Up8CdiqyaffO23X1t+GHnG+MsryoskO2unrPzi
U8tJnHfz3CT/wF89feoUefrJx2XV5yus5xv+Q5cfoL9Nzy39upAf1AugbxE8
PdTaZLaDdWuHfRQeI6tWrrT1+96779p63p/2X/BGbMuaNWtMLr704ov2N3+j
PUnMfoV/4IzTTpPNmzfpnk5eYJX5PTifTPahWKfzO4GRWtULfB0f35PA98m0
eCHFDpjw8anYZ6hVjV7maxR6/Yojdlx4h7dhgQM4x+Cglw0DY0wvU5x8QI7g
DwEn2Hi5TR45/g8G98n58tch1S6Rn0dNrxrTrS447zzjYfgJicEoLCy0Ojcc
C8y+66b3hyA/4B9gomDXLsnNzTG5YjFapSXJmF+Pj7WqSz264GG5ROUBtRum
XjdFXnv1ZdmZttVsT/hfa6pKpagw1+pR83hJUZ4UFuQaTpoa6QFcrd+3VHKz
0+SrlZ9a/7c5s2aaDgb/pybRrOtnyHP6+Herv9T359teR6wJ5xr9amig12pP
UFcUXLA/cE68vkPcIXoQ+hD+jP1t/4WPZGRkmN3tzjvuSC7I35hty/DB2mAv
In4N3wf6FXtOpe594SCWnZge4+OKB2xYxBf2BjG7yT6yAfcg723Qejh1WG8B
q3eruHCx262uNo/0DMdXqMwgt9xquhGLaLIDbj1adozGxzCfSB34N6grzzVH
v37h+eetPwy34SHYbDiyL9A3nNw6ahiRp71Z5Q71t9esXm37JlggL5XJdWWN
IE9S7bx+IjvycnMNM83NTbpPtpj8cNPpVuhHM6ZPVR3jHcnNyZQWzqXqWDXV
KmtU56LnWk72TrPdUocO/7fVf0vbZvG41IAoKswx/JSV5EtNZYn16qGGL30M
t25aLx8seUeefHyB+QepX8K1PVcxP3vm9fLi8wtl5eefmp4Ft3n4oYdGnDsw
4jkJvxUeRMzR/rb/cm6J2eLzkGPEunE9GL8h25bhY6fyMfbMpsZ6q8FAPEmV
7nlwDmKuujqGe9v42m91ej3pEZ60W5Er2utkR5flPrVYX4L+oKaN5+V9QU31
7iAOz+fKIj9cnOuAcRL8HT8sO0bjYxgnyA2nZ7n7Tzz2mOUDhsPOtpkqP/AP
Tp0yRRY+84zZPMMdHXb9kB0cfb429+Hyqfw8lXsgP5joc+hZy5d9IvPn3Wy2
423btlgsJbUcmC3UQWquN34ODyktKVTZUGz4KFI5QY0FZEaFrveykgJ9vEBy
stKttwHT6qQoNorBiXKQQsVS4a5slSc7rfZvmfIb6gvV16ouqK+lp+LSD96T
e+6+0zg/dnx41nHHHC3nqE6JHoUtoqOjY7cFAj9j/V5x+eWWe8g52J+2LfgP
9jJs6nwvcrcYvxGMGD7YO7FPk2fu6/dUqH5g2MDPOwofTGQINRG97QrfIJNc
QqtBQqxdSi+O4ZgSp1tRBxe/R3+/q6PebbV4XHyJj7PyMeo/LjtG4gM/n7NP
Dftr77vnHvNTITs83+DIWr5G9y78gdiv8Psia7wuwZFruGXLFl23GSm2rHLz
rbe2tug1bbQ+TtSzIBaetYdMul85zFdfrjJ7lpch2LCQI+CiHJuW6lzMosJ8
qz+CvAAnu/KyrPYD+CguzLV61NwvUBzARaiLCkZK6Hmokz5wmenbFSvZJnvS
07ZYLcqCvEyrA8/nkktI7R/mpg3f677xqO0bxJmdqWuT83O5roN7777buCj1
e/2ejg4ER0XPxO+3v+SI/xw4yf333Wf5KvgUGb8B25bhA10bXxh+aOzj1GSv
LC+xWn0OH23J+FAfd0U+DrEkFpOosgC7ifWCwhdoPvLhfI+kXTeIubKJDxh/
VlDvkFg+8DEcSzK4B4z8EDYcPrBVef84w2MEGz/1tRkeH3AG9Cp86OwT5vNV
PuLxwfVjT2PdEHeHnoGuhW6VlrbDYq1m6ueix8Apnnj8cYtp5Hlihhsa6gwb
Lsa31ORHRYAJZqmuf/q/FxXm6TkvTs4CdKlCJ0NY7wW7cuy1pSobShQX1idH
5QXYoMdhVsZ2ex34QAYhS6hjwv1dqp9lBn2nqCNHL1yw+bVi96ILLrD9m9/L
HrBkyRKLwb1SzxM4p+4JvkN6e9JTmrxK4kbYJ/YXH0mNbcSnT2zjd99+a9fp
V5Yjhg/2Tfz/xIFTjx18oGNhB7SalqPwARYsX033f+orN6nui82E/rLkS1tM
IrFWe8KH5V0ngvrRfYaJSMT5y6nPNlxbYWAMjPwwPsCFiyVxw+tSxCZyRJci
xsyPUuUUkyZOtFgQ+CI2KzDD9fK+LdYC6//7desUH62GkdWrvzHdCY6LrLhx
7lyTI8RB4k93fg/Hz5uaGpL4sFxcw4XKiPwcm6zVKvLY4fDIFOXh4ACZwX3k
ABzbsKGcpKQ4z2ozFhZkW/9nYq/oRYKuVZCHrpVjWEGe2H2d9FQHH9Qg3b5t
s+Xcrv7mK7N/IS/Rm/jt/Db8FD4Hd+OGDeZnx/6PT4j4gttuvfVH+4v8VE7C
38Z3BUbIcWf8irGNho8HH3jA9ozOzrBy9SrLpyXuqtFyalsNH7FU+RHUFkd2
UKfM+nkoX+8O6pMk8THwA/gYCmqoJ2O/B6xGFbVAfR5gqt9j2A+yZ17OwMcB
PjinyGfkBBM7lefm2HFvmTfPnCAFqi8Qy3ql6g7YKcrLyoxjgwv4I5yUGs9m
21IcoENh/yQua+vWLcZzqHnzxOOPSXs4ZFyEeEb8lPjP09PTlIu/G/CVEuUO
BVZzi5zDstIi5eXlhhf4h8cHMgOMoGMhQ6gZir23pHgYH0z0q5zstKDubrrD
h8oLuAi3qYdPr+gC1dvof7B926agF8I2q0FKPBj48Pm2fk9gnfp61ZwDdE7W
LXLG2/P2pRbjvtq2WvTvIcs45wseeSTl2v7iti3DB7olvT3oB0Wtkqb62mTv
cmyy0ZTcNC8/6HGEndfXHm9pqDKsDAS1334UH8RjBfgYCuKuOoO4RGJJqDmC
D5C4K+7j7xjO6/DD+cHh4+jJ6FXhcLtdS7DAjMViSXsV/BPMdCnnxKZz/4IF
+huq5O9//aucqfhYrut+244dxjNW6h72oPKHK1WvoocT6+gM1TfIISVXFXsL
cX0PPfig6l6Xmh10w4b1ZveFp+MPwZf0zjuLLW4DOZKTk2V1HchbqUTXUjyg
JyE/HD6KkvjgiJ5EzwI4R3kKPpAjcHNkB1jAjoWMASeFAT6QH2DDZIjiA70K
3u97Tu1M22491ZGL2Oz2lE/odR+PGfaNfa0x91PkCHoutkP8DuQ4ez3rF8aI
4QP73bPPPG16ALWtWpsbLLYEGWI2rCQ+2sw3a35CYttb6l3vmy6nZ9G3GB0L
O++QxZOMwkdQs2M0Pnw9xLByHWrjehnhfYDIE/Jm8QW6/D+HBXx+2Fe4jf6E
nAAPvr9L6uD8eh0LudGk+sPN/zxbWk8+Xb49/Ei56eBD5cK/HyhnHnucnKw4
+K9DDpY/HXywPKh8Yp7qE8Qo3qD6xY2qm81VDj5N9TR0NXjb5Guvsbh48lbx
vVOrgP3my1Ur5e4775SbFUc1yOXaKj3HdeYjpN4FaxRZxl5OnnhZSWESH/By
4t6o24gs8PKD+lpw8ZxAnypVOQJ/Z9KXBx1qV15mkouAGXBCf2jsxDlBPx16
e9K3EOyiQ9WpnNgbPrE//SA/hhGLl1SZftWVV5oO6+2PvyAnsYWE7owfk9oD
6FYh5R1gw9UrcTLE18qw+rqWex6yfFrLW8NXbj0FIxYPBEaIL0nWzzTZMRY+
4kn7LjUGfe1ob9clx8PlkMfMz+dkQ5vp+GAj1YbrB3IkdY9J7Q3ne34nn7tx
voT/139L4vBJ0n/YkRLRWX7w4bLhwEPlg8MmyCNHTJTrjpggpx52mEw6+mg5
UrnpMWecIWdfcrFcqvwVP/t8cj2mTpVZytHhNdjC4LbE63K8fsZ0mzfOnWNx
7+8veVf16+UmOz5e+oHrRdPSIHW1leYbhIdgn+X43jtvyVdffmG2Jx4rVQ6y
Sx/PevklKXr4ISlvqEzadwsCnQr5QEww+HD3061uNfwjtd8UtUc3rl9nf3/t
2rWmR/0S635fppdXcCH2cHwxxLkxfiHbluFj7pw5VsOoqbHBeqaFk3kfrUHc
TnVQY7fN/OBgozvo0Uy9GeryUzN2IIgtIb+N+JJYpNX1urQ6NsN1nkbw8yCX
jt4b+M67utqDem6dSf0KLuL0KzfgGPgAkSVOj4ok8wGRJ+wvYGK0LB5UrNTp
nvTu22/LHOUfFaf9QyJ/PVhCE46WtiMmSeiwiYaRHp39h060GdPZoHPnwUfI
soMPk8dUzkzXefaEiTJp0iQ58uST5BiVNyedeYZceOGFMkUxM111sLmzZloM
Oz458EEMCT2GsJ9hSzfMzLnBevAseuM1WaNcGY4At64PsIJvefknHzldS+UD
fQdz9Xbh3XfL1v/vvyRd9b/SSnyXeSZTHFayA3+i+yzsWBvXrzU+bv4Ts++m
mz9l88b1ljtC/Jm3Yf3amNiTvMKHjw2Nnr7kzv9CGDF8zNe1go+5oaHe/II+
NtHjg/yaJusFVZv0oRMz2p/otDg45MhQgA8fuwseqL/Q2dGUrDuQio+k71z6
zS9I7wHq8JDvge98mG/4eHY3fR2eEet+cMDiS5AdcA/v4/DnkH7H2GYvu/RS
i68mF/udpUslvOY7CU86Ttr+628S/s+/So/ioOuQCdKqM6R4ATPthx8lXYqX
xKFHSp/OAb3drbNFZ/7Eo+XL406UF44/UW4640y5UDnKiYqTI085WSYcf5yc
pboTeehXKT+ZrXiYOWOa1b0m9xZ9bPq0qdY/gdhD+Mz106cpnmbIk8r133rz
dVu79BnEtss0H2K17qmXXykzDzlUHj3gQKm8YY7sAh/Uj1eZAac3eaN6WLr1
lNom27duSsGHYiMzzeTJ+u/Xyjln/9NqUvwW5UcqRnxPkg8++MBiw1YsX27X
92eObTR8YLuDf6BfVSmPpLdMR2i4Hy2xV9RpBwsuPtT1sscvSP1k6ovD0VPx
MdTnejGTF0qdzJjV68Du2u1m0DsQnQq7bsRq6bq4RO//GMvvMZzb5Gy58PPR
eOF8YaslrxMbLPGw2K+XffKJ8T4/evR1XfUN0vHNaul8/kVZe8gRUqtrPoE8
+Z9/lvY//VXa/3awtCte2pEvYEbxElJsdCJb9PHeQyYaZnonHS8dp58lZRdf
JuuvmyaLZ82WO6dNkyuUk5ys6/woxcwkxcyxxx4j5yiOrlKsTrnmapl9/QyT
MTMMGzOV0zj+f+st88zXDV7uuuM2eeG5Z2Xpxx/K+lWfS+YJp8jZuo9+OOlY
qfn7oVJw1TVSonKikJ49yt+Xf7LUYuXh7zu2bTZOgi8EfDhbcZ75QzaofkWN
4B/i57+l6WMbkXfEhr3w3HPJ6/0zYcTwcd8998qjCxZY7keJckRiE8NBfRh8
6OSAUGOJvCjyCnqCXvYJxQj9iK02O3lRHh+9QY+9/mHOQfwuGOkhV7QvarnX
TPCQCHQrVx+01+La9+Qzd7pV726YYGDD3bp1q1ykeg6+LfI61uq53I13+PM5
6pR+snKlHKvrruSLVdK/7FOJ3HmPdJ1/sYSRIypj2v/zL9L+33+X8EGHS1g5
ffuEADOKj5BiJfz3wyR6wCHSc+DhMnDksTJwxj8levVkqb/1dkl7ZIF8rFx/
wf33yRSVH2cph5mkfGbikUfKCYqZU084US4691zDDDLlvnvvtiOx7Rzp73HJ
hRfI1Ouny+yDDpHLJk6UhyccKYsnHSPfKEa2nXOe5G1cZ3L4njtvt9wr4qzB
B/IjU2VJXtD3ltrV1P3e8P06i+nYsWPHv1xP8ZfECL6XrKws4yP4Yvz4GWxb
hg/q6SFD8A9in0e/Ah/ERBOnaLGfgW0Xu5XVCDAe3uj6U1BvX58DFyPxEU2p
L5swfYs67cxE0E+WrxCLhYOv4mLbkSkDAz4HyvkIyX8ajQk4OzaiBY88LDt3
psknKh/Wq66QlZlptqzUwbkDP6P7uzSoXvHKiy/q93Y2r/eWLJGJqvc3+B4X
fSqfauuk99vvJPHMQolMniYdx5/s5Mr/+ovhJnzAoRJWeRJWudOu0zCjeGnT
ddv+lwOl678PlO6DjpCBE06VoSuukb677pXQy69IwYcfyqr335OFL74gc+64
Xf6pmDnq2GMth/Eo3R9PJ39dZc81KkfQvWYyVUebrXrVlIlHypVHTJCr9LVX
KMamHnSw3DLpaHn5pedNFj143z3Wbw37bnaG86WTb/LRh++bjgkPWbP6a4sr
wT/o/eE/ZLvd3/7Anzp9bCPfF58UOQno1Ha99q9tyxYF/lF8o3DistJiy8NE
hpiPMOgV5WPbXQ56rcXogg+rRR0NDetYo/AB36AuDfGK8XjYdKxBxQsxvTFq
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
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
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["6", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Physical Inversion: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Total Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12000", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Maximum Likelihood Acceptance Ratio: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["0.9090909090909091`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Sampler Acceptance Ratio: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.5681818181818182`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Sampler stepSize: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.021521056298368132`", "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumStateEstimation[<|
   "Invertible" -> True, "PhysicalInversion" -> True, "InversionState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {2, 2}, 0, {
       1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
        0.47525, Complex[-0.01675000000000002, 0.4982500000000001], 
         Complex[-0.016750000000000046`, -0.4982500000000001], 
         0.5247499999999998}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {2, 2}, 0, {
       1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
        0.47525000000000023`, 
         Complex[-0.016750000000000084`, 0.49824999999999997`], 
         Complex[-0.016750000000000084`, -0.49825], 0.5247499999999997}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodAcceptanceRatio" -> 
    0.9090909090909091, 
    "MaximumLikelihoodConvergence" -> {0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
     0., 0.}, "MaximumLikelihoodConvergenceStepSize" -> {0.125, 0.11875, 
     0.1128125, 0.10717187499999999`, 0.10181328124999998`, 
     0.09672261718749998, 0.09188648632812497, 0.08729216201171872, 
     0.08292755391113278, 0.07878117621557613, 0.07484211740479732, 
     0.07110001153455744, 0.06754501095782957, 0.06416776040993809, 
     0.06095937238944118, 0.057911403769969116`, 0.055015833581470656`, 
     0.05226504190239712, 0.04965178980727726, 0.04716920031691339, 
     0.04481074030106772, 0.04257020328601433, 0.04044169312171361, 
     0.03841960846562793, 0.036498628042346534`, 0.03467369664022921, 
     0.03294001180821775, 0.03129301121780686, 0.029728360656916513`, 
     0.028241942624070687`}, "BayesianAcceptanceRatio" -> 0.5681818181818182, 
    "BayesianSampler" -> 
    Wolfram`QuantumFramework`QuantumStateSampler[{{0.4748648881708468, 
        Complex[-0.011716426303459515`, 0.49806714515417577`]}, {
        Complex[-0.011716426303459511`, -0.4980671451541758], 
        0.5251351118291475}}, {
      SparseArray[
       Automatic, {2, 2}, 0., {
        1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {0.5, -0.5, -0.5, 0.5}}], 
       SparseArray[
       Automatic, {2, 2}, 0., {
        1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {0.5, 0.5, 0.5, 0.5}}], 
       SparseArray[
       Automatic, {2, 2}, 0., {
        1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
         0.5, Complex[0., 0.5], Complex[0., -0.5], 0.5}}], SparseArray[
       Automatic, {2, 2}, 0., {
        1, {{0, 2, 4}, {{1}, {2}, {1}, {2}}}, {
         0.5, Complex[0., -0.5], Complex[0., 0.5], 0.5}}], SparseArray[
       Automatic, {2, 2}, 0., {1, {{0, 0, 1}, {{2}}}, {1.}}], SparseArray[
       Automatic, {2, 2}, 0., {1, {{0, 1, 1}, {{1}}}, {1.}}]}, {2067., 1933., 
      3993., 7., 2099., 1901.}, 0.021521056298368132`], "TotalCounts" -> 
    12000, "CountsPerMeasurement" -> 4000, "Dimension" -> 2, 
    "MetropolisStepSize" -> 0.021521056298368132`, "MeasurementOutcomes" -> 6,
     "Properties" -> {
     "Invertible", "PhysicalInversion", "InversionState", 
      "MaximumLikelihoodState", "MaximumLikelihoodAcceptanceRatio", 
      "MaximumLikelihoodConvergence", "MaximumLikelihoodConvergenceStepSize", 
      "BayesianAcceptanceRatio", "BayesianSampler", "TotalCounts", 
      "CountsPerMeasurement", "Dimension", "MetropolisStepSize", 
      "MeasurementOutcomes"}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8900117940207567`*^9, 3.890011854119836*^9, 
  3.890044258262048*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"74453d4f-5592-4897-b3fe-04ddf969dd5e"]
}, Open  ]],

Cell["\<\
Generate 100 states using the corresponding Bayesian sampling function.\
\>", "CodeText",
 CellChangeTimes->{{3.8900132821005573`*^9, 
  3.890013310578074*^9}},ExpressionUUID->"409c0e82-b956-482a-b4c6-\
54642bfd6686"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample1a", "=", 
   RowBox[{
    RowBox[{"est1", "[", "\"\<BayesianSampler\>\"", "]"}], "[", "100", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.89001186206511*^9, 3.8900119037859983`*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"4819c45d-d598-48df-ba22-3ffe40a4e459"],

Cell["\<\
Show histogram of fidelity with respect to the original quantum state.\
\>", "CodeText",
 CellChangeTimes->{{3.8900133160099287`*^9, 
  3.8900133414767303`*^9}},ExpressionUUID->"c205a40a-0ec7-45f0-b5b8-\
85a06ea93db0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"QuantumDistance", "[", 
     RowBox[{"#", ",", "\[Psi]1", ",", "\"\<Fidelity\>\""}], "]"}], "&"}], "/@",
    "sample1a"}], "]"}]], "Input",
 CellChangeTimes->{{3.890011906593874*^9, 3.890011943664322*^9}, {
  3.890012131186379*^9, 3.890012134478785*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"454440b1-4492-40d4-930c-2891a5d3542d"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.644], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.644], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.025, 0}, {0.03, 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{20.269607843137265`, 75.09967320261435}, {
           72.39707844876901, 92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.03, 0}, {0.035, 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{74.59967320261435, 129.42973856209156`}, {
           67.5178004623723, 92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.035, 0}, {0.04, 29.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{128.92973856209156`, 
           183.75980392156865`}, {-49.58487121114868, 92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 29]& ,
        TagBoxNote->"29"],
       StyleBox["29", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[29, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.04, 0}, {0.045, 40.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{183.25980392156865`, 
           238.08986928104574`}, {-103.25692906151247`, 92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 40]& ,
        TagBoxNote->"40"],
       StyleBox["40", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[40, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.045, 0}, {0.05, 15.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{237.58986928104574`, 292.4199346405229}, {
           18.725020598405223`, 92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 15]& ,
        TagBoxNote->"15"],
       StyleBox["15", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[15, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.055, 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{291.9199346405229, 346.75}, {57.75924448957889, 
           92.41419039435584}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.0244, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0.025, 0.055}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.890011933607544*^9, 3.890011944912717*^9}, 
   3.890012135509432*^9, 3.89004426350313*^9},
 CellLabel->
  "Out[323]=",ExpressionUUID->"0bd71f46-84de-43ea-8b4c-bb2500f06789"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.890013487421958*^9, 3.890013578170562*^9}, 
   3.890044333244647*^9},ExpressionUUID->"3decd4ba-6019-457a-8ea4-\
bc4d8cff5c5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["KS Test", "Subsection",ExpressionUUID->"53f3d430-cbde-4f71-b303-2ad930228d3e"],

Cell["\<\
KolmogorovSmirnovTest performs the Kolmogorov\[Dash]Smirnov goodness-of-fit \
test with null hypothesis \[NonBreakingSpace]that data(in this case \
measurement of right state in x, y and z basis) was drawn from a population \
with distribution(here simulated measurement in corresponding basis) and \
alternative hypothesis \[NonBreakingSpace]that it was not.\
\>", "Text",ExpressionUUID->"9221657d-0a1f-414e-9994-34eae8c0770e"],

Cell["List the qpu result of different basis.", "CodeText",
 CellChangeTimes->{{3.891434744019013*^9, 
  3.8914347498690567`*^9}},ExpressionUUID->"a3702e92-6a68-45f5-ace2-\
18f2938c09c2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qpu1z", "=", 
   RowBox[{"{", 
    RowBox[{"2099", ",", "1901"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu1x", "=", 
   RowBox[{"{", 
    RowBox[{"2067", ",", "1933"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu1y", "=", 
   RowBox[{"{", 
    RowBox[{"3993", ",", "7"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.890234758875648*^9, 3.890234758885458*^9}, 
   3.8903327434065037`*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"903cb603-0c01-4810-9bce-87cb3546d1a5"],

Cell["\<\
Generate the simulated measurement on right state in X, Y and Z basis.\
\>", "CodeText",
 CellChangeTimes->{{3.891433691096861*^9, 
  3.891433699506559*^9}},ExpressionUUID->"eb245c8c-bcc4-481e-8abd-\
8564a8af4e05"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pz", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<Right\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"px", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "\"\<X\>\"", "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<Right\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"py", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", "\"\<Y\>\"", "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<Right\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8902347707561207`*^9, 3.8902348310986423`*^9}, {
  3.890234889108324*^9, 3.890234906909772*^9}, {3.890332801510425*^9, 
  3.890332808942692*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"bf9dfc61-f986-408b-8161-acd8671819a9"],

Cell["Extract the X basis result", "CodeText",
 CellChangeTimes->{{3.891433702707513*^9, 
  3.891433716488792*^9}},ExpressionUUID->"f74798b9-40f6-4606-aab6-\
fb890e79e09a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataX", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "\"\<X\>\"", "]", "[", 
  "\"\<Names\>\"", "]", ",", "0", "]", ",", "px", "]"}]], "Input",
 CellLabel->"In[37]:=",ExpressionUUID->"eae9f37e-818b-46f4-90f9-e293db883e62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2005", ",", "1995"}], "}"}]], "Output",
 CellChangeTimes->{3.891433659473822*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"08352b80-b73a-439d-9f81-b6087926ca60"]
}, Open  ]],

Cell["Perform the KS test.", "CodeText",
 CellChangeTimes->{{3.891433718610106*^9, 3.891433729446566*^9}, 
   3.891433775460144*^9},ExpressionUUID->"373a00f5-956d-4417-b0eb-\
1aacebb40161"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu1x", ",", "dataX", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"7991bb53-72ae-4688-a679-bd66d60b995f"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.890235494987208*^9, 3.8903109054748287`*^9, 
  3.890332849223465*^9, 3.891433662645678*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"1f64105f-2da9-4a35-9aeb-0a7b9f77cef2"]
}, Open  ]],

Cell["Extract the Y basis result and check the KS test.", "CodeText",
 CellChangeTimes->{{3.891433742312031*^9, 
  3.8914337633243303`*^9}},ExpressionUUID->"9bfd1277-bf74-4b69-ba30-\
2748b02c2bc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataY", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "\"\<Y\>\"", "]", "[", 
  "\"\<Names\>\"", "]", ",", "0", "]", ",", "py", "]"}]], "Input",
 CellChangeTimes->{{3.8902354474138193`*^9, 3.8902354562941017`*^9}, {
  3.8902354884895563`*^9, 3.890235490844363*^9}, {3.8902355316451597`*^9, 
  3.890235545957773*^9}, {3.890332865942892*^9, 3.890332870925157*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"cd743fba-4f32-4d8d-a0a3-14a3cda42634"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4000", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.890235450740218*^9, 3.8902354570616837`*^9}, 
   3.8902354912097683`*^9, {3.890235541594885*^9, 3.890235546170573*^9}, 
   3.890310924988802*^9, 3.890332871373041*^9, 3.891433665317337*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"fa58f7c5-f9df-40d9-9c9e-a586d93ed049"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu1y", ",", "dataY", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}, {
  3.890235549769836*^9, 3.8902355517966757`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"b5363df8-28a0-4c1c-98f1-382b5b7d8e2b"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.890235494987208*^9, 3.890235552146975*^9, 
  3.890310930820805*^9, 3.890332874380475*^9, 3.891433666880365*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"419f0f34-110e-41ea-9221-ec97da3574a5"]
}, Open  ]],

Cell["Extract the Z basis result.", "CodeText",
 CellChangeTimes->{{3.891433767082117*^9, 
  3.891433794183961*^9}},ExpressionUUID->"f109e822-6c0a-4741-82b6-\
7f4db8d83b99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataZ", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "2", "]", "[", 
  "\"\<Names\>\"", "]", ",", "0", "]", ",", "pz", "]"}]], "Input",
 CellChangeTimes->{{3.8902354474138193`*^9, 3.8902354562941017`*^9}, {
  3.8902354884895563`*^9, 3.890235490844363*^9}, {3.89023555991247*^9, 
  3.8902355617388144`*^9}, {3.890332879805538*^9, 3.890332885847872*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"a0ea24b5-e7f6-41a0-ab69-64a49b73aabb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1974", ",", "2026"}], "}"}]], "Output",
 CellChangeTimes->{{3.890235450740218*^9, 3.8902354570616837`*^9}, 
   3.8902354912097683`*^9, 3.890235562253984*^9, 3.8903109365271273`*^9, 
   3.890332886505034*^9, 3.891433668135728*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"171f7ead-a718-4325-adaf-ce85498407e4"]
}, Open  ]],

Cell["Apply KS test.", "CodeText",
 CellChangeTimes->{{3.8914337974295807`*^9, 
  3.891433815299611*^9}},ExpressionUUID->"e4675524-f026-49a1-af44-\
ab1f629c5965"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu1z", ",", "dataZ", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}, {
  3.8902355640183372`*^9, 3.890235565675729*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"dc1dff2e-8625-4bd0-a42e-fd2f2432e045"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.890235494987208*^9, 3.890235566242085*^9, 
  3.8903109391181192`*^9, 3.890332888494383*^9, 3.891433669339036*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"edcf75a7-001c-4702-814d-1dbdb0c6a9b1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Phi]", "+"], TraditionalForm]],ExpressionUUID->
  "4986cc61-bfaf-437a-8178-ee2ed0891b9b"],
 " state"
}], "Section",
 CellChangeTimes->{{3.886584543943859*^9, 3.886584554368469*^9}, {
  3.886584585548459*^9, 
  3.886584606567541*^9}},ExpressionUUID->"2bbdbd74-3b3e-4715-8e2f-\
6f8c923a43f4"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Phi]", "+"], TraditionalForm]],ExpressionUUID->
  "2bcccb69-f6e1-4576-bea5-71d90320032d"],
 " state, also known as the Bell state or EPR pair, is a specific example of \
a maximally entangled two-qubit state that  exhibits strong correlations \
between the qubits.\nMathematically, it is represented as: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[{
      SubscriptBox["\[Phi]", "+"]},
     "Ket"], "=", 
    FractionBox["1", 
     SqrtBox["2"]]}], TraditionalForm]],ExpressionUUID->
  "04a259e8-2984-4239-879e-44c6f6d12783"],
 "(",
 Cell[BoxData[
  TemplateBox[{"00"},
   "Ket"]],ExpressionUUID->"696c4f45-48d9-4f3f-8add-97ce78cc72a6"],
 "+",
 Cell[BoxData[
  TemplateBox[{"11"},
   "Ket"]],ExpressionUUID->"bc9c83cd-bbf4-4e06-a941-9d6107e4a27a"],
 ")\nThe amplitudes of the basis states, ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SqrtBox["2"]], TraditionalForm]],ExpressionUUID->
  "95dc3c92-3ea4-453f-8eca-8d9fada35385"],
 " for both ",
 Cell[BoxData[
  TemplateBox[{"00"},
   "Ket"]],ExpressionUUID->"29b8e675-2a1d-4c94-98e3-d2dac1a1392f"],
 " and ",
 Cell[BoxData[
  TemplateBox[{"11"},
   "Ket"]],ExpressionUUID->"5fec813b-beb0-41ae-8a83-10dc16616425"],
 ", represent the probability amplitudes of finding the two-qubit system in \
either state upon measurement. In this case, the probabilities of measuring \
the qubits in either the  ",
 Cell[BoxData[
  TemplateBox[{"00"},
   "Ket"]],ExpressionUUID->"892eceb6-e962-48dd-91f2-7d641834921e"],
 " or ",
 Cell[BoxData[
  TemplateBox[{"11"},
   "Ket"]],ExpressionUUID->"5c6ae350-e2bd-42f6-bbd8-c9984c30be40"],
 " state are equal, each being ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "2"], TraditionalForm]],ExpressionUUID->
  "14a0c43e-3fe7-4ac4-ac79-77e253b1ccd2"],
 ". The absence of other basis states, such as  ",
 Cell[BoxData[
  TemplateBox[{"01"},
   "Ket"]],ExpressionUUID->"67a18397-8560-4376-956a-f9f31f9b5849"],
 " and ",
 Cell[BoxData[
  TemplateBox[{"10"},
   "Ket"]],ExpressionUUID->"89666eca-d77e-40bf-ae60-2c1af5855292"],
 ", indicates the entangled nature of the ",
 Cell[BoxData[
  TemplateBox[{
    SubscriptBox["\[Phi]", "+"]},
   "Ket"]],ExpressionUUID->"4da2dc64-6b38-48d0-9279-e89a8eba6156"],
 " state."
}], "Text",
 CellChangeTimes->{{3.889790914083702*^9, 3.889790950904683*^9}, {
  3.8897909923261957`*^9, 3.889791241263879*^9}, {3.8897912854210243`*^9, 
  3.889791317563931*^9}},ExpressionUUID->"ca3fbc2a-cddd-4a52-afb3-\
15cf012aca15"],

Cell[CellGroupData[{

Cell["Define state", "Subsection",
 CellChangeTimes->{{3.886552717055009*^9, 
  3.8865527209438963`*^9}},ExpressionUUID->"ad5be213-9207-428d-9d0d-\
053f14c0ff36"],

Cell[TextData[{
 "Define the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Phi]", "+"], TraditionalForm]],ExpressionUUID->
  "4228e7c3-1ec7-483e-9066-b0b03eaf1bfc"],
 " state."
}], "CodeText",
 CellChangeTimes->{{3.889791329082547*^9, 
  3.889791343884757*^9}},ExpressionUUID->"c8f8a64f-1a41-4a92-a6f9-\
6824f67c5200"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Psi]2", "=", 
   RowBox[{"QuantumState", "[", "\"\<Bell\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8865527093950644`*^9, 3.886552709398883*^9}, {
  3.886584516694098*^9, 3.886584517657381*^9}, {3.886584613267748*^9, 
  3.886584625211287*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"33ed7ea6-09d6-4be6-b483-87c5eef3aea8"],

Cell[TextData[StyleBox["Create quantum circuit in different basis (Pauli-Z, \
Pauli-X and Pauli-Y basis respectively)", "CodeText"]], "Text",
 CellChangeTimes->{{3.886552758172372*^9, 3.886552764537179*^9}, {
  3.889791351900362*^9, 3.8897914373343573`*^9}, {3.8897915013490057`*^9, 
  3.889791504207713*^9}},ExpressionUUID->"6c2bfbc2-d745-484d-afe2-\
ff981c4c213f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qcZZ", "=", 
   RowBox[{
    RowBox[{"QuantumMeasurementOperator", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "]"}], "@", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]2", "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qcXX", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<H\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]2", "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qcYY", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"QuantumOperator", "[", "\"\<S\>\"", "]"}], "[", 
         "\"\<Dagger\>\"", "]"}], "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], ",", 
       RowBox[{"\"\<H\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]2", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.886552746992299*^9, 3.8865527776831923`*^9}, {
  3.88658463642314*^9, 3.886584691952565*^9}, {3.887724711684627*^9, 
  3.887724746854892*^9}, {3.887725135077166*^9, 3.8877251399005117`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"6ced4099-68ad-4541-affa-9a5435b66819"],

Cell["\<\
Decompose the above quantum circuit and convert in Qiskit format.\
\>", "CodeText",
 CellChangeTimes->{
  3.889791536654449*^9},ExpressionUUID->"e4b2b183-6e19-48de-b206-\
625618b17d4f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qiskitex2a", "=", 
   RowBox[{
    RowBox[{"qcZZ", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex2b", "=", 
   RowBox[{
    RowBox[{"qcXX", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex2c", "=", 
   RowBox[{
    RowBox[{"qcYY", "[", "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.887631694696651*^9, 3.8876317013257236`*^9}, {
  3.8876321974927683`*^9, 3.887632222271023*^9}, {3.887632301006503*^9, 
  3.887632308366618*^9}, {3.887666388248209*^9, 3.887666390747714*^9}, {
  3.887668313328479*^9, 3.887668322332066*^9}, {3.887668627813238*^9, 
  3.887668630657523*^9}, {3.88766919593882*^9, 3.8876692006704493`*^9}, {
  3.8876700714422283`*^9, 3.8876700742564507`*^9}, {3.887675974233006*^9, 
  3.887675978649591*^9}, {3.887676461574398*^9, 3.88767646753831*^9}, {
  3.8876792440350122`*^9, 3.8876792848074093`*^9}, {3.8876799576838703`*^9, 
  3.8876799699065943`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"a0fc217f-e87f-485c-ad9a-bcf038f6c9a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QPU ", "Subsection",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{
  3.483202458956718*^9, {3.514308604990972*^9, 3.514308608117634*^9}, {
   3.885374080523435*^9, 
   3.885374096259903*^9}},ExpressionUUID->"33dd8e22-a87a-4f95-8039-\
aac6592a1c42"],

Cell["\<\
Encode the converted circuit (in this case PauliZ basis circuit).\
\>", "CodeText",
 CellChangeTimes->{{3.889791561615643*^9, 
  3.889791585519268*^9}},ExpressionUUID->"d767c790-5f8b-4131-a37d-\
7684ebd3baa9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex2a", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex2a", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.887632422207745*^9, 3.887632424907255*^9}, {
   3.887666831663142*^9, 3.887666831963728*^9}, 3.887666995702601*^9, 
   3.887667822030875*^9, {3.887668359644808*^9, 3.887668364857914*^9}, {
   3.887668636730061*^9, 3.887668641904235*^9}, {3.88766921631632*^9, 
   3.887669221789707*^9}, {3.887670076670994*^9, 3.887670079841366*^9}, {
   3.887675990432712*^9, 3.887675998857706*^9}, {3.887676471231103*^9, 
   3.8876764774280767`*^9}, {3.8876793017940683`*^9, 3.887679363129356*^9}, {
   3.8877279672124033`*^9, 3.887727972169141*^9}, {3.8878728125247307`*^9, 
   3.8878728175943413`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"c274d21a-6485-4690-9f33-7bf4ef9b79b4"],

Cell["Send the query on backend and get its information.", "CodeText",
 CellChangeTimes->{
  3.8897916734273148`*^9},ExpressionUUID->"d335912d-0bf4-475f-b926-\
4e2033096cab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex2a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex2a"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.887667072681476*^9, 3.887667075376198*^9}, {
   3.8876680402116117`*^9, 3.887668042370393*^9}, {3.8876683698581667`*^9, 
   3.8876683726636763`*^9}, {3.887668646011137*^9, 3.887668654221838*^9}, {
   3.887669227849742*^9, 3.887669233238274*^9}, {3.887670083249711*^9, 
   3.887670086241091*^9}, {3.887676010770681*^9, 3.887676015478256*^9}, {
   3.8876764803899937`*^9, 3.887676483754882*^9}, {3.887679320077704*^9, 
   3.887679328041493*^9}, {3.887679369648963*^9, 3.887679392072727*^9}, {
   3.887798024092078*^9, 3.887798027050323*^9}, 3.887798104351062*^9, {
   3.887872821416492*^9, 3.887872827154611*^9}, {3.889334918682967*^9, 
   3.889334919336555*^9}, {3.889335491186276*^9, 3.889335492034807*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"afced56f-6a70-400a-ac58-d58be5c7a541"],

Cell["Check the job status. ", "CodeText",
 CellChangeTimes->{
  3.8897917469966707`*^9},ExpressionUUID->"eb497ff6-fa06-4e25-a18e-\
69c4380b745f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex2a", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[127]:=",ExpressionUUID->"2540953a-bc90-4059-9698-d52e6e7e618f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolg2rnv0iib9vsitdg", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIG7jQGDiCLFYiZoKIsSGzV5Myi5NLMEl1DIzP7n4q/\
Q1x0JfJKc3IKGcGaGIEmoAKY0TADmGGGJjOCRRkZk3HoYGBgg/\
IYGbCDoCj3xJJUsI1pUCEOCV2XkN+KP+\
3BmlGNQwXBEXDNlFtEnGZGSlzJSB2LmDD1gc10RgQHwjbiNDAiApEkG1iRZLEBsiKIMRUqpIWmRMot\
Jz+xREPdQM9AXUehoCg1ObM4Mz/\
P1tRYk1axAHOKOZoSdahTjPSMTc0MLU1MLA0MLY2MTejtLks0JZpQd1nqmRiZmJubW5oZmJtZGptbG\
uN0GUnJaejGIK6QMtazNDKztDSwMDSztDA3MjEwHCwuo0UcjpgMOxrdQz/\
Ljha6jAzsyLJYnOebmlhcWgRxH6QZRoIOhmSIGgD1LAHj"|>|>, 
       "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:03:23.856919Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolg2rnv0iib9vsitdg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:03:23.856919Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.88933492391206*^9, 3.889335497480585*^9, 
  3.889944205532364*^9, 3.889957097953905*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"a449c469-f389-485b-b5bb-83c8fbcecf0c"]
}, Open  ]],

Cell["Extract the QPU and WQF results respectively.", "CodeText",
 CellChangeTimes->{{3.889791794847012*^9, 
  3.889791817239189*^9}},ExpressionUUID->"bf75fa14-e964-4948-ad79-\
3fd19b4615cb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex2a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex2a", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex2a", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex2a", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex2a", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex2a", "=", 
  RowBox[{
   RowBox[{"qcZZ", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.887798130280224*^9, 3.887798131738863*^9}, {
   3.887798278313134*^9, 3.88779827913517*^9}, {3.887872835115821*^9, 
   3.887872848026224*^9}, {3.8893355756230993`*^9, 3.889335576092127*^9}, 
   3.889335690517089*^9, {3.890011968128537*^9, 3.890011972154985*^9}, 
   3.890347235014639*^9},
 CellLabel->
  "In[633]:=",ExpressionUUID->"771ddab6-0f46-4ffa-81c6-cbd89cae0048"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "1799"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "313"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "276"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "1612"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.8893355057911263`*^9, 3.889335579939097*^9, 3.889335693188346*^9, 
   3.88995711557343*^9, 3.890011979207335*^9, 3.890046844749456*^9, 
   3.890347237940576*^9},
 CellLabel->
  "Out[634]=",ExpressionUUID->"ff9f1cc2-e0a2-47de-958a-cb4b772372b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.44975`", ",", "0.07825`", ",", "0.069`", ",", "0.403`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.8893355057911263`*^9, 3.889335579939097*^9, 3.889335693188346*^9, 
   3.88995711557343*^9, 3.890011979207335*^9, 3.890046844749456*^9, 
   3.89034723795849*^9},
 CellLabel->
  "Out[635]=",ExpressionUUID->"c7e9fa3a-127e-40e5-9cda-77113788dfc7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1}, "Dual" -> False]], "\[Rule]", 
    "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0}, "Dual" -> False]], "\[Rule]", 
    "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.8893355057911263`*^9, 3.889335579939097*^9, 3.889335693188346*^9, 
   3.88995711557343*^9, 3.890011979207335*^9, 3.890046844749456*^9, 
   3.8903472381150637`*^9},
 CellLabel->
  "Out[636]=",ExpressionUUID->"8dec52c6-7907-45c1-b86b-64a578a655f2"]
}, Open  ]],

Cell["\<\
Encode the above converted circuit, send the query on backend, get its \
information and extract the QPU results.(in this case PauliX basis circuit)\
\>", "CodeText",
 CellChangeTimes->{{3.8897918547596827`*^9, 3.889791894232098*^9}, {
  3.889791930665406*^9, 3.889791944030792*^9}, {3.8897919745110073`*^9, 
  3.889792053318592*^9}},ExpressionUUID->"b2bbd787-f430-43ca-ae21-\
a506f89d5820"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex2b", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex2b", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"16233cce-dc97-47b4-b954-f19fe7feaa21"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex2b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex2b"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8877980497272787`*^9, 3.8877980782163553`*^9}, {
  3.8877981727076263`*^9, 3.88779823241278*^9}, {3.887872852167418*^9, 
  3.8878728600894403`*^9}, {3.88787331124966*^9, 3.887873319654635*^9}, {
  3.8893349478701878`*^9, 3.889334953580573*^9}, {3.889335516591914*^9, 
  3.889335517975856*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"6a2da0ad-2be5-4cb5-8fe6-19494086ab79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex2b", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"271c34fb-514a-4a29-bf0e-9e7237fce55c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolg7s42478c3i73d9g", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIG7jQGDiCLFYiZoKIsSGzt5Myi5NLMEl1DYzMHTsXfIS\
66EnmlOTmFjGBNjEATUAHMaJgBzDBDkxnBooyMyTh0MDCwQXmMDNhBUJR7Ykkq2MY0qBCHhK5LyG/\
Fn/ZgzajGoYLgCLhmyi0iTjMjJa5kpI5FTJj6wGY6I4IDYRtxGhgRgUiSDaxIstgAWRHEmAoV0kJTI\
uWWk59YoqFuoGegrqNQUJSanFmcmZ9na2qsSatYgDnFHE2JOtQpRnrGpmaGliYmlgaGlkbGJvR2lyW\
aEk2ouyz1TIxMzM3NLc0MzM0sjc0tjXG6jKTkNHRjEFdIGetZGplZWhpYGJpZWpgbmRgYDhaX0SIOR\
0yGHY3uoZ9lRwtdUpw32oAiZBE7kkXYDPBNTSwuLYLohjRpSdDBkAxRAwBvhB9a"|>|>, 
       "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:03:43.913578Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolg7s42478c3i73d9g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:03:43.913578Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.889334972102984*^9, 3.889335524091435*^9, 
  3.8899442257103453`*^9, 3.889957117986957*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"ca12aa50-8c9e-4e64-b0ec-12d3280a3295"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex2b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex2b", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex2b", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex2b", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex2b", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex2b", "=", 
  RowBox[{
   RowBox[{"qcXX", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{
  3.887798175125793*^9, {3.8877982895882397`*^9, 3.887798290350779*^9}, {
   3.8878728640179853`*^9, 3.887872874915012*^9}, {3.8893355862007313`*^9, 
   3.889335586485846*^9}, 3.8893356985989857`*^9, {3.890011979017674*^9, 
   3.890011982316793*^9}, 3.8903472401915293`*^9},
 CellLabel->
  "In[637]:=",ExpressionUUID->"544ea44a-c9b5-4712-a138-409327dba420"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "1736"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "326"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "246"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "1692"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8893355289389887`*^9, 3.8893355884318542`*^9, 
  3.8893357003549843`*^9, 3.8899571557123613`*^9, 3.890011984729636*^9, 
  3.890347244587379*^9},
 CellLabel->
  "Out[638]=",ExpressionUUID->"12cce4e1-5fe3-416c-9fd3-9e920b209dcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.434`", ",", "0.0815`", ",", "0.0615`", ",", "0.423`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8893355289389887`*^9, 3.8893355884318542`*^9, 
  3.8893357003549843`*^9, 3.8899571557123613`*^9, 3.890011984729636*^9, 
  3.890347244603959*^9},
 CellLabel->
  "Out[639]=",ExpressionUUID->"c2d0fdb5-f5f1-44b1-bb7a-a997ccc482bf"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1}, "Dual" -> False]], "\[Rule]", 
    "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0}, "Dual" -> False]], "\[Rule]", 
    "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8893355289389887`*^9, 3.8893355884318542`*^9, 
  3.8893357003549843`*^9, 3.8899571557123613`*^9, 3.890011984729636*^9, 
  3.89034724466824*^9},
 CellLabel->
  "Out[640]=",ExpressionUUID->"a469d4f6-24ae-483b-82d3-af260d76780c"]
}, Open  ]],

Cell["\<\
Encode the above converted circuit again, send the query on backend, get its \
information and extract the QPU results . (in this case PauliY basis circuit)\
\
\>", "CodeText",
 CellChangeTimes->{{3.889792066059202*^9, 3.889792072400792*^9}, {
  3.889792117537857*^9, 
  3.88979211884762*^9}},ExpressionUUID->"e9f6053f-0283-4caf-9a90-\
bc182a1a82c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex2c", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex2c", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"724157d3-28e3-4079-b805-f3852c552309"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex2c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex2c"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.8877982351778*^9, {3.887872877925097*^9, 3.887872885879353*^9}, {
   3.887873325007957*^9, 3.887873334046438*^9}, {3.889334962709339*^9, 
   3.889334963985746*^9}, {3.889335534825315*^9, 3.8893355355505657`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"37a04937-19c0-4db9-aa61-3852f20cccf8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex2c", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[137]:=",ExpressionUUID->"4782704f-5e3f-46a9-9f9a-940bac5d9f5b"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolgc7tpqa6orc9a8rg", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__value__" -> 
           "eJwL9Az29gxhYxBnZIAAxkIG7jQGDiCLFYiZoKIsSGzN5Myi5NLMEl1DE0v7n4q/\
Q1x0ZfJKc3IKGcGaGIEmoAKY0TADmGGGJjOCRRkZk3HoYGBgg/\
IYGbCDoCj3xJJUsI1pUCEOCV2XkN+KP+\
3BmlGNQwXBEXDNlFtEnGZGSlzJSB2LmDD1gc10RgQHwjbiNDAiApEkG1iRZLEBsiKIMRUqpIWmRMot\
Jz+xREPdQM9AXUehoCg1ObM4Mz/\
P1tRYk1axAHOKOZoSdahTjPSMTc0MLU1MLA0MLY2MTejtLks0JZpQd1nqmRiZmJubW5oZmJtZGptbG\
uN0GUnJaejGIK6QMtazNDKztDSwMDSztDA3MjEwHCwuo0UcjpgMOxrdQz/\
Ljha6jPRtAxFnEYXNGHZk/2LR7JuaWFxaBNENaViSoIMhGaIGANxwE8Q=", "__type__" -> 
           "QuantumCircuit"|>|>, "program" -> <|"id" -> "circuit-runner"|>, 
       "created" -> "2023-04-08T12:04:00.729928Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolgc7tpqa6orc9a8rg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:04:00.729928Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.889335022431094*^9, 3.8893355396925087`*^9, 
  3.889944242264904*^9, 3.889957175334717*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"3c06e16a-67eb-4ccd-a846-86e608013716"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex2c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex2c", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex2c", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex2c", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex2c", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex2c", "=", 
  RowBox[{
   RowBox[{"qcYY", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.887798198464162*^9, 3.8877981989048443`*^9}, {
   3.8877982960324078`*^9, 3.887798296499221*^9}, {3.8878728885858297`*^9, 
   3.8878729001398287`*^9}, {3.889335601282646*^9, 3.8893356015224648`*^9}, 
   3.889335705277039*^9, {3.8900119870194607`*^9, 3.890011990181897*^9}, 
   3.890347245810293*^9},
 CellLabel->
  "In[641]:=",ExpressionUUID->"d520e472-7c45-4876-87aa-2030cc88f486"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "274"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "1948"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "1608"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "170"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8893355442474213`*^9, 3.88933560420149*^9, 
  3.8893357075228453`*^9, 3.8899572883234663`*^9, 3.890011993506339*^9, 
  3.890347248244335*^9},
 CellLabel->
  "Out[642]=",ExpressionUUID->"e536a17b-0107-4a59-a054-616c804736ee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0685`", ",", "0.487`", ",", "0.402`", ",", "0.0425`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8893355442474213`*^9, 3.88933560420149*^9, 
  3.8893357075228453`*^9, 3.8899572883234663`*^9, 3.890011993506339*^9, 
  3.890347248261075*^9},
 CellLabel->
  "Out[643]=",ExpressionUUID->"ad0a8a2d-503b-4aba-9bc3-204344bf76bc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False]], "\[Rule]", 
    "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0}, "Dual" -> False]], "\[Rule]", 
    
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False]], "\[Rule]", 
    "0"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8893355442474213`*^9, 3.88933560420149*^9, 
  3.8893357075228453`*^9, 3.8899572883234663`*^9, 3.890011993506339*^9, 
  3.890347248317111*^9},
 CellLabel->
  "Out[644]=",ExpressionUUID->"bf60ae05-f334-441b-b0f3-ed40fbcc3f73"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Results", "Subsection",
 CellChangeTimes->{{3.887667646006912*^9, 
  3.8876676472887287`*^9}},ExpressionUUID->"f26345ef-edf4-4916-965e-\
95a4c6e08e1b"],

Cell["\<\
Plot the result (WQF and IBM QPU) in form of graphics(Bar Chart here) and \
compare them side-by-side.\
\>", "Text",
 CellChangeTimes->{{3.889792171453101*^9, 
  3.8897922107477016`*^9}},ExpressionUUID->"92832c49-7364-42b4-af45-\
96902897b8a3"],

Cell[CellGroupData[{

Cell["PauliZ", "Subsubsection",
 CellChangeTimes->{{3.887679702463314*^9, 
  3.887679704480406*^9}},ExpressionUUID->"9d801b8a-d639-43d3-8e28-\
9e5092de1347"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex2a", "]"}], ",", "qpuResultsex2a"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Z basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"00\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"01\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"10\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"11\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8876675240263367`*^9, 3.8876675447006817`*^9}, {
  3.88766902717588*^9, 3.887669030401218*^9}, {3.8876693424322443`*^9, 
  3.887669346308251*^9}, {3.8876701335268917`*^9, 3.887670136566326*^9}, {
  3.887676246501913*^9, 3.887676250783317*^9}, {3.887676515784782*^9, 
  3.887676518869556*^9}, {3.887679660660509*^9, 3.887679670134234*^9}, {
  3.887679742165444*^9, 3.887679768681559*^9}, {3.887679860488686*^9, 
  3.8876798822532673`*^9}, {3.887680067385249*^9, 3.887680069646743*^9}, {
  3.889335768978919*^9, 3.8893357749872026`*^9}, {3.889959488214999*^9, 
  3.88995948876492*^9}, {3.8899607431701603`*^9, 3.889960743757976*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"6074f325-0e22-41e7-85bb-a702f5ff2e6d"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5683758193736344, 0.}, {9.52476329206118, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{23.19022314808276, 
                 56.78344013744301}, {-71.87326802104926, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.43375}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{59.86252898052151, 
                 93.45574596988175}, {-49.28322480805875, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.43375]& , TagBoxNote -> "0.43375"], 
             StyleBox["0.43375`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.43375, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{107.27210134219578`, 
                 140.86531833155604`}, {98.61762415246403, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.075}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{143.94440717463456`, 177.5376241639948}, {
                 73.04399032643704, 99.11762415246403}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.075]& , TagBoxNote -> 
              "0.075"], 
             StyleBox["0.075`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.075, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{5.3295702840495265`, 0.}, {6.2319737800437, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{191.35397953630883`, 
                 224.94719652566909`}, {98.61762415246403, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.3295702840495265`, 0.}, {7.2319737800437, 
                  0.06125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{228.02628536874758`, 261.6195023581078}, {
                 77.73248986120865, 99.11762415246403}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.06125]& , 
              TagBoxNote -> "0.06125"], 
             StyleBox["0.06125`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.06125, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.982864, 0.7431472, 0.3262672], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.622359796067006, 0.}, {8.52476329206118, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{275.43585773042184`, 
                 309.0290747197821}, {-71.87326802104926, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.4992, 0.5552, 0.8309304], 
           EdgeForm[{
             Opacity[0.644], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.622359796067007, 0.}, {9.52476329206118, 
                  0.43}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{312.1081635628606, 
                 345.7013805522209}, {-48.00454311675739, 
                 99.11762415246403}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.43]& , TagBoxNote -> "0.43"], 
             StyleBox["0.43`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.43, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.5000218469813931}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
             0.5000218469813931}], 
            Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.1951930080116533`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.1951930080116533`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.1951930080116533`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.1951930080116533`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.1951930080116533`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.4337718469813931}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
             0.4337718469813931}], 
            Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
            Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.1951930080116533`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.1951930080116533`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.1951930080116533`, 0.525}], 
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.1951930080116533`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.43\"", ShowStringCharacters -> False], 0.43375, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.1951930080116533`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.00012184698139305458`}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
             0.00012184698139305458`}], 
            Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
            Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.4879825200291332`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.4879825200291332`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.4879825200291332`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.4879825200291332`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.4879825200291332`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.07502184698139305}], 
            Offset[{0, 0}, {4.487982520029133, 0.525}], 
            Offset[{0, 5}, {4.487982520029133, 0.525}], 
            Offset[{0, 10}, {4.487982520029133, 0.525}], 
            Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
             0.07502184698139305}], 
            Offset[{0, 0}, {4.487982520029133, 0.525}], 
            Offset[{0, 5}, {4.487982520029133, 0.525}], 
            Offset[{0, 10}, {4.487982520029133, 0.525}], 
            Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.487982520029133, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.487982520029133, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.487982520029133, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.487982520029133, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.08\"", ShowStringCharacters -> False], 0.075, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.487982520029133, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
             0.00012184698139305458`}], 
            Offset[{0, 0}, {5.780772032046613, 0.525}], 
            Offset[{0, 5}, {5.780772032046613, 0.525}], 
            Offset[{0, 10}, {5.780772032046613, 0.525}], 
            Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
             0.00012184698139305458`}], 
            Offset[{0, 0}, {5.780772032046613, 0.525}], 
            Offset[{0, 5}, {5.780772032046613, 0.525}], 
            Offset[{0, 10}, {5.780772032046613, 0.525}], 
            Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             5.780772032046613, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             5.780772032046613, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             5.780772032046613, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             5.780772032046613, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {5.780772032046613, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
             0.061271846981393055`}], 
            Offset[{0, 0}, {6.780772032046613, 0.525}], 
            Offset[{0, 5}, {6.780772032046613, 0.525}], 
            Offset[{0, 10}, {6.780772032046613, 0.525}], 
            Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
             0.061271846981393055`}], 
            Offset[{0, 0}, {6.780772032046613, 0.525}], 
            Offset[{0, 5}, {6.780772032046613, 0.525}], 
            Offset[{0, 10}, {6.780772032046613, 0.525}], 
            Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             6.780772032046613, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             6.780772032046613, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             6.780772032046613, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             6.780772032046613, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.06\"", ShowStringCharacters -> False], 0.06125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {6.780772032046613, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
             0.5000218469813931}], 
            Offset[{0, 0}, {8.073561544064093, 0.525}], 
            Offset[{0, 5}, {8.073561544064093, 0.525}], 
            Offset[{0, 10}, {8.073561544064093, 0.525}], 
            Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
             0.5000218469813931}], 
            Offset[{0, 0}, {8.073561544064093, 0.525}], 
            Offset[{0, 5}, {8.073561544064093, 0.525}], 
            Offset[{0, 10}, {8.073561544064093, 0.525}], 
            Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             8.073561544064093, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             8.073561544064093, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             8.073561544064093, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             8.073561544064093, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {8.073561544064093, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
             0.43002184698139306`}], 
            Offset[{0, 0}, {9.073561544064095, 0.525}], 
            Offset[{0, 5}, {9.073561544064095, 0.525}], 
            Offset[{0, 10}, {9.073561544064095, 0.525}], 
            Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
             0.43002184698139306`}], 
            Offset[{0, 0}, {9.073561544064095, 0.525}], 
            Offset[{0, 5}, {9.073561544064095, 0.525}], 
            Offset[{0, 10}, {9.073561544064095, 0.525}], 
            Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             9.073561544064095, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             9.073561544064095, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             9.073561544064095, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             9.073561544064095, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.43\"", ShowStringCharacters -> False], 0.43, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {9.073561544064095, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[{{
        Thickness[Tiny], 
        LineBox[{{0.5683758193736344, 0.}, {9.703891041514932, 0.}}], 
        StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
       StyleBox[{{
          Thickness[Tiny], 
          LineBox[{{0.7439912600145666, 0.}, 
            
            Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
             0.}]}], 
          LineBox[{{9.52476329206118, 0.}, 
            
            Offset[{-1.102182119232618*^-15, -6.}, {9.52476329206118, 
             0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
            LineBox[{{2.64639475600874, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
               0.}]}], 
            LineBox[{{3.0367807720320465`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
               0.}]}], 
            LineBox[{{4.93918426802622, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
               0.}]}], 
            LineBox[{{5.3295702840495265`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {5.3295702840495265`, 
               0.}]}], 
            LineBox[{{7.2319737800437, 0.}, 
              Offset[{-1.102182119232618*^-15, -6.}, {7.2319737800437, 0.}]}], 
            LineBox[{{7.622359796067006, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {7.622359796067006, 
               0.}]}]}}}, 
         StyleBox[{
           Thickness[Tiny], 
           InsetBox["\"\\!\\(\\*TemplateBox[{\\\"00\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {1.6951930080116533`, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox["\"\\!\\(\\*TemplateBox[{\\\"01\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {3.9879825200291332`, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox["\"\\!\\(\\*TemplateBox[{\\\"10\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {6.280772032046613, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox["\"\\!\\(\\*TemplateBox[{\\\"11\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {8.573561544064093, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
          StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
      "GraphicsAxes", StripOnInput -> False, Antialiasing -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.5683758193736344, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], PlotLabel -> 
    FormBox["\"Pauli-Z basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.887667547306151*^9, 3.887668185526985*^9, 
  3.8876690314002037`*^9, 3.887669843626245*^9, 3.887670544368285*^9, 
  3.88933554966298*^9, 3.889335608515905*^9, 3.8893357106757402`*^9, 
  3.889335777420804*^9, 3.889957417424355*^9, 3.889959490455675*^9, 
  3.889960745062778*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"0cdc2f54-4938-47ef-b2ae-b42eddb53788"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliX", "Subsubsection",
 CellChangeTimes->{{3.887679708262638*^9, 
  3.8876797122509317`*^9}},ExpressionUUID->"c2dc3fc1-008f-4ea5-bad4-\
75c82951d66a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex2b", "]"}], ",", "qpuResultsex2b"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-X basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"00\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"01\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"10\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"11\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887679678121592*^9, 3.887679687312405*^9}, {
   3.887679891299629*^9, 3.8876798952306957`*^9}, {3.8876800718068943`*^9, 
   3.887680074309717*^9}, 3.8893357912399673`*^9, {3.889959481662483*^9, 
   3.889959482239767*^9}, {3.8899607372231417`*^9, 3.8899607378864403`*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"556353a4-2ce7-4ff1-9fc4-d417ca33c7ed"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5683758193736344, 0.}, {9.52476329206118, 
       0.}}]}, {{}, {{{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  0.5}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.41725}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.41725]& , 
              TagBoxNote -> "0.41725"], 
             StyleBox["0.41725`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.41725, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.08}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"],
               StatusArea[#, 0.08]& , TagBoxNote -> "0.08"], 
             StyleBox["0.08`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.08, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{5.3295702840495265`, 0.}, {6.2319737800437, 
                  0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.3295702840495265`, 0.}, {7.2319737800437, 
                  0.07125}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.07125]& , 
              TagBoxNote -> "0.07125"], 
             StyleBox["0.07125`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.07125, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.622359796067006, 0.}, {8.52476329206118, 
                  0.5}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.622359796067007, 0.}, {9.52476329206118, 
                  0.4315}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.4315]& , 
              TagBoxNote -> "0.4315"], 
             StyleBox["0.4315`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.4315, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{{{{
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
                0.5000218469813931}], 
               Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
                0.5000218469813931}], 
               Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                1.1951930080116533`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {1.1951930080116533`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
                0.4172718469813931}], 
               Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
                0.4172718469813931}], 
               Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                2.1951930080116533`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.42\"", ShowStringCharacters -> False], 
                    0.41725, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {2.1951930080116533`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                3.4879825200291332`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {3.4879825200291332`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
                0.08002184698139306}], 
               Offset[{0, 0}, {4.487982520029133, 0.525}], 
               Offset[{0, 5}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
                0.08002184698139306}], 
               Offset[{0, 0}, {4.487982520029133, 0.525}], 
               Offset[{0, 5}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                4.487982520029133, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                4.487982520029133, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                4.487982520029133, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                4.487982520029133, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.08\"", ShowStringCharacters -> False], 0.08,
                     AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {4.487982520029133, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {5.780772032046613, 0.525}], 
               Offset[{0, 5}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {5.780772032046613, 0.525}], 
               Offset[{0, 5}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                5.780772032046613, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                5.780772032046613, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                5.780772032046613, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                5.780772032046613, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {5.780772032046613, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
                0.07127184698139305}], 
               Offset[{0, 0}, {6.780772032046613, 0.525}], 
               Offset[{0, 5}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
                0.07127184698139305}], 
               Offset[{0, 0}, {6.780772032046613, 0.525}], 
               Offset[{0, 5}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                6.780772032046613, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                6.780772032046613, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                6.780772032046613, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                6.780772032046613, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.07\"", ShowStringCharacters -> False], 
                    0.07125, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {6.780772032046613, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
                0.5000218469813931}], 
               Offset[{0, 0}, {8.073561544064093, 0.525}], 
               Offset[{0, 5}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
                0.5000218469813931}], 
               Offset[{0, 0}, {8.073561544064093, 0.525}], 
               Offset[{0, 5}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                8.073561544064093, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                8.073561544064093, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                8.073561544064093, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                8.073561544064093, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {8.073561544064093, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
                0.43152184698139306`}], 
               Offset[{0, 0}, {9.073561544064095, 0.525}], 
               Offset[{0, 5}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
                0.43152184698139306`}], 
               Offset[{0, 0}, {9.073561544064095, 0.525}], 
               Offset[{0, 5}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                9.073561544064095, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                9.073561544064095, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                9.073561544064095, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                9.073561544064095, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.43\"", ShowStringCharacters -> False], 
                    0.4315, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {9.073561544064095, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}]}}}}, {}}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.5683758193736344, 0.}, {9.703891041514932, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.7439912600145666, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
              0.}]}], 
           LineBox[{{9.52476329206118, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {9.52476329206118, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
             LineBox[{{2.64639475600874, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
                0.}]}], 
             LineBox[{{3.0367807720320465`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
                0.}]}], 
             LineBox[{{4.93918426802622, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
                0.}]}], 
             LineBox[{{5.3295702840495265`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {5.3295702840495265`, 
                0.}]}], 
             LineBox[{{7.2319737800437, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.2319737800437, 
                0.}]}], 
             LineBox[{{7.622359796067006, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.622359796067006, 
                0.}]}]}}}, 
          StyleBox[{
            Directive[
             Thickness[Tiny]], 
            Directive[
             Thickness[Tiny]], 
            StyleBox[{
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"00\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {1.6951930080116533`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"01\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {3.9879825200291332`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"10\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {6.280772032046613, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"11\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {8.573561544064093, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
             StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
           False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
       "GraphicsAxes"}, StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.5683758193736344, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotLabel -> 
     FormBox["\"Pauli-X basis\"", TraditionalForm], 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.15]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.889335792579485*^9, 3.8899574203110113`*^9, 
  3.889959483815957*^9, 3.889960739373911*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"b6a32e8f-e290-4f9e-852b-87dad8704389"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliY", "Subsubsection",
 CellChangeTimes->{{3.8876797151883183`*^9, 
  3.887679717836677*^9}},ExpressionUUID->"645adfbd-19c7-45c8-96b4-\
587109bc70d9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex2c", "]"}], ",", "qpuResultsex2c"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Y basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"00\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"01\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"10\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"11\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887679681045422*^9, 3.8876796919941587`*^9}, {
   3.887679898413301*^9, 3.887679902280917*^9}, {3.887680076320932*^9, 
   3.8876800784848623`*^9}, 3.889335798188199*^9, {3.889959433561392*^9, 
   3.889959453197016*^9}, {3.889960689568676*^9, 3.889960725159131*^9}},
 CellLabel->
  "In[193]:=",ExpressionUUID->"41d44a82-74f4-447b-8fcf-f09c425ca01f"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5683758193736344, 0.}, {9.52476329206118, 
       0.}}]}, {{}, {{{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.7439912600145666, 0.}, {1.64639475600874, 
                  0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.7439912600145666`, 0.}, {2.64639475600874, 
                  0.06025}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.06025]& , 
              TagBoxNote -> "0.06025"], 
             StyleBox["0.06025`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.06025, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.0367807720320465`, 0.}, {3.93918426802622, 
                  0.5}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.0367807720320465`, 0.}, {4.93918426802622, 
                  0.4765}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.4765]& , 
              TagBoxNote -> "0.4765"], 
             StyleBox["0.4765`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.4765, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{5.3295702840495265`, 0.}, {6.2319737800437, 
                  0.5}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.3295702840495265`, 0.}, {7.2319737800437, 
                  0.40425}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.40425]& , 
              TagBoxNote -> "0.40425"], 
             StyleBox["0.40425`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.40425, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.622359796067006, 0.}, {8.52476329206118, 0.},
                   "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.644]]], 
            RGBColor[0.4992, 0.5552, 0.8309304]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.622359796067007, 0.}, {9.52476329206118, 
                  0.059}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.059]& , TagBoxNote -> 
              "0.059"], 
             StyleBox["0.059`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.059, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{{{{
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.1951930080116533`, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {1.1951930080116533`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                1.1951930080116533`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                1.1951930080116533`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {1.1951930080116533`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
                0.060271846981393054`}], 
               Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.1951930080116533`, 
                0.060271846981393054`}], 
               Offset[{0, 0}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 5}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}], 
               Offset[{0, 10}, {2.1951930080116533`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                2.1951930080116533`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                2.1951930080116533`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.06\"", ShowStringCharacters -> False], 
                    0.06025, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {2.1951930080116533`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
                0.5000218469813931}], 
               Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.4879825200291332`, 
                0.5000218469813931}], 
               Offset[{0, 0}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 5}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}], 
               Offset[{0, 10}, {3.4879825200291332`, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                3.4879825200291332`, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                3.4879825200291332`, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {3.4879825200291332`, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
                0.47652184698139305`}], 
               Offset[{0, 0}, {4.487982520029133, 0.525}], 
               Offset[{0, 5}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.487982520029133, 
                0.47652184698139305`}], 
               Offset[{0, 0}, {4.487982520029133, 0.525}], 
               Offset[{0, 5}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}], 
               Offset[{0, 10}, {4.487982520029133, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                4.487982520029133, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                4.487982520029133, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                4.487982520029133, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                4.487982520029133, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.48\"", ShowStringCharacters -> False], 
                    0.4765, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {4.487982520029133, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
                0.5000218469813931}], 
               Offset[{0, 0}, {5.780772032046613, 0.525}], 
               Offset[{0, 5}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {5.780772032046613, 
                0.5000218469813931}], 
               Offset[{0, 0}, {5.780772032046613, 0.525}], 
               Offset[{0, 5}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}], 
               Offset[{0, 10}, {5.780772032046613, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                5.780772032046613, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                5.780772032046613, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                5.780772032046613, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                5.780772032046613, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {5.780772032046613, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
                0.40427184698139307`}], 
               Offset[{0, 0}, {6.780772032046613, 0.525}], 
               Offset[{0, 5}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.780772032046613, 
                0.40427184698139307`}], 
               Offset[{0, 0}, {6.780772032046613, 0.525}], 
               Offset[{0, 5}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}], 
               Offset[{0, 10}, {6.780772032046613, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                6.780772032046613, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                6.780772032046613, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                6.780772032046613, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                6.780772032046613, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.40\"", ShowStringCharacters -> False], 
                    0.40425, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {6.780772032046613, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {8.073561544064093, 0.525}], 
               Offset[{0, 5}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {8.073561544064093, 
                0.00012184698139305458`}], 
               Offset[{0, 0}, {8.073561544064093, 0.525}], 
               Offset[{0, 5}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}], 
               Offset[{0, 10}, {8.073561544064093, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                8.073561544064093, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                8.073561544064093, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                8.073561544064093, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                8.073561544064093, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {8.073561544064093, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
                0.05902184698139305}], 
               Offset[{0, 0}, {9.073561544064095, 0.525}], 
               Offset[{0, 5}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {9.073561544064095, 
                0.05902184698139305}], 
               Offset[{0, 0}, {9.073561544064095, 0.525}], 
               Offset[{0, 5}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}], 
               Offset[{0, 10}, {9.073561544064095, 0.525}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                9.073561544064095, 0.525}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                9.073561544064095, 0.525}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                9.073561544064095, 0.525}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                9.073561544064095, 0.525}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.06\"", ShowStringCharacters -> False], 
                    0.059, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {9.073561544064095, 0.525}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}]}}}}, {}}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.5683758193736344, 0.}, {9.703891041514932, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.7439912600145666, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
              0.}]}], 
           LineBox[{{9.52476329206118, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {9.52476329206118, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
             LineBox[{{2.64639475600874, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
                0.}]}], 
             LineBox[{{3.0367807720320465`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
                0.}]}], 
             LineBox[{{4.93918426802622, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
                0.}]}], 
             LineBox[{{5.3295702840495265`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {5.3295702840495265`, 
                0.}]}], 
             LineBox[{{7.2319737800437, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.2319737800437, 
                0.}]}], 
             LineBox[{{7.622359796067006, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.622359796067006, 
                0.}]}]}}}, 
          StyleBox[{
            Directive[
             Thickness[Tiny]], 
            Directive[
             Thickness[Tiny]], 
            StyleBox[{
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"00\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {1.6951930080116533`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"01\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {3.9879825200291332`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"10\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {6.280772032046613, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"11\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {8.573561544064093, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
             StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
           False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
       "GraphicsAxes"}, StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.5683758193736344, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotLabel -> 
     FormBox["\"Pauli-Y basis\"", TraditionalForm], 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.15]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.982864, 0.7431472, 0.3262672]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.644]]], 
                    RGBColor[0.4992, 0.5552, 0.8309304]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.982864, 0.7431472, 0.3262672]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.644`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.4992, 0.5552, 0.8309304]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.88933579937685*^9, 3.889957424758356*^9, {3.889959446104753*^9, 
   3.8899594594237328`*^9}, 3.8899607264553003`*^9},
 CellLabel->
  "Out[193]=",ExpressionUUID->"166a207b-4648-4175-980f-c9d0200d56ac"]
}, Open  ]],

Cell["\<\
The above comparison shows similar trend between WQF and IBM QPU. \
\>", "Text",
 CellChangeTimes->{{3.889792246775708*^9, 
  3.889792363051627*^9}},ExpressionUUID->"8f4e3d38-c925-4c2f-a508-\
9ad177ea1e4c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quantum State Estimate", "Subsection",
 CellChangeTimes->{{3.890011640003862*^9, 
  3.890011655987331*^9}},ExpressionUUID->"8a5ab51d-5f90-44b0-b655-\
a9f919c5a3e6"],

Cell["\<\
Simulate measurement results in different basis state and find the \
corresponding quantum state estimation.\
\>", "CodeText",
 CellChangeTimes->{{3.890013217609788*^9, 
  3.890013277022872*^9}},ExpressionUUID->"1cf2cea4-0972-4f71-a96b-\
94fbfed13cc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"est2", "=", 
  RowBox[{"QuantumStateEstimate", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<X\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex2b"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Y\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex2c"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Z\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex2a"}]}]}], "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8900117367131042`*^9, 3.8900117530374517`*^9}, {
  3.8900117846346703`*^9, 3.890011792854273*^9}, {3.890011848836671*^9, 
  3.8900118527952633`*^9}, {3.890012001162582*^9, 3.8900120111981163`*^9}, {
  3.890012063579384*^9, 3.890012077495348*^9}, {3.8900442863103943`*^9, 
  3.890044293970376*^9}},
 CellLabel->
  "In[383]:=",ExpressionUUID->"4dfaa007-2b50-4cc7-8b0a-d5c1bb0e88f1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumStateEstimation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
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
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
j2Hd45fbuHFjsic6uPH+dJ8Pw+v9c2PJlp9LvqTGNr7xxhtymP5ucncY+8G2
ZQuyUv8OfLaosEBaW5osT5n4durC+brUI/ERMr+H5Xq0N5k/EBni+uR12GPE
n/he346DuIkcsT5r1By1uv+9wXrtVZ64xfpfrlr1mXzxxaeyYsUnFh+O3SB1
UN9q2G7l4rBYv14H3dPgeb+vjIWPVNnisQYufZ2PERgJtC5Xt5dYsj6Vnd02
fe+25N/V+72d7dKRtkO6FOPxe++XrgsvdXxF9awk7z8Q3n+Uw0ogY5A5IZUx
oT/9TUKKrTbFRbvOiM7uwEczoDOus1FnhmJmhWLmycMnyPXK489R3ByjPHbC
hAly3KRJctKJJ5jdGDmCb/DAAw6wfeAS3QeINcHHSRw7sc48jhxdvmyZ1Q5E
brP+8Wmj1zB9/obPz+ax1HxcjtjGfih+ZX9gx8c20q+H2MbFb72Vcs1+MkZs
cSJPiTPYsX2b5Q82qtwoVx7iehk4/0cSH5G2oO9XrfkH0aligQ8dfQv+To1R
6Y+O5OhBvf7UliPkoa9Z86Xcc9ed9veZ995zt+XVdQU1fhjUvfK1S3pt/e2u
X7Lu4/HEbo+nDh+DwvDnDH1htPyQZL0sMR/9u++8bbmB7nwPBLzI+WH4Xvj5
R+b8Duge0KuyhR5pnZbrHUtEyB4e/jLokTXV0vvddxJ/9jmJXDddOpS/hxUL
hhfj/Yckeb9hBuxwP8CI6WfB5H5ngJO+ADM9+vrWAw6VwsuuUK7xhTxJT5LZ
s6y2/EmKGWJxic30OYbomeTBEE9BfVXi9tkbWPvsE0yef+KJJ+RN1bWwh2BH
wpbO+8mxQtfxNV/Y18EOvqd33nlnt7wRj539VSfbYhtbWkwfIo8EnSt5un+a
bStZnwE9gh4w6P1NqlvhJ6QuA7V9sPFafYZOxz+sxo/KD8fN22VQOQi6FTWq
8ZGADWy9/d0dQSxvJMj5EGlXnrLyixXGG+ES6PgLHnlI0tK2BTar5C8yOy+P
OfuV61/g6yYScwUfxy/o8qb7drNZpQ7XXzBu7wFL+Nqtvqjyc/DBe7nv/I+D
KTkk7vx8//33pmMwXO6Vszfj6wcr9PTk+/naKsSLYWPge3cnqINHDqX+Pnr5
EJus+Ejd1UwnC7VK5+ZNknjnXYnccpt0Knc3LKjsaP+vA5LY2NMcjRludyhG
4qrLJabOkBj6QE9cOloapUI5JniA29KXgGuB3eygv//dcIONC/ky+dprTZYg
V4iz4LX4NnmcehLkVhH7bb0TlL8sU1mDPyXX8ozLrR4cOSbEZxAf6vUyHzvC
OSV+eH/lk/ieJPAlbNd8d68z/ATenqzvgw+dWGJ68JFnSw6I1Yarc7novu8K
+OgI8qIsdzDeYf2jeIwYE3oZtTTS29Tr5G4tURuIXuJwiUsuulCeevJRSdux
SaymeXL0JOs4u5gTn1M4HNPualAPJH3mriaDq7WLDsptZiQSTcbw+jherg/X
CznCa8BIZqbrbwAemOhLTOK8fAwkcV+8Fv2WegYMMEA+gPP3u9qOyDbX1zC1
v9uA1fTqtj4MKmfQvcAGr1NMDfXq76Xml+Imob812h/0l+EMqMzpKSmUxJdf
SuTue5xN7EcwMiZu8GnCe846RxqyMiSs3K6lvsZyn+rr6oLfE7W1Bfcg/56+
WeCD+rnU+8FnTa4hPJW9lHxYXoOcIe+PI/qXxWtabIB7/OWXXrK4mg/ef9/6
qPu8AeQG14KeC/w9n3eWqm+hy+2J83vesSeMIMOYxMORH8za+AkYSeKDvC1i
t6lr0NhQZ3VL4Oj4CF0NpSbzo1s/L8WG2XZVt8Jf6HMI/Von/iQ7fat89P47
krFzi3zz1ef6GWWyYvlSxV2BJC2m8HbDRMzqizKHUuJ5nR2rQ4Z96YPJtef2
7L4gljdmMYvt7aFkPBa+Ec6/j+8FD/g/eIy17mRPn9XNJXeQ511994TFdbkY
+UhQ79fljnC9sJG88srLJkOIVyNH0MmyWKD79clwfpfriUjNkHisaxgfAwE+
gjnY32N9ebGp9yFrdP3290Rdr+khp5V1p203e1iqjrVPc8IkCf/1YGk99iSJ
5+fKpqx0OV11otRYnNGDtYF/iFpJ5Jhajq3KDPxy4IX6POQUohdfqDKC+GXk
EfoZ+CHmGZwgY5g8x2fgb6MGFnGR6A/ffvutne963fd93j94efnFF01Hwvac
mvPu/TRNzc0/KEe4XnwOPOr4Y4+1x2zH3nvbVrK+KDmT/E56G4APehtY3w96
rITASKXl2g7XHmtyfSsSzg5LTCI5ntQMpzbTKSedKNOUA675+gspK84zTu5G
v3H0eCxk9ciT8SY2e6w3rZMfw75CZ/PtC/SrTtP5WbOsS3I/uI6s6bHypQyG
Q4PJGF7e5+qadNt5oubh2bpP+npAvIbneR348zqWj48kNxA9ZNVK17eV3p7Y
C8AGGEGu8P3Qu6iXOhTghZgyMDA0ChtDwWPdCWzhYbtPPTAmOllvrEO69HPa
H3/CYsTM3rUvuABPvCfAVej/+ZP06/33VVearLoHw3Mvb9/2NvI9DexZ6E/w
9ieVixBbC79HJwMz7CHk4bL2wQgTPYc8MnICsJfBZbAtw23uuftukyH0RMC/
i0znb/A+YoTY/1LzncEGtfiwN+8JH57TMJEdCxe6vtdg3WN/b/Dh9452xS8c
i/rUzU2NVkcMjBDfTh469UXBCDlS6EpD/Qnrub118/fy0AP3WY8B3n/LvJvk
q1WfSUMNvgm378M/Yl0tFs870O96HIMP6sc5XPj+fB4XbtLvg5wp+mu6WN5o
sB5Tayp6O1J0hD1rpJ3J+wQHkjYuz/Gp8XaJ2XAHRuSsozMNf4bvqeD4TX5e
ru2fvj6j4+epuY39+tsShhHsDNSkpK5Yfy/+nz6TIR4byA5u83xvNzYMbGHd
+v6Y1TzqaG+WuN6PTJ8p7X/++4/LD3wsHhPcx478J8XVXw6U9uNPltDsuSIr
PpP7r75GnnrmmR9cKz4Ox2Pmx9ZUq+7VcHRiCKlVijxBnwYv+GrQz9Bl0beo
YwF+iIsDM9OV15APQK47j9n7FUfE7OKfoWaDr5WBLEf+wC885/fTYwKMef3L
xzZiX+O60ePa/+4fsW2N6G+A7MRW4/HRHmq2WiboWBHri9okTfVVkpO5Q26b
P89qkVmf1xtmyReffmIyxQ/6HsSpy26+QpUdA1GLwaLXQXeCvhxB7Lthwh97
Tb+CcxDnzkTHSO0LNVq394/7/gU/NNGJfB1FjyX0KWy8zkbcL6l22+H7ft0P
BFgQ2b5tqxx84IGSvjMtONcuTt/190nRsYK+idgF6acSjXToeYgZLjwP6UlE
rSY39+mpCS46iVmgJ5DK0j693XHS6RI+8DC3/sfChJcRBylHwVYMJg6ZIB0X
XCIdCxZI55pvpKm0ULqU6/DNLta1+FNrIOyLrEGfZW2TU07tCvQt9BQwg235
+OOOs331UpUjPDc9sJExTUdT3Fhss8of4umIE8SGC7ehzwr6GDwDTu4n2AB7
YBVZA058bOO6detkgsr/hc8+m/wtP4CREf1x4Ofzb77ZegWgYxGHRT9n4q/o
I9Gb6JK0rRtU5i2Qh+6/V7brbevTEuja+NKtXrXyD/hIZ5AXYrG8QawJtl7w
0dpSa31ZBwddnzViTugv2EWcV7xzuKdlwEX8dDUVR+IDzLj+zbvXavDx8H56
u+3u+etDKfJHTFdy8mL3GnUeI/QJRWYXFe4Sdx5drpfhI3Xqe9C1uuMRJ1dU
nnR1thtWwA56VTxK7byw9T6h1iqc3jiI4jKRmS5h738fU0Yconj4m8mI0DEn
SHjGTOlavFgiOZmuBo2ey079rEZyd/RvlpeVyulHHy2hQB8f2k9xfaNxs6d1
x57EHg8+6fOG3oVcOS6IPWPSLxheDefHdkbNcI8fbGfY0sDMDfocfAZ/B/HZ
+Cg5YlsgHgZbgLc3w/+RN9R0Qv9DL/RjDxgf0V9ts3IQ4tWqVcemhmJ70OOA
eu5wkLjuZ9UVJbJl0/eKlYBP6Hp1cSdtrpYivaSsVpzDSkzlhfeFGEaILaEX
UrTNasXRt7hVMdaux27rdeF4h8cGXMTxEY+P4bhFLzvQt4b73wwG/QsGUnSm
Ycz4PiCpGHJ5iL7ns3v9MD7GqlFHXWtXS406cFxP+kbZ6bC+fynYGHRHdKdY
hFgCx9npGwdnb7KcggrDCzrVQD+xBQm73af7Ed8g9v4S5w858tgRMgJfvNm0
zr1AOh58SFo/XyEdlaXSgs9KPyfaHbE4oS7si62Nph/H9XsvXbFcrlVerQvI
eWR+xtoge4sZnkMWYBtmrcOp0WfIEeP84s/gNuueGDFwAjaIwyOPEx2N2Bj0
NOxqU5W74Hf58ssvzR+CDOPz4ey1gQ2AmBvq3nlf8BhydIR+xevQFzes/978
6PhBsKmQj06Mu/WvJeZEZQm+w82Kk6ryYt3nIoaNEX1ylLcTr0gcY3/gLxTz
g8RdDdKOJuPnyJDe3ojFvRPH62IWu4Jail5P6Q1w0Zc8puID3wP+BtY3c3fu
MSwrwIf37zGIYeGcuvcOBI8PBXUhHG7G0udc7ypnw1705utyzKSjdLk12ntH
YCTAB/qUyYteZ8sCDxzD9P5ReYF+RU+gXupTKDcHH70BPiJ33CXtyquNfzBV
RnQoH4noOkrk5+j1qZeWqOqjvRGzibfr9Wquq5JYEPvAxM5CTZSI/t25qhu/
TP0W1eMHgnz8X3Lsi36GTgQXX/rhh2bLgtMQi4iPBk6Dfo+swReDPAE32M/A
CLZj7M08xnNwGmINkSfgpLGpyXgQdoK6wM49CiNJZ7b/jsiyRx5+WHWgWOAD
aTY9i1gsrgP1GvCRk09IXYG66gqLs4p0NFt9al9P0WSIxS6GDSOGD/Olx42n
hNrqza7ruPkwP+cx8AFWqIWVYI30xQ0XxGf5GF/f85x1jV3L9TcftgOPPYeC
Pgf9SXzk5+eaPowMGn580Hx7e8IH+pyLn+wPXuMw8sbrr7najTyGnKB2V3+3
yY644ok9J6bvM1+Ivgadi/Uq1msxYba6MDk3kXbFkcoPfawn1iGdZ51ruVeR
hx6W+OpvJKpyIKznhZ2jXfejuppyiek1iFsMXJvZ4V1PbocNYiBCLQ1WA4LY
ulN1DywKdKvfSj3ofbEFYKcn7oF6ftjPWPtwdWQM/hq4DfFS2MbwfyBnmNig
V65cmaxJDy/B/gvukFHEAjBS7L+79T//ctUqy7nE94Xsr62plA6VIe2tTVb7
B45OD6ke7K7Y51WvJTe9TfkE9RRT6/EiN9Cr8K072RI23zv2L3oTmv9jaDjn
dhgnPTaHhhJWtwHbKH4Q6o5ydD1zPB8esjXai21oBFcYGx/wFFcvyJ0DalGh
5w7jw+lY+PvGxsdg0Fvd15FwuhIjJzvTaloxkA3RLv2+xMWobAMLyIyhpI0X
f4ezWYEN4xucT/291lsu1CwJlQV9ejuRkyU91Ji0s6N8RLGDXYt8tXrFhuvF
0h70Pnc90MGDxc91tlkeKDUZ0QM+Xf6J5QTIb7OfwG5jb/UzfFfoTHAafJLI
EHJDsJnBEfF/IHPQ3eDvvu4Dtb2od4M9jLgt1j8jwENv6vdggE167u1M22HX
FvsVtWiQIdT+wd5LzAnXIBJ2MSdWryEWMj7e3lJnvMP6oBNfEuQUUl/c4nsH
XGxvf1CfNzWmdxgjo+29jnu43NuIrU32WvZwYrR8rBZ8Ydi+lVpHzt+WFLng
9oOCgjzrUen6lA/zC/DmXjfSfsXR2ZkdRln3icD+hBwDA8iSRNzpe2DByxLW
fR8+Efwd9MPS1zpbbjyYMZv8TvoFhdqcvOn39Yn1N4OTLj3nrgdVlcs3iDps
eHwQC+T74mFXQeaDj5jqdzfOmW2+hpQ18Lsbe6ufmX+zocFqzYELai3BOU5T
fQr7FjwfnQvfJ779L774wuxp7y9Z4v/OiEJR/u/QJ+6Rhx7Sa9Vtdl54CNjg
nKNPcb7j1BkhHivIK3QYabe43XCbq6tIzR9nx2qynrbIf2rEUffdxWSl1P1J
xchQKj68POm1fBGXd8h17TNdizVKf1uHFVcny09XL8vFfrB22Se87w4Z4OKv
soL+zgnz8VFvC/niY6h4H5gCA2CQ2aayFC4BBtCVqDWPj5yYxD7l+uS2klPO
6O/rCWy5fQ5D3VHn78BXHsiMVGwY7+gJbusR/Rb9yNt920Pky/hemy0WqxAL
8nPABXjoNJ9us/VOACNtqhcTD4F+hd0G3Tv1ev8Rxr5wGmQG/d2oX0o8P7Fj
xJ8hVzn+3//jf8hjCxbsER/0xCA2BztvW6vjHz4nhFisGr2NPE+tqZgI9jEw
0hPghLh35EaP9bJNqPxods91thh3l2RdrL3HCPbf4RgUZ+slV2S4l05/smav
65HeY1hw678n8Nl1BPd7JTs7Q84952xb/0ywACaGcdRjfkpwmMzdivj8+P7h
OeRkxZDKjP6+Xrnw/POs3yYDmy7POd+H/g30xa7wmLKjN8AHPcz7Aq7e1kos
ea31o4OPoWfW11UopwmZbhs1jtGarAVrUx+vq60w3sh1g5+/8dortmemXus/
9Ah0yMG94DTEIZFnDD95SjkNsZaj8eE+0uEQe/SK5cuMpyNDiHmvUy6CblVb
VW49CE2mBzIkEciQRIAPuEZ7W4PpVMS+kxsCf+fYSR3roH71CIwkuUgqTlIx
0mvyA13D4cDZsob9JX7Nev1qZI1r5AL7P9wKPzz4yMpKt9+KrHFyJm54AhtO
Z+t1/CLwY7DfJ+urBDaqoSDmkLiqQWxaqqfFY1HrmUZeK8P8Hoo5bFX4/oxr
7AEbzvcRsz7p1JTk9fARJr+1uQlbSU0ynzNu1yHketcZNtosBoi4OWqMc92Q
/dhGR+nX/5ZjbzmNpCZjBMOfN2QPccnEK9IH3XMQzjX4gIcgx33OVKoM8XGL
2LSsL4jigvoNyI9OkykVTl6k4mM3jKTgI2Vi96UW0DAvGbA9FR+J73fr+Tw6
l5+sd3Qt1jx9HJAfxFnl5GSaftVjciNu8gOcwGk6scHGI0HMl/s8+i7BMXj/
QKA3OX4xHDcyYLaCQV3PrdaL9tWXXY899H/WK7FW6GOpssNsujrNT6LfnRpL
zpYVVpxg8+oyvQp7Cf2b6Z/tZbfXr3wvI/q0oVPhsyJPAR/hp7rXoRMQX/Yb
7fX3q4496Gdjyg8mMS7EaZK/h7+Xuu7wRfyF1PYj7h0eMtyXMKhdjdxQ2YKP
hPpx3VEnS7D1MpEtxGaFiY9PhF38yYgai2PpWg4brh8C8ScRm6wnsEBNG8dB
Ooy7E5My7CfxOpDn3v1B3pWPv8o3XWhoKPW1g7a/w729zmZyYqjPYl56bW+P
mL4Ep+CIjaqvJxHw8T6LLYTb19ZUy5FHHGF1QxjI4UHj9TH7Gw4nMfOZIyfA
BNyEnr5gAiwZPnoipls2qVwAA+FQY3JfsnOv3wvOQfwPsdbIkSbVyWqVL2IH
wNfmY/P/nWXHPo7dCznL8Pl75qmnzH5MXyn86RaT1dYc5E3VqyypsLpxiYCL
JKxvTqNdO2RIT8zZdLsDfQtbFv6QaGez8XcmfTyt3xrPB/7DYVy4Wg4+Dp58
dWqd4B+gTwnYQCdxPUNS41D6JTUmJXW6+lq+9yf1SzKNk/naEM5W22/7OjLF
Y8N8k7quY9HAPhDIDPBA3GE3eVGRDpMtvMY4RI/zyxYXFlhdzI+WfuDOr9lz
E7b2iScBE8iLWMBPeukV1B2x58EI9Vw6FQNtuu/Q07GV3l0tzoYYC2y72HOb
wU7Y+UDASrXyRD577bdr5ATd68h/GZcd+zTGxIc/h/gusR/T68LFvNcbPrBn
YVsndgFdC18h2IAfwk96Akx0J33qYXsMbPTqY9TrxS8CPly93k57bTTSaliB
wyT9I+L63Lp+bG3JmnLxWIfpJCYPYtTC7t19psQCu8fcOo9ZX3Xn26hTHf2p
J58wXCT93gE+ui2Gxvs3BgJuHUniwk/vI+c4gG8Em7PipKuj3c4Rg55N2NeX
qhxB1sAlOsJOf+oxLh63iX41AhvdEcM/Nay79RwkdM9BflCfJxHYrlotr7k+
6IfnaybXmO0K2UG+EnGwjHHZsU9jTHww/Hkk9ov6/eSF0BcdfOBncrVNnF6F
DKmrLrf6vMgRdCpvy0piJOFmd1T1ZOXr4IPHyT2kFpDNAVe7gZonxL+Hlauw
Z5KTCz68fuXiTBKGFepbo4uMiY8xMdNv+/vgwDB/sTHUNwofzgdh+Ah8GPj7
LEZ9cPccDstxslj1nmSOIPwbOxU+JPDy5huvybyb5pqN1nFyxz+cvSrmOJD+
TYeNiGEDPg42wILhIehPxDlvV1lNzj8+2xjxztivOtvMXgU/5FrRI2pcdvzk
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
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
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
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
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Physical Inversion: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Total Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12000", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Maximum Likelihood Acceptance Ratio: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["0.9090909090909091`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Sampler Acceptance Ratio: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6302521008403361`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Sampler stepSize: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.0055209186422361155`", "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumStateEstimation[<|
   "Invertible" -> False, "PhysicalInversion" -> True, "InversionState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {4, 4}, 0, {
       1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
         2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
        0.4300000000000001, Complex[
         0.005749999999999958, -0.017749999999999964`], Complex[
         0.0013750000000000118`, 0.01837500000000001], 0.36475000000000013`, 
         Complex[0.005749999999999921, 0.017750000000000068`], 
         0.061250000000000165`, -0.015999999999999782`, Complex[
         0.0013749999999999759`, 0.018375000000000034`], Complex[
         0.001375000000000068, -0.01837500000000007], -0.015999999999999775`, 
         0.07500000000000015, Complex[
         0.005750000000000026, -0.01775000000000001], 0.3647499999999999, 
         Complex[0.001375000000000023, -0.018375000000000054`], Complex[
         0.005749999999999952, 0.017750000000000103`], 0.43375}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 2} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {4, 4}, 0, {
       1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
         2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
        0.43000000000000094`, Complex[
         0.005749999999999886, -0.0177499999999999], Complex[
         0.0013750000000000327`, 0.018374999999999718`], 0.3647500000000006, 
         Complex[0.005749999999999886, 0.0177499999999999], 
         0.061250000000000235`, -0.015999999999999823`, Complex[
         0.001375000000000148, 0.01837500000000027], Complex[
         0.001375000000000031, -0.018374999999999714`], \
-0.015999999999999823`, 0.07500000000000014, Complex[
         0.0057500000000001, -0.017750000000000415`], 0.3647500000000005, 
         Complex[0.0013750000000001472`, -0.018375000000000266`], Complex[
         0.005750000000000098, 0.01775000000000042], 0.43375000000000047`}}], 
      
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 2} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodAcceptanceRatio" -> 
    0.9090909090909091, 
    "MaximumLikelihoodConvergence" -> {0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
     0., 0.}, "MaximumLikelihoodConvergenceStepSize" -> {0.03125, 0.0296875, 
     0.028203125, 0.026792968749999996`, 0.025453320312499996`, 
     0.024180654296874996`, 0.022971621582031244`, 0.02182304050292968, 
     0.020731888477783195`, 0.019695294053894034`, 0.01871052935119933, 
     0.01777500288363936, 0.016886252739457392`, 0.016041940102484522`, 
     0.015239843097360295`, 0.014477850942492279`, 0.013753958395367664`, 
     0.01306626047559928, 0.012412947451819315`, 0.011792300079228348`, 
     0.01120268507526693, 0.010642550821503583`, 0.010110423280428403`, 
     0.009604902116406983, 0.009124657010586634, 0.008668424160057302, 
     0.008235002952054437, 0.007823252804451715, 0.007432090164229128, 
     0.007060485656017672}, "BayesianAcceptanceRatio" -> 0.6302521008403361, 
    "BayesianSampler" -> 
    Wolfram`QuantumFramework`QuantumStateSampler[{{0.43403916623441874`, 
        Complex[0.002072512653135308, -0.02284138480477643], 
        Complex[0.003664930771614306, 0.02243212912264137], 
        Complex[0.3588309726404161, -0.020288264390890723`]}, {
        Complex[0.0020725126531353074`, 0.02284138480477643], 
        0.05836963833743951, 
        Complex[-0.01809186687725647, 0.0011578073190567383`], 
        Complex[-0.001259423156833985, 0.0238423543714016]}, {
        Complex[0.0036649307716143035`, -0.02243212912264137], 
        Complex[-0.018091866877256474`, -0.00115780731905674], 
        0.07710120907404097, 
        Complex[0.0055367404314184895`, -0.02176108988262694]}, {
        Complex[0.3588309726404161, 0.020288264390890723`], 
        Complex[-0.0012594231568339846`, -0.0238423543714016], 
        Complex[0.0055367404314184895`, 0.02176108988262694], 
        0.43048998635409197`}}, {
      SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {0.25, -0.25, -0.25, 
         0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25, -0.25, 
         0.25, -0.25, -0.25, 0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {0.25, 0.25, -0.25, -0.25, 0.25,
          0.25, -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 
         0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {0.25, -0.25, 
         0.25, -0.25, -0.25, 0.25, -0.25, 0.25, 0.25, -0.25, 
         0.25, -0.25, -0.25, 0.25, -0.25, 0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {0.25, 0.25, 0.25, 0.25, 0.25, 
         0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25}}], 
       SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
         0.25, Complex[0., 0.25], Complex[0., 0.25], -0.25, Complex[
          0., -0.25], 0.25, 0.25, Complex[0., 0.25], Complex[0., -0.25], 0.25,
           0.25, Complex[0., 0.25], -0.25, Complex[0., -0.25], Complex[
          0., -0.25], 0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
         0.25, Complex[0., -0.25], Complex[0., 0.25], 0.25, Complex[0., 0.25],
           0.25, -0.25, Complex[0., 0.25], Complex[0., -0.25], -0.25, 0.25, 
          Complex[0., -0.25], 0.25, Complex[0., -0.25], Complex[0., 0.25], 
          0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
         0.25, Complex[0., 0.25], Complex[0., -0.25], 0.25, Complex[
          0., -0.25], 0.25, -0.25, Complex[0., -0.25], Complex[
          0., 0.25], -0.25, 0.25, Complex[0., 0.25], 0.25, Complex[0., 0.25], 
          Complex[0., -0.25], 0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {
        1, {{0, 4, 8, 12, 16}, {{1}, {2}, {3}, {4}, {1}, {2}, {3}, {4}, {1}, {
          2}, {3}, {4}, {1}, {2}, {3}, {4}}}, {
         0.25, Complex[0., -0.25], Complex[0., -0.25], -0.25, Complex[
          0., 0.25], 0.25, 0.25, Complex[0., -0.25], Complex[0., 0.25], 0.25, 
          0.25, Complex[0., -0.25], -0.25, Complex[0., 0.25], Complex[
          0., 0.25], 0.25}}], SparseArray[
       Automatic, {4, 4}, 0., {1, {{0, 0, 0, 0, 1}, {{4}}}, {1.}}], 
       SparseArray[
       Automatic, {4, 4}, 0., {1, {{0, 0, 0, 1, 1}, {{3}}}, {1.}}], 
       SparseArray[
       Automatic, {4, 4}, 0., {1, {{0, 0, 1, 1, 1}, {{2}}}, {1.}}], 
       SparseArray[
       Automatic, {4, 4}, 0., {1, {{0, 1, 1, 1, 1}, {{1}}}, {1.}}]}, {1669., 
      320., 285., 1726., 241., 1906., 1617., 236., 1735., 300., 245., 1720.}, 
      0.0055209186422361155`], "TotalCounts" -> 12000, "CountsPerMeasurement" -> 
    4000, "Dimension" -> 4, "MetropolisStepSize" -> 0.0055209186422361155`, 
    "MeasurementOutcomes" -> 12, 
    "Properties" -> {
     "Invertible", "PhysicalInversion", "InversionState", 
      "MaximumLikelihoodState", "MaximumLikelihoodAcceptanceRatio", 
      "MaximumLikelihoodConvergence", "MaximumLikelihoodConvergenceStepSize", 
      "BayesianAcceptanceRatio", "BayesianSampler", "TotalCounts", 
      "CountsPerMeasurement", "Dimension", "MetropolisStepSize", 
      "MeasurementOutcomes"}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8900117940207567`*^9, 3.890011854119836*^9, 
  3.890012014697864*^9, 3.8900120794496193`*^9, 3.890044296708077*^9, 
  3.890044362646702*^9, 3.890047171696005*^9},
 CellLabel->
  "Out[383]=",ExpressionUUID->"ab951a0a-72a2-4dd5-bf50-6a77ba024e21"]
}, Open  ]],

Cell["\<\
Generate 100 states using the corresponding Bayesian sampling function.\
\>", "CodeText",
 CellChangeTimes->{{3.8900132821005573`*^9, 
  3.890013310578074*^9}},ExpressionUUID->"85c40ced-0d2a-453d-8b4b-\
5bab4041d7e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample2a", "=", 
   RowBox[{
    RowBox[{"est2", "[", "\"\<BayesianSampler\>\"", "]"}], "[", "100", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.89001186206511*^9, 3.8900119037859983`*^9}, {
  3.890012039319517*^9, 3.890012044671685*^9}},
 CellLabel->
  "In[384]:=",ExpressionUUID->"2af5d5af-3324-4f2b-b317-fb627bedcb1c"],

Cell["\<\
Show histogram of fidelity with respect to the original quantum state.\
\>", "CodeText",
 CellChangeTimes->{{3.8900133160099287`*^9, 
  3.8900133414767303`*^9}},ExpressionUUID->"ad71d1c2-f18a-4c1b-a111-\
dac4815a335b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"QuantumDistance", "[", 
     RowBox[{"#", ",", "\[Psi]2", ",", "\"\<Fidelity\>\""}], "]"}], "&"}], "/@",
    "sample2a"}], "]"}]], "Input",
 CellChangeTimes->{{3.890011906593874*^9, 3.890011943664322*^9}, {
  3.89001205303537*^9, 3.890012055386671*^9}, {3.890012088239325*^9, 
  3.890012092982463*^9}, {3.890012144204185*^9, 3.89001214637579*^9}},
 CellLabel->
  "In[385]:=",ExpressionUUID->"6d971790-abd4-4e16-ab9d-a3d272bec591"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.644], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.644], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.886, 0}, {0.888, 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{20.269607843139966`, 75.09967320261785}, {
           50.5142559643221, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.888, 0}, {0.89, 10.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{74.59967320261785, 129.42973856209574`}, {
           32.77142692287964, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 10]& ,
        TagBoxNote->"10"],
       StyleBox["10", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[10, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.89, 0}, {0.892, 33.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{128.92973856209574`, 
           183.75980392156998`}, {-103.25692906151257`, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 33]& ,
        TagBoxNote->"33"],
       StyleBox["33", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[33, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.892, 0}, {0.894, 23.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{183.25980392156998`, 
           238.08986928104787`}, {-44.1141655900377, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 23]& ,
        TagBoxNote->"23"],
       StyleBox["23", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[23, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.894, 0}, {0.896, 15.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{237.58986928104787`, 292.41993464052575`}, {
           3.2000451871422086`, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 15]& ,
        TagBoxNote->"15"],
       StyleBox["15", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[15, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.896, 0}, {0.898, 12.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{291.91993464052575`, 346.75000000000364`}, {
           20.94287422858467, 92.41419039435452}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 12]& ,
        TagBoxNote->"12"],
       StyleBox["12", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[12, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.88576, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0.886, 0.898}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.890011933607544*^9, 3.890011944912717*^9}, 
   3.890012056594118*^9, 3.89001214930837*^9, 3.890044301592135*^9, 
   3.890044375611758*^9, 3.8900445580979652`*^9, 3.890047180180677*^9},
 CellLabel->
  "Out[385]=",ExpressionUUID->"e559de06-e33b-43b4-a801-808d40fb3bc2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["KS Test", "Subsection",ExpressionUUID->"3e30e7cd-f886-42be-ba13-0086f24d8109"],

Cell["\<\
Perform the KS test on the 2-qubit bell state in different basis and test the \
fit of qpu data(generated above) to a SimulatedMeasurement distribution.\
\>", "Text",
 CellChangeTimes->{{3.8914338506252728`*^9, 3.8914338879232197`*^9}, {
  3.8914346453493834`*^9, 
  3.891434663752184*^9}},ExpressionUUID->"bcf3e799-6c7d-4f68-b47c-\
dd6828029293"],

Cell["List all qpu results.", "CodeText",
 CellChangeTimes->{{3.89143467474535*^9, 
  3.891434682401498*^9}},ExpressionUUID->"ffd4af65-67ca-4cd2-b33e-\
2d018ed5fea6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qpu2z", "=", 
   RowBox[{"{", 
    RowBox[{"1799", ",", " ", "313", ",", " ", "276", ",", " ", "1612"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu2x", "=", 
   RowBox[{"{", 
    RowBox[{"1736", ",", " ", "326", ",", " ", "246", ",", " ", "1692"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu2y", "=", 
   RowBox[{"{", 
    RowBox[{"274", ",", " ", "1948", ",", " ", "1608", ",", " ", "170"}], 
    "}"}]}], ";"}]}], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"3056083b-1463-4616-8d33-2beca5017d94"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pzz", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<PhiPlus\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pxx", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<X\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<PhiPlus\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pyy", "=", 
   RowBox[{"Counts", "@", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Y\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<PhiPlus\>\"", "]"}], "]"}], "[", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", "4000"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8902347707561207`*^9, 3.8902348310986423`*^9}, {
  3.890234889108324*^9, 3.890234906909772*^9}, {3.890311173679694*^9, 
  3.890311222717677*^9}, {3.890332900053403*^9, 3.890332906078279*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"8a3f296b-041e-4eb2-8658-a1a94563a692"],

Cell[CellGroupData[{

Cell[BoxData["pxx"], "Input",
 CellChangeTimes->{{3.8902348200079947`*^9, 3.890234855846374*^9}, {
   3.89023489604963*^9, 3.890234927103286*^9}, 3.890311232848584*^9},
 CellLabel->"In[37]:=",ExpressionUUID->"942e81e6-5f13-4bec-a832-4f88935e98a2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"x\"", "\"+\""]], "\[InvisibleSpace]", 
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"x\"", "\"+\""]]}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "+"]], 
       Subscript["\[Psi]", 
        Subscript["x", "+"]]}, "Dual" -> False]], "\[Rule]", "1938"}], ",", 
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"x\"", "\"-\""]], "\[InvisibleSpace]", 
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"x\"", "\"-\""]]}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "-"]], 
       Subscript["\[Psi]", 
        Subscript["x", "-"]]}, "Dual" -> False]], "\[Rule]", "2062"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8902348329808397`*^9, 3.890234856062765*^9}, {
   3.8902348972952538`*^9, 3.8902349273723087`*^9}, 3.89031089031394*^9, 
   3.890311233930057*^9, 3.8903329085886307`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"0951f669-d74f-4fc4-8363-f0bdffed880d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataXX", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "\"\<X\>\"", ",", "2", "]", 
  "[", "\"\<Names\>\"", "]", ",", "0", "]", ",", "pxx", "]"}]], "Input",
 CellChangeTimes->{{3.8902354474138193`*^9, 3.8902354562941017`*^9}, {
  3.8902354884895563`*^9, 3.890235490844363*^9}, {3.890311261850554*^9, 
  3.890311286666724*^9}, {3.890311373207429*^9, 3.890311437069955*^9}, {
  3.890311936251933*^9, 3.890311940176077*^9}, {3.8903122239645367`*^9, 
  3.890312312305521*^9}, {3.890312389023604*^9, 3.890312393470791*^9}, {
  3.890313275775676*^9, 3.890313280175922*^9}, {3.8903133461764793`*^9, 
  3.890313379698946*^9}, {3.8903329133606253`*^9, 3.8903329217732*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"6b596599-9ed4-4c93-a612-2e9826590cb5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1938", ",", "0", ",", "0", ",", "2062"}], "}"}]], "Output",
 CellChangeTimes->{{3.890311431033052*^9, 3.890311438877429*^9}, 
   3.89031194099971*^9, 3.890312224647501*^9, 3.890312394389511*^9, 
   3.8903132808287363`*^9, {3.8903133506840982`*^9, 3.890313380180286*^9}, 
   3.890332922403409*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"fd55d1dd-dde2-4903-8074-9d7d311b7e2f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu2x", ",", "dataXX", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}, {
  3.890311282427256*^9, 3.8903112941821136`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"7a87f186-7e89-4397-869f-17dfedc6056a"],

Cell[BoxData["0.7714285714285715`"], "Output",
 CellChangeTimes->{3.890235494987208*^9, 3.8903109054748287`*^9, 
  3.8903112959029016`*^9, 3.890311445619403*^9, 3.890311504436213*^9, 
  3.890311945645762*^9, 3.8903122287765017`*^9, 3.8903124033720827`*^9, 
  3.890313283100842*^9, 3.8903329261875134`*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"c84e69b1-8c46-4009-bdf4-aa784b963181"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["pyy"], "Input",
 CellChangeTimes->{{3.8902348200079947`*^9, 3.890234855846374*^9}, {
   3.89023489604963*^9, 3.890234927103286*^9}, {3.890235511185421*^9, 
   3.890235511368017*^9}, 3.890311648946954*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"f51d8a64-ee06-4009-a4f0-2a7cc7ce7c23"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"y\"", "\"+\""]]}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]]}, "Dual" -> False]], "\[Rule]", "2015"}], ",", 
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
         SubscriptBox["\"\[Psi]\"", 
          SubscriptBox["\"y\"", "\"-\""]]}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]]}, "Dual" -> False]], "\[Rule]", "1985"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8902348329808397`*^9, 3.890234856062765*^9}, {
   3.8902348972952538`*^9, 3.8902349273723087`*^9}, 3.890235511756918*^9, 
   3.890310908771611*^9, 3.890311649608691*^9, 3.890332934526517*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"64412024-437b-41c5-aa9c-6ae1a71d8db3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataYY", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "\"\<Y\>\"", ",", "2", "]", 
  "[", "\"\<Names\>\"", "]", ",", "0", "]", ",", "pyy", "]"}]], "Input",
 CellChangeTimes->{{3.8902354474138193`*^9, 3.8902354562941017`*^9}, {
   3.8902354884895563`*^9, 3.890235490844363*^9}, {3.8902355316451597`*^9, 
   3.890235545957773*^9}, {3.890311658181348*^9, 3.890311689825404*^9}, 
   3.8903123168719053`*^9, {3.8903123531750393`*^9, 3.890312357278421*^9}, {
   3.890312424659094*^9, 3.890312428953083*^9}, {3.890313265009543*^9, 
   3.8903132896638727`*^9}, {3.890332941497735*^9, 3.89033294425301*^9}, {
   3.890332984627008*^9, 3.8903329848088627`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"71da8acd-d207-4f6a-a3d2-1237d16721a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1985", ",", "2015", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.890235450740218*^9, 3.8902354570616837`*^9}, 
   3.8902354912097683`*^9, {3.890235541594885*^9, 3.890235546170573*^9}, 
   3.890310924988802*^9, {3.8903116712912197`*^9, 3.890311690760131*^9}, 
   3.890312317447974*^9, 3.8903123578412952`*^9, 3.8903124293234463`*^9, 
   3.8903132911988153`*^9, 3.890332944618311*^9, 3.8903329851591797`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"6c988293-8b16-48ee-87cb-1f022bc196dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu2y", ",", "dataYY", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}, {
  3.890235549769836*^9, 3.8902355517966757`*^9}, {3.890311700974107*^9, 
  3.890311704631439*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"1af7b046-41cb-45ef-95cd-6b0537e4e3d5"],

Cell[BoxData["0.7714285714285715`"], "Output",
 CellChangeTimes->{3.890235494987208*^9, 3.890235552146975*^9, 
  3.890310930820805*^9, 3.890311705390924*^9, 3.890312319499537*^9, 
  3.890312360291469*^9, 3.890312431878812*^9, 3.8903132942348013`*^9, 
  3.890332948072318*^9, 3.8903329879309607`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"efe7c371-44de-4417-af44-430947f2549e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["pzz"], "Input",
 CellChangeTimes->{{3.8902348200079947`*^9, 3.890234855846374*^9}, {
   3.89023489604963*^9, 3.890234927103286*^9}, {3.8902355561750793`*^9, 
   3.8902355563465147`*^9}, 3.8903123678006983`*^9},
 CellLabel->"In[45]:=",ExpressionUUID->"341e8015-1f7b-42f8-ba7b-1794090fad92"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{"0", "\[InvisibleSpace]", "0"}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{0, 0}, "Dual" -> False]], "\[Rule]", 
    "2003"}], ",", 
   RowBox[{
    InterpretationBox[
     TemplateBox[{
       RowBox[{"1", "\[InvisibleSpace]", "1"}]},
      "Ket"],
     Wolfram`QuantumFramework`QuditName[{1, 1}, "Dual" -> False]], "\[Rule]", 
    "1997"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8902348329808397`*^9, 3.890234856062765*^9}, {
   3.8902348972952538`*^9, 3.8902349273723087`*^9}, 3.89023555702207*^9, 
   3.890310933790587*^9, 3.8903123682817087`*^9, 3.8903329899991217`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"4b98531f-3752-42b1-bee4-e2282c5a82ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataZZ", "=", "Values", "@", "Reverse", "@", "Join", "[", 
  "AssociationThread", "[", "QuantumBasis", "[", "2", ",", "2", "]", "[", 
  "\"\<Names\>\"", "]", ",", "0", "]", ",", "pzz", "]"}]], "Input",
 CellChangeTimes->{{3.8902354474138193`*^9, 3.8902354562941017`*^9}, {
  3.8902354884895563`*^9, 3.890235490844363*^9}, {3.89023555991247*^9, 
  3.8902355617388144`*^9}, {3.890312449686871*^9, 3.890312473949752*^9}, {
  3.8903329955819397`*^9, 3.890333004122024*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"c13ce41e-2f2d-437d-a9cc-b838f7aa8b58"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1997", ",", "0", ",", "0", ",", "2003"}], "}"}]], "Output",
 CellChangeTimes->{{3.890235450740218*^9, 3.8902354570616837`*^9}, 
   3.8902354912097683`*^9, 3.890235562253984*^9, 3.8903109365271273`*^9, 
   3.890312474419867*^9, {3.890332997731687*^9, 3.890333004475215*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"66aa87a5-1a68-42ff-a418-8f75990042b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu2z", ",", "dataZZ", "]"}]], "Input",\

 CellChangeTimes->{{3.890235474112357*^9, 3.8902354946291037`*^9}, {
  3.8902355640183372`*^9, 3.890235565675729*^9}, {3.890312481180607*^9, 
  3.890312483896946*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"0350ab9f-bc9d-42dd-87ce-54c86e76a980"],

Cell[BoxData["0.7714285714285715`"], "Output",
 CellChangeTimes->{
  3.890235494987208*^9, 3.890235566242085*^9, 3.8903109391181192`*^9, 
   3.890312484502901*^9, {3.8903330000996237`*^9, 3.89033300594063*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"e24f2526-3ccb-4c39-b986-2d1fb32aa4f4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GHZ state", "Section",
 CellChangeTimes->{{3.886584543943859*^9, 3.886584554368469*^9}, {
  3.886584585548459*^9, 3.886584606567541*^9}, {3.886592159701622*^9, 
  3.8865921603792677`*^9}},ExpressionUUID->"6145a6a3-9a51-4c33-a061-\
7244d3d8ef28"],

Cell[TextData[{
 "The Greenberger-Horne-Zeilinger (GHZ) state is a specific example of a \
multipartite entangled state involving three or more qubits. GHZ states are \
particularly interesting because they exhibit strong correlations among all \
the qubits involved, making them a valuable tool for studying entanglement \
properties and quantum nonlocality.\nFor a three-qubit system, the GHZ state \
is represented as: ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SqrtBox["2"]], TraditionalForm]],ExpressionUUID->
  "6f38fac3-20d1-4edb-b000-bf8302e3d691"],
 "(\[Divides]000\:27e9+\[Divides]111\:27e9)\nThe amplitudes of the basis \
states, ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", 
    SqrtBox["2"]], TraditionalForm]],ExpressionUUID->
  "4a8c6550-5ab7-4a9b-89c6-3d8a22ff15c8"],
 " for both ",
 Cell[BoxData[
  TemplateBox[{"000"},
   "Ket"]],ExpressionUUID->"d7abc2d0-fa62-4d06-afab-6c1572f6c5af"],
 "and ",
 Cell[BoxData[
  TemplateBox[{"111"},
   "Ket"]],ExpressionUUID->"68b0b606-de47-45eb-a54f-d13e8ba488e1"],
 ", represent the probability amplitudes of finding the three-qubit system in \
either the  ",
 Cell[BoxData[
  TemplateBox[{"000"},
   "Ket"]],ExpressionUUID->"5ac32c12-a246-45c1-8b23-9c6f092d1c19"],
 "or ",
 Cell[BoxData[
  TemplateBox[{"111"},
   "Ket"]],ExpressionUUID->"0a4b9698-3178-493b-89ed-45e90bb2fe32"],
 " state upon measurement. In this case, the probabilities of measuring the \
qubits in either of the state are equal, each being ",
 Cell[BoxData[
  FormBox[
   FractionBox["1", "2"], TraditionalForm]],ExpressionUUID->
  "6b7e353a-7094-4721-bf6e-706ca9fda090"],
 "."
}], "Text",
 CellChangeTimes->{
  3.8897928270652313`*^9, {3.8897929868939743`*^9, 3.889793100314802*^9}, {
   3.889793162934494*^9, 3.889793166435608*^9}, {3.889793245073435*^9, 
   3.889793269145582*^9}, 
   3.889793603130515*^9},ExpressionUUID->"7357377f-e2dc-4020-848f-\
b2624a5a25b0"],

Cell[CellGroupData[{

Cell["Define state", "Subsection",
 CellChangeTimes->{{3.886552717055009*^9, 
  3.8865527209438963`*^9}},ExpressionUUID->"e01cd60b-75fb-442e-8d9d-\
c612a3e5e032"],

Cell["Define GHZ state", "CodeText",
 CellChangeTimes->{{3.889793314191566*^9, 
  3.889793322638218*^9}},ExpressionUUID->"02dbf7d2-0d81-46bb-a626-\
d4945a9405ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Psi]3", "=", 
   RowBox[{"QuantumState", "[", "\"\<GHZ\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8865527093950644`*^9, 3.886552709398883*^9}, {
  3.886584516694098*^9, 3.886584517657381*^9}, {3.886584613267748*^9, 
  3.886584625211287*^9}, {3.886591270894042*^9, 3.8865912793434258`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"38d81484-264c-48f8-864a-ed200329332b"],

Cell["\<\
Create quantum circuit using the above state in different basis.\
\>", "CodeText",
 CellChangeTimes->{{3.886552758172372*^9, 3.886552764537179*^9}, {
  3.889793328305327*^9, 
  3.889793352144421*^9}},ExpressionUUID->"1e83d1e3-3185-46fc-8c7c-\
a856f42e168c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qcZZZ", "=", 
   RowBox[{
    RowBox[{"QuantumMeasurementOperator", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "@", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]3", "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qcXXX", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<H\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]3", "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qcYYY", "=", 
   RowBox[{
    RowBox[{"QuantumCircuitOperator", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"QuantumOperator", "[", "\"\<S\>\"", "]"}], "[", 
         "\"\<Dagger\>\"", "]"}], "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", 
       RowBox[{"\"\<H\>\"", "->", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}], "@*", 
    RowBox[{"QuantumCircuitOperator", "[", "\[Psi]3", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.886552746992299*^9, 3.8865527776831923`*^9}, {
  3.88658463642314*^9, 3.886584691952565*^9}, {3.886591283185308*^9, 
  3.886591304404334*^9}, {3.887724764847848*^9, 3.887724775524716*^9}, {
  3.887725155997666*^9, 3.887725163283846*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"60b1eaf9-f6a4-4fd6-8f0b-8f6b51de3694"],

Cell["Extract the parameters.", "CodeText",
 CellChangeTimes->{{3.889793362365444*^9, 
  3.889793415113461*^9}},ExpressionUUID->"5987c8a0-32fc-4b8a-b527-\
e936c8efc835"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"names3ea", ",", "params3ea"}], "}"}], "=", 
   RowBox[{"Reap", "[", 
    RowBox[{
     RowBox[{"QuantumLabelName", "[", "qcZZZ", "]"}], ",", "_", ",", "Rule"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"names3eb", ",", "params3eb"}], "}"}], "=", 
   RowBox[{"Reap", "[", 
    RowBox[{
     RowBox[{"QuantumLabelName", "[", "qcXXX", "]"}], ",", "_", ",", "Rule"}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"names3ec", ",", "params3ec"}], "}"}], "=", 
   RowBox[{"Reap", "[", 
    RowBox[{
     RowBox[{"QuantumLabelName", "[", "qcYYY", "]"}], ",", "_", ",", "Rule"}],
     "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.889321756126562*^9, 3.8893217697341337`*^9}, 
   3.889328437872856*^9, {3.889330764213668*^9, 3.8893307939366503`*^9}, {
   3.889331288093313*^9, 3.889331294523308*^9}, {3.889331376100462*^9, 
   3.889331381443612*^9}, {3.889335964359744*^9, 3.889336035418988*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"376e789a-2eea-4057-a551-2307d3e935b8"],

Cell[TextData[{
 "Note that qiskit con",
 StyleBox["version fallbacks to unitaries, which is not good for transpiling \
on QPU, therefore different treatment compared to example cases.", "Text"]
}], "Text",
 CellChangeTimes->{{3.889793510134194*^9, 3.8897935804531527`*^9}, {
  3.8897936131857777`*^9, 3.889793640168827*^9}, {3.889794792804912*^9, 
  3.8897948204333363`*^9}},ExpressionUUID->"c9e929af-bb45-4ea2-9194-\
afbaec865b09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qiskitex3a", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"QuantumCircuitOperator", "[", "names3ea", "]"}], "[", 
     "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex3b", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"QuantumCircuitOperator", "[", "names3eb", "]"}], "[", 
     "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"qiskitex3c", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"QuantumCircuitOperator", "[", "names3ec", "]"}], "[", 
     "\"\<Qiskit\>\"", "]"}], "[", "\"\<Decompose\>\"", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.88932847137263*^9, 3.889328494139751*^9}, {
   3.8893308117707663`*^9, 3.889330812575713*^9}, {3.889331297124036*^9, 
   3.889331299745491*^9}, 3.889331405952787*^9, 3.889333468639677*^9, {
   3.889336044945434*^9, 3.88933608075766*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"9e85ff9e-c8e8-409f-8eac-22d77238a5e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["QPU ", "Subsection",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{
  3.483202458956718*^9, {3.514308604990972*^9, 3.514308608117634*^9}, {
   3.885374080523435*^9, 
   3.885374096259903*^9}},ExpressionUUID->"49eefb15-eb8a-4095-8382-\
47b4f3afc77a"],

Cell["\<\
We use the similar approach to run above GHZ quantum circuit: 
(i) Encode the converted circuit (PauliZ, PauliX, PauliY basis circuit)
(ii) Send the query on backend and get its information.
(iii) Check the job status. Run below steps only when the status is \
completed.
(iv) Extract the QPU and WQF results respectively.
(v) Plot the results on bar graph and compare.\
\>", "Text",
 CellChangeTimes->{{3.88979376998843*^9, 3.889793773464685*^9}, {
  3.889793873527464*^9, 3.8897938809758253`*^9}, {3.8897945088907843`*^9, 
  3.889794538712554*^9}, {3.8897945704765368`*^9, 3.889794592677807*^9}, {
  3.88979464652862*^9, 3.889794654826655*^9}, {3.889794837568095*^9, 
  3.889795022629903*^9}, {3.889795229055934*^9, 
  3.889795305711646*^9}},ExpressionUUID->"525e537a-1228-43cc-a71a-\
8e2652cc0204"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex3a", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex3a", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.887632422207745*^9, 3.887632424907255*^9}, {
   3.887666831663142*^9, 3.887666831963728*^9}, 3.887666995702601*^9, 
   3.887667822030875*^9, {3.887668359644808*^9, 3.887668364857914*^9}, {
   3.887668636730061*^9, 3.887668641904235*^9}, {3.88766921631632*^9, 
   3.887669221789707*^9}, {3.887670076670994*^9, 3.887670079841366*^9}, {
   3.887675990432712*^9, 3.887675998857706*^9}, {3.887676471231103*^9, 
   3.8876764774280767`*^9}, {3.8876793017940683`*^9, 3.887679363129356*^9}, {
   3.8877279672124033`*^9, 3.887727972169141*^9}, {3.8878729232726173`*^9, 
   3.887872928113871*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"87aa2c8c-8cdf-48ba-9cae-058fa63f0167"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex3a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex3a"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.887667072681476*^9, 3.887667075376198*^9}, {
   3.8876680402116117`*^9, 3.887668042370393*^9}, {3.8876683698581667`*^9, 
   3.8876683726636763`*^9}, {3.887668646011137*^9, 3.887668654221838*^9}, {
   3.887669227849742*^9, 3.887669233238274*^9}, {3.887670083249711*^9, 
   3.887670086241091*^9}, {3.887676010770681*^9, 3.887676015478256*^9}, {
   3.8876764803899937`*^9, 3.887676483754882*^9}, {3.887679320077704*^9, 
   3.887679328041493*^9}, {3.887679369648963*^9, 3.887679392072727*^9}, {
   3.887798024092078*^9, 3.887798027050323*^9}, 3.887798104351062*^9, {
   3.887872931455192*^9, 3.887872934077766*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"942ccc22-eb4f-4742-aeba-0601e584b965"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex3a", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887667170113241*^9, 3.887667170117807*^9}, {
  3.887667310897234*^9, 3.887667322674653*^9}, {3.8876680530699787`*^9, 
  3.887668059033929*^9}, {3.887668395117992*^9, 3.887668395370492*^9}, {
  3.8876686716390753`*^9, 3.887668673041271*^9}, {3.887669264206493*^9, 
  3.887669265345109*^9}, {3.8876700920215673`*^9, 3.887670092296917*^9}, {
  3.8876760264421663`*^9, 3.887676028520143*^9}, {3.88767648939774*^9, 
  3.887676489537549*^9}, {3.887679437421307*^9, 3.887679465080717*^9}, {
  3.887798047567432*^9, 3.8877980665116453`*^9}, {3.8877981003432817`*^9, 
  3.8877981365716543`*^9}, {3.887872937674727*^9, 3.8878729378863*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"a43f15a9-9d2e-41af-a732-4ab292456aca"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolgimmln5f44j098lg", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__value__" -> 
           "eJztXc1u00AQ3o3pj8QZATd6agukSuIkrkGoFSBQhThAe6h6iyxHshS11E1ulbjwLj\
xED+UVqLjwCH2ECiGR2Ns4cR3qWf+t02+kSI2z45mdmf1mdrJOP+3sftjZW2QPOfOJH7P7XbY8/\
Gth+NLE1XvDV0UM+GY5rjVw+tVGo7H94O/\
Z5dn37uGg1zvmHhMf3mGarm8tbhDc1OLeO86tWzgYWxRXOYumzwfvO33bk2yLS2ZoyPq73lGnv7Za3\
2gZNcNs6422YTbNWq2++vzJF9e2nBPn6PBVS1/3pE3qEabd/\
bG0AjSLJ43nagdekGYVdoM8Jd4EHgrUi8fAA7+\
SJCxMfBpFoZj531BJu3bFpeVH1bd7f1YutzISpI0FPfYEXZ0TBGlSgvwZXW0R3KJJx+\
XL0JBnIi6rtQ1js6Wbm/W2rptGs2mYrXQik6jgi9CQp0LBdPWbQwOO4+nniv719HflR+ZL8SJbQVq+\
IcGDFRyPQZNCX4oEchCwtEym/KKIx8DJqJzzjLKPIbIEQHdx0P0rZ+\
jeBnRnJAHQHWmP2BsJinPmCkTzTzxKojzWD0vorxLtB0akwqolS5jopxCjNHHYKLlqyf0lQDegG9Ad\
VhDQDeguCLoJnf5Manl0bNCxQccGHRt0bMLi0GwHdAO6U4Ru9YtrQHc8BkB3pD1QoFNnlJEEoDwK9K\
SCgPJA+Zn2iMcA6AZ0lwC6C1q1c3uWHPklHgPyS6Q9JM7+K+R+iT3Q7as4yTl/0pML5C+\
0kN2R3T1SNruj/\
YbEeTcSJ6Ab0F2OKEVPLTQE0D1Ndw268ZjCFJXp7CTOupbLXyXaD4xIhVWLs654TAHQDegu2l8l2g+\
MSIVVC+jGYwrThI5NiNCxmaUgmu3o2KBsSbHZnqUEiV/ZUzebJClbyCYgS1AdOpTMdohqFOP5F+\
OEYEhSu8gd0JGoXSQP6MRjULCYUL8pgSZSufw1d00kBXfeyFsz7UFgAHQDulPRD/\
7Cgxo5glf2O70CO6dK7v2FPZbEp9pNBo9ed1zXsd2Aw7f7NdusqX20OycD13etReXw/h8Jp3Bolj/\
nf7mC5qA=", "__type__" -> "QuantumCircuit"|>|>, 
       "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:04:26.164612Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolgimmln5f44j098lg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:04:26.164612Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8877981189514627`*^9, 3.887798139742697*^9}, 
   3.887798222466317*^9, {3.887872670152114*^9, 3.887872676280972*^9}, {
   3.887872718983329*^9, 3.887872772743863*^9}, 3.889336124040161*^9, 
   3.8893367614902143`*^9, 3.8893370920344973`*^9, 3.8899442678838253`*^9, 
   3.88995743582444*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"c41acc9b-97d3-485c-903d-46c8200b66dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex3a", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex3a", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex3a", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex3a", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex3a", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex3a", "=", 
  RowBox[{
   RowBox[{"qcZZZ", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.887798130280224*^9, 3.887798131738863*^9}, {
   3.887798278313134*^9, 3.88779827913517*^9}, {3.887872941602105*^9, 
   3.887872952775771*^9}, {3.889336165846807*^9, 3.889336166078409*^9}, {
   3.8900121627442636`*^9, 3.890012165807304*^9}, 3.890347261491272*^9},
 CellLabel->
  "In[645]:=",ExpressionUUID->"1d048602-c454-4d4f-9180-d99500bbc0b9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "605"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "574"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "629"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "614"}], ",", 
   RowBox[{"\<\"0x4\"\>", "\[Rule]", "406"}], ",", 
   RowBox[{"\<\"0x5\"\>", "\[Rule]", "340"}], ",", 
   RowBox[{"\<\"0x6\"\>", "\[Rule]", "386"}], ",", 
   RowBox[{"\<\"0x7\"\>", "\[Rule]", "446"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.889337096889584*^9, 3.8899574392884703`*^9, 3.8900121716680326`*^9, 
   3.890347264760067*^9},
 CellLabel->
  "Out[646]=",ExpressionUUID->"113bc97c-4a6e-4c83-859c-88e8a0a256a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.15125`", ",", "0.1435`", ",", "0.15725`", ",", "0.1535`", ",", "0.1015`",
    ",", "0.085`", ",", "0.0965`", ",", "0.1115`"}], "}"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.889337096889584*^9, 3.8899574392884703`*^9, 3.8900121716680326`*^9, 
   3.890347264776403*^9},
 CellLabel->
  "Out[647]=",ExpressionUUID->"5626113b-e70c-4d76-b12d-e88217072bd2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "2"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "2"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.887667315100727*^9, 3.887667335475731*^9}, {
   3.8876680014747753`*^9, 3.887668026449049*^9}, {3.887668061887803*^9, 
   3.887668082981303*^9}, 3.887668135614912*^9, 3.88766844199762*^9, 
   3.8876684759973707`*^9, {3.8876688124807987`*^9, 3.887668887974403*^9}, {
   3.887668921036212*^9, 3.8876689693638*^9}, {3.8876693056465883`*^9, 
   3.887669334511814*^9}, 3.887669368720138*^9, {3.887669438760406*^9, 
   3.887669474609213*^9}, 3.887669548442938*^9, 3.887669580073913*^9, 
   3.887669633112788*^9, 3.887669670182526*^9, 3.8876697039743643`*^9, 
   3.887669745143312*^9, 3.887669786506377*^9, 3.887669820437867*^9, 
   3.887670377571479*^9, {3.887670446988841*^9, 3.887670516823597*^9}, 
   3.889337096889584*^9, 3.8899574392884703`*^9, 3.8900121716680326`*^9, 
   3.890347264886813*^9},
 CellLabel->
  "Out[648]=",ExpressionUUID->"e7cdf8cc-0e60-4940-bb2b-6df510f90bd6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex3b", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex3b", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"a223db8c-abfc-4727-bf71-3d5b7ad4839c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex3b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex3b"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.889336155827938*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"81dd63f5-08d9-4700-9422-125b6b43ab0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex3b", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8877980497272787`*^9, 3.8877980782163553`*^9}, {
  3.8877981727076263`*^9, 3.88779823241278*^9}, {3.8878729613945227`*^9, 
  3.887872968208302*^9}, {3.887873347494863*^9, 3.8878733541187143`*^9}, {
  3.88933614708531*^9, 3.889336153368689*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"b1ca14ca-5575-4fe9-999f-0dcc20ed55b6"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolgmk42478c3i73o80", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJztXctu00AUnYlpicQHQHfNqhRI5eAkrotQK6hAFWIBzQKxiyxXshS11E12lVjyWe\
UXQGz4BD6h6gbHduNkcOjM+DV2zpUiNe5c3+v7ODM+Hdcfjo7fHQ3WyUNKQqHn5MEJafo/\
rfkfLTp6z/80ogHfbNezJ+64bejGwUbrZnDYbp5ORqNzGihR/\
wyLcnvq6ATxSW0afKPUvkODkPXoKCXJ8vHz2+HYCSw70SGLGbL9ZnQ2HD/e6uz0TN20+\
sbzvml1LV3vbD3b/OI5tnvhnp2+7BnbgbV5P1g5/\
jSzVoJnfNZooXGgJXnWIP9I4MTrOEOxe3wKNM6rkIW1ud8mCVMz/xsqGdeT6FDzUftwcNP6s5+\
TIW1maCMwdH0lYEiTMhRe0fW+\
QFo06bp8wQx5GtVlW98xd3uGtdvpG4Zldrum1cumMgUd3GOGPIkczNa/GgZwVk8/WsbXy9+\
N77m34s98DWnFlgSNO5hPQZNCXxELwkVAsgqZ8k3Bp0CFUbngK8q/hoQtALrLg+\
5fBUP3AaA7JwuA7sR4cN9IiCSnViBa/\
MSjJMqjf0jKfFXofmAqKnStsIU5PkWwSlOXjZJdK8wvAboB3YBu1kFAN6C7JOgWYPpzWcuDsQFjA8Y\
GjA0YG9YcyHZAN6A7Q+hWf3EN6OZTAHQnxgMLdNEryskCUB4L9LSGgPJA+\
aXx4FMAdAO6KwDdJXVtbfeSY37hU8D8khgPib3/\
CqVf4h7o7i5Os89f6MkF4T9oYXbH7B6IsrM76DdMnKsxcQK6Ad3VqFJwaswQQPeirBp04zGFBanS3k\
nsda1Wvip0PzAVFboWe13xmAKgG9Bddr4qdD8wFRW6FtCNxxQWBYwNI2BsljlYa7J9KnlRqxL/\
8awKJFLBXaQm0KWZUfkU8q+5GiIPoHt1oFt1nORTANleJ7I9TXIELBSzssBUSoRjVvfVGJ9/\
qGpQLhmy5ZwZTkMMyu2tlCAGJfdW8ikouJhQn08G/1+tfM26b5Pd2axCg8hZAO5nEA+\
8nqLAOBT9SNH9SEUjyfJq6Hmu48UVFDburdoyR987w4uJF3Zu+\
M4UAQ1iB2MENIL3svg98BcvVfsk"|>|>, "program" -> <|"id" -> "circuit-runner"|>, 
       "created" -> "2023-04-08T12:04:42.696179Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolgmk42478c3i73o80", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:04:42.696179Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8893361830273046`*^9, 3.889336767432086*^9, 
  3.889337103345306*^9, 3.8899442843946133`*^9, 3.889957446382205*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"e9156fbb-a795-462b-a0e4-87fcf011b832"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex3b", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex3b", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex3b", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex3b", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex3b", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex3b", "=", 
  RowBox[{
   RowBox[{"qcXXX", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{
  3.887798175125793*^9, {3.8877982895882397`*^9, 3.887798290350779*^9}, {
   3.8878729702920837`*^9, 3.887872982281684*^9}, {3.889336171398741*^9, 
   3.8893361716173697`*^9}, {3.89001217218582*^9, 3.890012174906885*^9}, 
   3.8903472691875057`*^9},
 CellLabel->
  "In[649]:=",ExpressionUUID->"ebe8879f-abf7-4008-806d-70e4358eab2f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "553"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "411"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "527"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "394"}], ",", 
   RowBox[{"\<\"0x4\"\>", "\[Rule]", "644"}], ",", 
   RowBox[{"\<\"0x5\"\>", "\[Rule]", "441"}], ",", 
   RowBox[{"\<\"0x6\"\>", "\[Rule]", "628"}], ",", 
   RowBox[{"\<\"0x7\"\>", "\[Rule]", "402"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.889337106891852*^9, 3.889957464294142*^9, 
  3.890012176462367*^9, 3.890347271200036*^9},
 CellLabel->
  "Out[650]=",ExpressionUUID->"e7d72fd3-e45a-4587-8a8f-031efdce10ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13825`", ",", "0.10275`", ",", "0.13175`", ",", "0.0985`", ",", "0.161`",
    ",", "0.11025`", ",", "0.157`", ",", "0.1005`"}], "}"}]], "Output",
 CellChangeTimes->{3.889337106891852*^9, 3.889957464294142*^9, 
  3.890012176462367*^9, 3.890347271216434*^9},
 CellLabel->
  "Out[651]=",ExpressionUUID->"895dd977-72bb-4f28-a3f5-b0b57affeab2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "4"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "4"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
    "\[Rule]", "0"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "4"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "4"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
    "\[Rule]", "0"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.889337106891852*^9, 3.889957464294142*^9, 
  3.890012176462367*^9, 3.8903472713263683`*^9},
 CellLabel->
  "Out[652]=",ExpressionUUID->"f46d032b-1b58-4e65-9227-913ebf464794"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"qpyex3c", "=", 
   RowBox[{"BaseEncode", "@", 
    RowBox[{"qiskitex3c", "[", 
     RowBox[{"\"\<QPY\>\"", ",", 
      RowBox[{"\"\<Provider\>\"", "->", "\"\<IBMProvider\>\""}], ",", 
      RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"01fad745-b5cc-4f31-bbcd-33a8830cc402"],

Cell[BoxData[
 RowBox[{
  RowBox[{"idex3c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<RunCircuit\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<QPY\>\"", "->", "qpyex3c"}], ",", 
       RowBox[{"\"\<Backend\>\"", "->", "\"\<ibmq_belem\>\""}]}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.889336209905655*^9, 3.889336226303668*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"debdb3c2-f876-4adc-8262-b6f81d87c752"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ibm", "[", 
  RowBox[{"\"\<JobStatus\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<JobID\>\"", "->", 
     RowBox[{
      RowBox[{"Values", "[", 
       RowBox[{"Normal", "[", "idex3c", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.8877982351778*^9, {3.8878729909555902`*^9, 3.887872996656012*^9}, {
   3.887873358396165*^9, 3.887873364472849*^9}, {3.889336198727487*^9, 
   3.88933620655363*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"ba3181ce-22f3-46c3-b357-f969f3ff263a"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "id" -> "cgolgqrnv0iib9vsjhvg", "hub" -> "ibm-q", "group" -> "open", 
       "project" -> "main", "backend" -> "ibmq_belem", 
       "state" -> <|"status" -> "Completed"|>, 
       "params" -> <|
        "circuits" -> <|
          "__type__" -> "QuantumCircuit", "__value__" -> 
           "eJztXc1u00AQ3o3pn3gA6I2cSgFXCU7iGIRaQQWqEAdoDohbZLlSpKilbnKrxAPwUP\
QVirjwCDxC1QuO48bJ4lDP+m/tfiNFatwdz3h25pvZyW7y8eDw/UFvlT3gbEr8lN0/\
YuveXyveSwuu3vNetWDAd3vg2uPBSDe65t5m/bq3r28cj4fDU+4zce8Oi3Rz6+AG4U1t7r/\
j3L6Fg7HV4Cpn0fTpy7v+yPElO8ElSxiy/\
XZ40h893mrutM2GaXWM5x3TalmNRnPr2aOvrmMPzgYnx6/axrYvbV4PkQ4/z6QVoFk8aTxXO/\
CCNKuxf8hX4k04Q6F68Rh4OK8kCStz/40iwWf+N1TSrkfBpfWH+n7vuv5nNyNB2kzQpi/\
o6gdBkCYlaPpEV7uEadGk/fKlMORp4Jd6Y8fstg2r2+wYhmW2WqbVTscziQq+\
EIY8CRRMV78KGnDmT5d149v579pF5qH4M1tBWr4uwcMIjsegSaEvRQLZCVhaJlM+KOIxcDIq5/\
xE2fsQWQKguzjo/\
pUzdO8BujOSAOiOtEfshQRlcioFovknHiVRHvHDEs5XidYDE1IhaskS5vopRC9N7DZKRi25vwToBnQ\
DukUFAd2A7oKgm9Dpz6SWR8cGHRt0bNCxQcdGFIdmO6Ab0J0idKtfXAO64zEAuiPtgQKd+\
kQZSQDKo0BPKggoD5Rfao94DIBuQHcJoLugqK3sXnLkl3gMyC+R9pDY+6/Q9EusgW6P4iT7/\
EknF8gfaCG7I7v7pGx2R/\
sNifNuJE5AN6C7HF6KnpowBNC9SHcNunFMYYHKtHcSe13LNV8lWg9MSIWoxV5XHFMAdAO6i56vEq0H\
JqRC1AK6cUxhkdCxEQgdm2UKotmOjg3KlhSb7VlKkPiWPXWzSZKyhWwCsgTVoUPJbAevRjGefzFOcI\
YktYvcBh2J2kVyg048BgWLCfWbEmgilWu+KtdEUnDljby11B4EBkA3oDsV/aoyX3k1fcQvf9+\
4yDLWs18YFdhoVHKpnD5S6Pi5iSKOCKVrdi1Xs0t9mJNAs7WARWPR9LrvugPHDeNjijI3bMsU/\
eD0z8buFMhsKof/YzWcwqFNOLwI/wvAWSGV"|>|>, 
       "program" -> <|"id" -> "circuit-runner"|>, "created" -> 
       "2023-04-08T12:04:59.923619Z", "cost" -> 14400, "status" -> 
       "Completed"|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], 
     "InitialType" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"id"} -> 
        TypeSystem`PackageScope`AtomShape[224.00000000000003`], {"hub"} -> 
        TypeSystem`PackageScope`AtomShape[56.00000000000001], {"group"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"project"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"backend"} -> 
        TypeSystem`PackageScope`AtomShape[112.00000000000001`], {"state"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"params"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"program"} -> 
        TypeSystem`PackageScope`ElidedShape[1], {"created"} -> 
        TypeSystem`PackageScope`AtomShape[302.40000000000003`], {"cost"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"status"} -> 
        TypeSystem`PackageScope`AtomShape[100.80000000000001`]|>, 1], "Type" -> 
     TypeSystem`Struct[{
       "id", "hub", "group", "project", "backend", "state", "params", 
        "program", "created", "cost", "status"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[String], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Assoc[
          TypeSystem`Atom[
           TypeSystem`Enumeration["__type__", "__value__"]], 
          TypeSystem`Atom[String], 2], 1], 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String], 1], 
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 11, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["id", 
                  Style[
                  "id", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["id"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["cgolgqrnv0iib9vsjhvg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["id"]}, "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["hub", 
                  Style[
                  "hub", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["hub"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibm-q", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["hub"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["group", 
                  Style[
                  "group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["group"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["open", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["project", 
                  Style[
                  "project", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["project"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["main", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["project"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["backend", 
                  Style[
                  "backend", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["backend"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["ibmq_belem", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["backend"]}, "Item", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["state", 
                  Style[
                  "state", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"status" -> "Completed"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["state"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["state"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["params", 
                  Style[
                  "params", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Tooltip[
                    Row[{"\[LeftAssociation] ", 
                    Subscript["\[Ellipsis]", 1], "\[RightAssociation]"}], 
                    Row[{"Keys: ", 
                    
                    Row[{"circuits"}, ", ", 
                    BaseStyle -> (ShowStringCharacters -> True)]}], 
                    TooltipDelay -> 0.1], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["params"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["params"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["program", 
                  Style[
                  "program", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[<|"id" -> "circuit-runner"|>, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["program"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["program"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["created", 
                  Style[
                  "created", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["created"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2023-04-08T12:04:59.923619Z", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["created"]}, "Item", False], "Mouse"], 
              ImageSize -> {{302.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["cost", 
                  Style[
                  "cost", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["cost"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14400"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["cost"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["status", 
                  Style[
                  "status", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["status"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Completed", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["status"]}, "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{372., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{372., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.889336242584694*^9, 3.889336774082032*^9, 
  3.889337111386639*^9, 3.889944301628598*^9, 3.8899574668690157`*^9},
 CellLabel->
  "Out[155]=",ExpressionUUID->"c7f45f6a-f967-4543-b6bb-5ced73ac20fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsex3c", "=", 
   RowBox[{"ibm", "[", 
    RowBox[{"\"\<JobResults\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<JobID\>\"", "->", 
       RowBox[{
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", "idex3c", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dssex3c", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"dsex3c", "[", 
     RowBox[{
     "\"\<results\>\"", ",", "All", ",", "\"\<data\>\"", ",", 
      "\"\<counts\>\""}], "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"qpuResultsex3c", "=", 
  RowBox[{"N", "@", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"Values", "@", "%"}], ",", "Total"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"resultsex3c", "=", 
  RowBox[{
   RowBox[{"qcYYY", "[", "]"}], "[", "\"\<Probabilities\>\"", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.887798198464162*^9, 3.8877981989048443`*^9}, {
   3.8877982960324078`*^9, 3.887798296499221*^9}, {3.8878729994790077`*^9, 
   3.88787301734088*^9}, {3.8893371218163767`*^9, 3.889337122025845*^9}, {
   3.8900121792208023`*^9, 3.8900121824385643`*^9}, 3.890347272891181*^9},
 CellLabel->
  "In[653]:=",ExpressionUUID->"56789ee7-9362-41fc-b2ea-6b4aff84d0ae"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0x0\"\>", "\[Rule]", "514"}], ",", 
   RowBox[{"\<\"0x1\"\>", "\[Rule]", "559"}], ",", 
   RowBox[{"\<\"0x2\"\>", "\[Rule]", "561"}], ",", 
   RowBox[{"\<\"0x3\"\>", "\[Rule]", "598"}], ",", 
   RowBox[{"\<\"0x4\"\>", "\[Rule]", "435"}], ",", 
   RowBox[{"\<\"0x5\"\>", "\[Rule]", "426"}], ",", 
   RowBox[{"\<\"0x6\"\>", "\[Rule]", "445"}], ",", 
   RowBox[{"\<\"0x7\"\>", "\[Rule]", "462"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8893371174711313`*^9, 3.889337124332758*^9}, 
   3.88995746845371*^9, 3.890012185545023*^9, 3.890347275597847*^9},
 CellLabel->
  "Out[654]=",ExpressionUUID->"cea8184b-8ccd-4514-b059-9ec9eaf35eae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1285`", ",", "0.13975`", ",", "0.14025`", ",", "0.1495`", ",", 
   "0.10875`", ",", "0.1065`", ",", "0.11125`", ",", "0.1155`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8893371174711313`*^9, 3.889337124332758*^9}, 
   3.88995746845371*^9, 3.890012185545023*^9, 3.8903472756129723`*^9},
 CellLabel->
  "Out[655]=",ExpressionUUID->"00a33b4a-4a50-449e-bcc8-a0d4b7e26fc4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{0, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 0, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 0}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     Wolfram`QuantumFramework`QuditName[{1, 1, 1}, "Dual" -> False]], 
    "\[Rule]", 
    FractionBox["1", "8"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8893371174711313`*^9, 3.889337124332758*^9}, 
   3.88995746845371*^9, 3.890012185545023*^9, 3.890347275719619*^9},
 CellLabel->
  "Out[656]=",ExpressionUUID->"54ffb718-7b6a-4983-8c22-e32bde486511"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Results", "Subsection",
 CellChangeTimes->{{3.887667646006912*^9, 
  3.8876676472887287`*^9}},ExpressionUUID->"81e79a3c-1fac-4a6d-9ec6-\
44d9ac7e4128"],

Cell["\<\
Plot the result (WQF and IBM QPU) on Bar Chart and compare them side - by - \
side .\
\>", "Text",
 CellChangeTimes->{{3.889795335646937*^9, 
  3.889795356258793*^9}},ExpressionUUID->"9d14cd42-0864-4585-b13a-\
61b2eeb970d9"],

Cell[CellGroupData[{

Cell["PauliZ", "Subsubsection",
 CellChangeTimes->{{3.887679702463314*^9, 
  3.887679704480406*^9}},ExpressionUUID->"4dbf9fac-7d41-4c25-9268-\
aeef1d30e2fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex3a", "]"}], ",", "qpuResultsex3a"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Z basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartStyle", "->", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"000\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"001\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"010\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"011\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"100\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"101\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"110\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"111\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
        "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8876675240263367`*^9, 3.8876675447006817`*^9}, {
   3.88766902717588*^9, 3.887669030401218*^9}, {3.8876693424322443`*^9, 
   3.887669346308251*^9}, {3.8876701335268917`*^9, 3.887670136566326*^9}, {
   3.887676246501913*^9, 3.887676250783317*^9}, {3.887676515784782*^9, 
   3.887676518869556*^9}, {3.887679660660509*^9, 3.887679670134234*^9}, {
   3.887679742165444*^9, 3.887679768681559*^9}, {3.887679860488686*^9, 
   3.8876798822532673`*^9}, {3.887680067385249*^9, 3.887680069646743*^9}, {
   3.887680257083734*^9, 3.8876802617030478`*^9}, 3.889336341348445*^9, 
   3.889336430836029*^9, {3.889959208491084*^9, 3.889959292794672*^9}, {
   3.889959328031129*^9, 3.889959328843751*^9}, {3.889960679479764*^9, 
   3.889960680069162*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"3e37f8f2-ed60-4a6c-a81b-3a7e569268d2"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5975848636616583, 0.}, {20.974123539232057`, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.9971248376924504, 0.}, {1.79827490261547, 
                  0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{23.190223148082765`, 
                 36.604037856414294`}, {-43.35974012946882, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.9971248376924502`, 0.}, {2.79827490261547, 
                  0.15125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{39.30931902504856, 52.72313373338009}, {
                 55.66947145717931, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.15125]& , 
              TagBoxNote -> "0.15125"], 
             StyleBox["0.15125`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.15125, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.593674642923391, 0.}, {4.394824707846411, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{65.04425840791716, 78.4580731162487}, {
                 98.61762415246399, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0]& , TagBoxNote -> 
              "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.593674642923391, 0.}, {5.394824707846411, 
                  0.1435}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{81.16335428488296, 94.57716899321449}, {
                 57.870120603549275`, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.1435]& , 
              TagBoxNote -> "0.1435"], 
             StyleBox["0.1435`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1435, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.190224448154331, 0.}, {6.991374513077351, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{106.89829366775156`, 
                 120.31210837608309`}, {98.61762415246399, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.190224448154331, 0.}, {7.991374513077351, 
                  0.15725}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{123.01738954471736`, 136.4312042530489}, {
                 53.96574308579612, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.15725]& , 
              TagBoxNote -> "0.15725"], 
             StyleBox["0.15725`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.15725, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.786774253385271, 0.}, {9.587924318308291, 
                  0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{148.75232892758595`, 
                 162.16614363591748`}, {98.61762415246399, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{9.786774253385271, 0.}, {10.587924318308291`, 
                  0.1535}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{164.87142480455174`, 
                 178.28523951288327`}, {55.030573317910616`, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1535]& , TagBoxNote -> "0.1535"], 
             StyleBox["0.1535`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1535, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{11.383324058616212`, 0.}, {12.184474123539232`,
                   0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{190.60636418742035`, 
                 204.02017889575188`}, {98.61762415246399, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{12.383324058616212`, 0.}, {13.184474123539232`,
                   0.1015}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{206.72546006438614`, 
                 220.13927477271767`}, {69.79621920323163, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1015]& , TagBoxNote -> "0.1015"], 
             StyleBox["0.1015`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1015, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{13.979873863847153`, 0.}, {14.781023928770173`,
                   0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{232.46039944725476`, 245.8742141555863}, {
                 98.61762415246399, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0]& , TagBoxNote -> 
              "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{14.979873863847153`, 0.}, {15.781023928770173`,
                   0.085}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{248.57949532422055`, 261.9933100325521}, {
                 74.48147222453541, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.085]& , TagBoxNote -> 
              "0.085"], 
             StyleBox["0.085`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.085, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{16.576423669078093`, 0.}, {17.377573734001114`,
                   0.}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{274.31443470708916`, 287.7282494154207}, {
                 98.61762415246399, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0]& , TagBoxNote -> 
              "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{17.576423669078093`, 0.}, {18.377573734001114`,
                   0.0965}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{290.43353058405495`, 303.8473452923865}, {
                 71.21599284605095, 99.11762415246399}}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.0965]& , 
              TagBoxNote -> "0.0965"], 
             StyleBox["0.0965`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.0965, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{19.172973474309035`, 0.}, {19.974123539232057`,
                   0.5}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{316.16846996692357`, 
                 329.58228467525515`}, {-43.35974012946882, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 2]]& , TagBoxNote -> "1/2"], 
             StyleBox[
              FractionBox["1", "2"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 2], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{20.172973474309035`, 0.}, {20.974123539232057`,
                   0.1115}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{332.28756584388935`, 
                 345.70138055222094`}, {66.95667191759297, 
                 99.11762415246399}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1115]& , TagBoxNote -> "0.1115"], 
             StyleBox["0.1115`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1115, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
             0.15127623454356853`}], 
            Offset[{0, 0}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 5}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
             0.15127623454356853`}], 
            Offset[{0, 0}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 5}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.6304365406682273}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.3976998701539602`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.3976998701539602`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.3976998701539602`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.3976998701539602`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.15\"", ShowStringCharacters -> False], 0.15125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.3976998701539602`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
             0.14352623454356853`}], 
            Offset[{0, 0}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 5}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 10}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 10}, {4.994249675384901, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
             0.14352623454356853`}], 
            Offset[{0, 0}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 5}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 10}, {4.994249675384901, 0.6304365406682273}], 
            Offset[{0, 10}, {4.994249675384901, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.994249675384901, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.994249675384901, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.994249675384901, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.994249675384901, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.14\"", ShowStringCharacters -> False], 0.1435, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.994249675384901, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
             0.15727623454356854`}], 
            Offset[{0, 0}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 5}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 10}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 10}, {7.590799480615841, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
             0.15727623454356854`}], 
            Offset[{0, 0}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 5}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 10}, {7.590799480615841, 0.6304365406682273}], 
            Offset[{0, 10}, {7.590799480615841, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             7.590799480615841, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             7.590799480615841, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             7.590799480615841, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             7.590799480615841, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.16\"", ShowStringCharacters -> False], 0.15725, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {7.590799480615841, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
             0.15352623454356853`}], 
            Offset[{0, 0}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 5}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 10}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 10}, {10.187349285846782`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
             0.15352623454356853`}], 
            Offset[{0, 0}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 5}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 10}, {10.187349285846782`, 0.6304365406682273}], 
            Offset[{0, 10}, {10.187349285846782`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             10.187349285846782`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             10.187349285846782`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             10.187349285846782`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             10.187349285846782`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.15\"", ShowStringCharacters -> False], 0.1535, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {10.187349285846782`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
             0.10152623454356854`}], 
            Offset[{0, 0}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 5}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 10}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 10}, {12.783899091077721`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
             0.10152623454356854`}], 
            Offset[{0, 0}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 5}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 10}, {12.783899091077721`, 0.6304365406682273}], 
            Offset[{0, 10}, {12.783899091077721`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             12.783899091077721`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             12.783899091077721`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             12.783899091077721`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             12.783899091077721`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.10\"", ShowStringCharacters -> False], 0.1015, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {12.783899091077721`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
             0.08502623454356854}], 
            Offset[{0, 0}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 5}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 10}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 10}, {15.380448896308664`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
             0.08502623454356854}], 
            Offset[{0, 0}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 5}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 10}, {15.380448896308664`, 0.6304365406682273}], 
            Offset[{0, 10}, {15.380448896308664`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             15.380448896308664`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             15.380448896308664`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             15.380448896308664`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             15.380448896308664`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.09\"", ShowStringCharacters -> False], 0.085, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {15.380448896308664`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
             0.09652623454356854}], 
            Offset[{0, 0}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 5}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 10}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 10}, {17.976998701539603`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
             0.09652623454356854}], 
            Offset[{0, 0}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 5}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 10}, {17.976998701539603`, 0.6304365406682273}], 
            Offset[{0, 10}, {17.976998701539603`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             17.976998701539603`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             17.976998701539603`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             17.976998701539603`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             17.976998701539603`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.10\"", ShowStringCharacters -> False], 0.0965, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {17.976998701539603`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
             0.11152623454356854`}], 
            Offset[{0, 0}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 5}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 10}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 10}, {20.573548506770546`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
             0.11152623454356854`}], 
            Offset[{0, 0}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 5}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 10}, {20.573548506770546`, 0.6304365406682273}], 
            Offset[{0, 10}, {20.573548506770546`, 0.6304365406682273}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             20.573548506770546`, 0.6304365406682273}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             20.573548506770546`, 0.6304365406682273}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             20.573548506770546`, 0.6304365406682273}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             20.573548506770546`, 0.6304365406682273}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.11\"", ShowStringCharacters -> False], 0.1115, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {20.573548506770546`, 0.6304365406682273}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
             0.5000262345435685}], 
            Offset[{0, 0}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 5}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
             0.5000262345435685}], 
            Offset[{0, 0}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 5}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.525}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.3976998701539602`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.3976998701539602`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.3976998701539602`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.3976998701539602`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.3976998701539602`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {3.994249675384901, 0.525}], 
            Offset[{0, 5}, {3.994249675384901, 0.525}], 
            Offset[{0, 10}, {3.994249675384901, 0.525}], 
            Offset[{0, 10}, {3.994249675384901, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {3.994249675384901, 0.525}], 
            Offset[{0, 5}, {3.994249675384901, 0.525}], 
            Offset[{0, 10}, {3.994249675384901, 0.525}], 
            Offset[{0, 10}, {3.994249675384901, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.994249675384901, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.994249675384901, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.994249675384901, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.994249675384901, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.994249675384901, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {6.590799480615841, 0.525}], 
            Offset[{0, 5}, {6.590799480615841, 0.525}], 
            Offset[{0, 10}, {6.590799480615841, 0.525}], 
            Offset[{0, 10}, {6.590799480615841, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {6.590799480615841, 0.525}], 
            Offset[{0, 5}, {6.590799480615841, 0.525}], 
            Offset[{0, 10}, {6.590799480615841, 0.525}], 
            Offset[{0, 10}, {6.590799480615841, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             6.590799480615841, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             6.590799480615841, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             6.590799480615841, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             6.590799480615841, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {6.590799480615841, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {9.187349285846782, 0.525}], 
            Offset[{0, 5}, {9.187349285846782, 0.525}], 
            Offset[{0, 10}, {9.187349285846782, 0.525}], 
            Offset[{0, 10}, {9.187349285846782, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {9.187349285846782, 0.525}], 
            Offset[{0, 5}, {9.187349285846782, 0.525}], 
            Offset[{0, 10}, {9.187349285846782, 0.525}], 
            Offset[{0, 10}, {9.187349285846782, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             9.187349285846782, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             9.187349285846782, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             9.187349285846782, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             9.187349285846782, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {9.187349285846782, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {11.783899091077721`, 0.525}], 
            Offset[{0, 5}, {11.783899091077721`, 0.525}], 
            Offset[{0, 10}, {11.783899091077721`, 0.525}], 
            Offset[{0, 10}, {11.783899091077721`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {11.783899091077721`, 0.525}], 
            Offset[{0, 5}, {11.783899091077721`, 0.525}], 
            Offset[{0, 10}, {11.783899091077721`, 0.525}], 
            Offset[{0, 10}, {11.783899091077721`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             11.783899091077721`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             11.783899091077721`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             11.783899091077721`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             11.783899091077721`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {11.783899091077721`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {14.380448896308664`, 0.525}], 
            Offset[{0, 5}, {14.380448896308664`, 0.525}], 
            Offset[{0, 10}, {14.380448896308664`, 0.525}], 
            Offset[{0, 10}, {14.380448896308664`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {14.380448896308664`, 0.525}], 
            Offset[{0, 5}, {14.380448896308664`, 0.525}], 
            Offset[{0, 10}, {14.380448896308664`, 0.525}], 
            Offset[{0, 10}, {14.380448896308664`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             14.380448896308664`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             14.380448896308664`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             14.380448896308664`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             14.380448896308664`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {14.380448896308664`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {16.976998701539603`, 0.525}], 
            Offset[{0, 5}, {16.976998701539603`, 0.525}], 
            Offset[{0, 10}, {16.976998701539603`, 0.525}], 
            Offset[{0, 10}, {16.976998701539603`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
             0.0001262345435685342}], 
            Offset[{0, 0}, {16.976998701539603`, 0.525}], 
            Offset[{0, 5}, {16.976998701539603`, 0.525}], 
            Offset[{0, 10}, {16.976998701539603`, 0.525}], 
            Offset[{0, 10}, {16.976998701539603`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             16.976998701539603`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             16.976998701539603`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             16.976998701539603`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             16.976998701539603`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {16.976998701539603`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
             0.5000262345435685}], 
            Offset[{0, 0}, {19.573548506770546`, 0.525}], 
            Offset[{0, 5}, {19.573548506770546`, 0.525}], 
            Offset[{0, 10}, {19.573548506770546`, 0.525}], 
            Offset[{0, 10}, {19.573548506770546`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
             0.5000262345435685}], 
            Offset[{0, 0}, {19.573548506770546`, 0.525}], 
            Offset[{0, 5}, {19.573548506770546`, 0.525}], 
            Offset[{0, 10}, {19.573548506770546`, 0.525}], 
            Offset[{0, 10}, {19.573548506770546`, 0.525}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             19.573548506770546`, 0.525}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             19.573548506770546`, 0.525}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             19.573548506770546`, 0.525}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             19.573548506770546`, 0.525}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.50\"", ShowStringCharacters -> False], 0.5, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {19.573548506770546`, 0.525}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[
      StyleBox[{{
         Thickness[Tiny], 
         LineBox[{{0.5975848636616583, 0.}, {21.38165431274346, 0.}}], 
         StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
        StyleBox[{{
           Thickness[Tiny], 
           LineBox[{{0.9971248376924504, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.9971248376924504, 
              0.}]}], 
           LineBox[{{20.974123539232053`, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {20.974123539232053`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
             LineBox[{{2.7982749026154696`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.7982749026154696`, 
                0.}]}], 
             LineBox[{{3.59367464292339, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.59367464292339, 
                0.}]}], 
             LineBox[{{5.394824707846409, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {5.394824707846409, 
                0.}]}], 
             LineBox[{{6.19022444815433, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {6.19022444815433, 
                0.}]}], 
             LineBox[{{7.99137451307735, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.99137451307735, 
                0.}]}], 
             LineBox[{{8.78677425338527, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {8.78677425338527, 
                0.}]}], 
             LineBox[{{10.587924318308287`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {10.587924318308287`, 
                0.}]}], 
             LineBox[{{11.383324058616209`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {11.383324058616209`, 
                0.}]}], 
             LineBox[{{13.184474123539228`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {13.184474123539228`, 
                0.}]}], 
             LineBox[{{13.97987386384715, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {13.97987386384715, 
                0.}]}], 
             LineBox[{{15.78102392877017, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {15.78102392877017, 
                0.}]}], 
             LineBox[{{16.576423669078093`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {16.576423669078093`, 
                0.}]}], 
             LineBox[{{18.37757373400111, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {18.37757373400111, 
                0.}]}], 
             LineBox[{{19.172973474309032`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {19.172973474309032`, 
                0.}]}]}}}, 
          StyleBox[{
            Thickness[Tiny], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"000\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {1.8976998701539602`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"001\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {4.4942496753849, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"010\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {7.090799480615839, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"011\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {9.687349285846778, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"100\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {12.28389909107772, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"101\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {14.880448896308659`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"110\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {17.4769987015396, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
            InsetBox["\"\\!\\(\\*TemplateBox[{\\\"111\\\"},\\\"Ket\\\"]\\)\"", 
             Offset[{0, -2}, {20.073548506770543`, 0.}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 1}], 
              ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
           StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
       Antialiasing -> False], "GraphicsAxes", StripOnInput -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.5975848636616583, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], PlotLabel -> 
    FormBox["\"Pauli-Z basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.471412, 0.108766, 0.527016]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.857359, 0.131106, 0.132128]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.471412, 0.108766, 0.527016]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.857359, 0.131106, 0.132128]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.887667547306151*^9, 3.887668185526985*^9, 3.8876690314002037`*^9, 
   3.887669843626245*^9, 3.887670544368285*^9, 3.889337128740093*^9, 
   3.8899574694582357`*^9, {3.8899593024752913`*^9, 3.889959330946641*^9}, 
   3.889960682262892*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"97e6feb4-5d57-4048-8ec7-f986dcd2817a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliX", "Subsubsection",
 CellChangeTimes->{{3.887679708262638*^9, 
  3.8876797122509317`*^9}},ExpressionUUID->"6425d86b-8019-4394-a42e-\
f67c1e3a3aeb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex3b", "]"}], ",", "qpuResultsex3b"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-X basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartStyle", "->", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"000\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"001\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"010\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"011\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"100\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"101\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"110\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"111\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
        "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887679678121592*^9, 3.887679687312405*^9}, {
   3.887679891299629*^9, 3.8876798952306957`*^9}, {3.8876800718068943`*^9, 
   3.887680074309717*^9}, {3.887680264062015*^9, 3.887680267653781*^9}, 
   3.889336440663287*^9, {3.889959407328033*^9, 3.8899594079474*^9}, {
   3.889960670068123*^9, 3.889960670800406*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"e548daac-7a09-4572-8177-271117456546"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5975848636616583, 0.}, {20.974123539232057`, 
       0.}}]}, {{}, {{{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.9971248376924504, 0.}, {1.79827490261547, 
                  0.25}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"],
               StatusArea[#, 
               Rational[1, 4]]& , TagBoxNote -> "1/4"], 
             StyleBox[
              FractionBox["1", "4"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 4], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.9971248376924502`, 0.}, {2.79827490261547, 
                  0.13825}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.13825]& , 
              TagBoxNote -> "0.13825"], 
             StyleBox["0.13825`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.13825, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.593674642923391, 0.}, {4.394824707846411, 
                  0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.593674642923391, 0.}, {5.394824707846411, 
                  0.10275}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.10275]& , 
              TagBoxNote -> "0.10275"], 
             StyleBox["0.10275`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.10275, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.190224448154331, 0.}, {6.991374513077351, 
                  0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.190224448154331, 0.}, {7.991374513077351, 
                  0.13175}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.13175]& , 
              TagBoxNote -> "0.13175"], 
             StyleBox["0.13175`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.13175, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.786774253385271, 0.}, {9.587924318308291, 
                  0.25}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"],
               StatusArea[#, 
               Rational[1, 4]]& , TagBoxNote -> "1/4"], 
             StyleBox[
              FractionBox["1", "4"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 4], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{9.786774253385271, 0.}, {10.587924318308291`, 
                  0.0985}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.0985]& , 
              TagBoxNote -> "0.0985"], 
             StyleBox["0.0985`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.0985, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 RectangleBox[{11.383324058616212`, 0.}, {12.184474123539232`,
                   0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{12.383324058616212`, 0.}, {13.184474123539232`,
                   0.161}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.161]& , TagBoxNote -> 
              "0.161"], 
             StyleBox["0.161`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.161, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{13.979873863847153`, 0.}, {14.781023928770173`,
                   0.25}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 
               Rational[1, 4]]& , TagBoxNote -> "1/4"], 
             StyleBox[
              FractionBox["1", "4"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 4], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{14.979873863847153`, 0.}, {15.781023928770173`,
                   0.11025}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.11025]& , 
              TagBoxNote -> "0.11025"], 
             StyleBox["0.11025`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.11025, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{16.576423669078093`, 0.}, {17.377573734001114`,
                   0.25}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 
               Rational[1, 4]]& , TagBoxNote -> "1/4"], 
             StyleBox[
              FractionBox["1", "4"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 4], {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{17.576423669078093`, 0.}, {18.377573734001114`,
                   0.157}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.157]& , TagBoxNote -> 
              "0.157"], 
             StyleBox["0.157`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.157, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.471412, 0.108766, 0.527016]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{19.172973474309035`, 0.}, {19.974123539232057`,
                   0.}, "RoundingRadius" -> 0]}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0]& , TagBoxNote -> "0"], 
             StyleBox["0", {}, StripOnInput -> False]], Annotation[#, 
             Style[0, {}], "Tooltip"]& ]}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.588]]], 
            RGBColor[0.857359, 0.131106, 0.132128]], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{20.172973474309035`, 0.}, {20.974123539232057`,
                   0.1005}, "RoundingRadius" -> 0]}], 
               "DelayedMouseEffectStyle"], StatusArea[#, 0.1005]& , 
              TagBoxNote -> "0.1005"], 
             StyleBox["0.1005`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1005, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{{{{
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
                0.13826311727178428`}], 
               Offset[{0, 0}, {2.3976998701539602`, 0.31521827033411365`}], 
               Offset[{0, 5}, {2.3976998701539602`, 0.31521827033411365`}], 
               Offset[{0, 10}, {2.3976998701539602`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {2.3976998701539602`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
                0.13826311727178428`}], 
               Offset[{0, 0}, {2.3976998701539602`, 0.31521827033411365`}], 
               Offset[{0, 5}, {2.3976998701539602`, 0.31521827033411365`}], 
               Offset[{0, 10}, {2.3976998701539602`, 0.31521827033411365`}], 
               Offset[{0, 10}, {2.3976998701539602`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                2.3976998701539602`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                2.3976998701539602`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                2.3976998701539602`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                2.3976998701539602`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.14\"", ShowStringCharacters -> False], 
                    0.13825, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {2.3976998701539602`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
                0.10276311727178426`}], 
               Offset[{0, 0}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 5}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 10}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 10}, {4.994249675384901, 0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
                0.10276311727178426`}], 
               Offset[{0, 0}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 5}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 10}, {4.994249675384901, 0.31521827033411365`}], 
               Offset[{0, 10}, {4.994249675384901, 0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                4.994249675384901, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                4.994249675384901, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                4.994249675384901, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                4.994249675384901, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.10\"", ShowStringCharacters -> False], 
                    0.10275, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {4.994249675384901, 0.31521827033411365`}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
                0.13176311727178427`}], 
               Offset[{0, 0}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 5}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 10}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 10}, {7.590799480615841, 0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
                0.13176311727178427`}], 
               Offset[{0, 0}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 5}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 10}, {7.590799480615841, 0.31521827033411365`}], 
               Offset[{0, 10}, {7.590799480615841, 0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                7.590799480615841, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                7.590799480615841, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                7.590799480615841, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                7.590799480615841, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.13\"", ShowStringCharacters -> False], 
                    0.13175, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {7.590799480615841, 0.31521827033411365`}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
                0.09851311727178427}], 
               Offset[{0, 0}, {10.187349285846782`, 0.31521827033411365`}], 
               Offset[{0, 5}, {10.187349285846782`, 0.31521827033411365`}], 
               Offset[{0, 10}, {10.187349285846782`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {10.187349285846782`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
                0.09851311727178427}], 
               Offset[{0, 0}, {10.187349285846782`, 0.31521827033411365`}], 
               Offset[{0, 5}, {10.187349285846782`, 0.31521827033411365`}], 
               Offset[{0, 10}, {10.187349285846782`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {10.187349285846782`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                10.187349285846782`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                10.187349285846782`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                10.187349285846782`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                10.187349285846782`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.10\"", ShowStringCharacters -> False], 
                    0.0985, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {10.187349285846782`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
                0.16101311727178427`}], 
               Offset[{0, 0}, {12.783899091077721`, 0.31521827033411365`}], 
               Offset[{0, 5}, {12.783899091077721`, 0.31521827033411365`}], 
               Offset[{0, 10}, {12.783899091077721`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {12.783899091077721`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
                0.16101311727178427`}], 
               Offset[{0, 0}, {12.783899091077721`, 0.31521827033411365`}], 
               Offset[{0, 5}, {12.783899091077721`, 0.31521827033411365`}], 
               Offset[{0, 10}, {12.783899091077721`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {12.783899091077721`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                12.783899091077721`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                12.783899091077721`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                12.783899091077721`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                12.783899091077721`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.16\"", ShowStringCharacters -> False], 
                    0.161, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {12.783899091077721`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
                0.11026311727178427`}], 
               Offset[{0, 0}, {15.380448896308664`, 0.31521827033411365`}], 
               Offset[{0, 5}, {15.380448896308664`, 0.31521827033411365`}], 
               Offset[{0, 10}, {15.380448896308664`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {15.380448896308664`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
                0.11026311727178427`}], 
               Offset[{0, 0}, {15.380448896308664`, 0.31521827033411365`}], 
               Offset[{0, 5}, {15.380448896308664`, 0.31521827033411365`}], 
               Offset[{0, 10}, {15.380448896308664`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {15.380448896308664`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                15.380448896308664`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                15.380448896308664`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                15.380448896308664`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                15.380448896308664`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.11\"", ShowStringCharacters -> False], 
                    0.11025, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {15.380448896308664`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
                0.15701311727178427`}], 
               Offset[{0, 0}, {17.976998701539603`, 0.31521827033411365`}], 
               Offset[{0, 5}, {17.976998701539603`, 0.31521827033411365`}], 
               Offset[{0, 10}, {17.976998701539603`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {17.976998701539603`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
                0.15701311727178427`}], 
               Offset[{0, 0}, {17.976998701539603`, 0.31521827033411365`}], 
               Offset[{0, 5}, {17.976998701539603`, 0.31521827033411365`}], 
               Offset[{0, 10}, {17.976998701539603`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {17.976998701539603`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                17.976998701539603`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                17.976998701539603`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                17.976998701539603`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                17.976998701539603`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.16\"", ShowStringCharacters -> False], 
                    0.157, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {17.976998701539603`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
                0.10051311727178427`}], 
               Offset[{0, 0}, {20.573548506770546`, 0.31521827033411365`}], 
               Offset[{0, 5}, {20.573548506770546`, 0.31521827033411365`}], 
               Offset[{0, 10}, {20.573548506770546`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {20.573548506770546`, 
                0.31521827033411365`}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
                0.10051311727178427`}], 
               Offset[{0, 0}, {20.573548506770546`, 0.31521827033411365`}], 
               Offset[{0, 5}, {20.573548506770546`, 0.31521827033411365`}], 
               Offset[{0, 10}, {20.573548506770546`, 0.31521827033411365`}], 
               
               Offset[{0, 10}, {20.573548506770546`, 
                0.31521827033411365`}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                20.573548506770546`, 0.31521827033411365`}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                20.573548506770546`, 0.31521827033411365`}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                20.573548506770546`, 0.31521827033411365`}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                20.573548506770546`, 0.31521827033411365`}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.10\"", ShowStringCharacters -> False], 
                    0.1005, AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {20.573548506770546`, 0.31521827033411365`}], 
             
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 5}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 10}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 10}, {1.3976998701539602`, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 5}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 10}, {1.3976998701539602`, 0.2625}], 
               Offset[{0, 10}, {1.3976998701539602`, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                1.3976998701539602`, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                1.3976998701539602`, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                1.3976998701539602`, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                1.3976998701539602`, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.25\"", ShowStringCharacters -> False], 0.25,
                     AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {1.3976998701539602`, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {3.994249675384901, 0.2625}], 
               Offset[{0, 5}, {3.994249675384901, 0.2625}], 
               Offset[{0, 10}, {3.994249675384901, 0.2625}], 
               Offset[{0, 10}, {3.994249675384901, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {3.994249675384901, 0.2625}], 
               Offset[{0, 5}, {3.994249675384901, 0.2625}], 
               Offset[{0, 10}, {3.994249675384901, 0.2625}], 
               Offset[{0, 10}, {3.994249675384901, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                3.994249675384901, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                3.994249675384901, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                3.994249675384901, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                3.994249675384901, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {3.994249675384901, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {6.590799480615841, 0.2625}], 
               Offset[{0, 5}, {6.590799480615841, 0.2625}], 
               Offset[{0, 10}, {6.590799480615841, 0.2625}], 
               Offset[{0, 10}, {6.590799480615841, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {6.590799480615841, 0.2625}], 
               Offset[{0, 5}, {6.590799480615841, 0.2625}], 
               Offset[{0, 10}, {6.590799480615841, 0.2625}], 
               Offset[{0, 10}, {6.590799480615841, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                6.590799480615841, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                6.590799480615841, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                6.590799480615841, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                6.590799480615841, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {6.590799480615841, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {9.187349285846782, 0.2625}], 
               Offset[{0, 5}, {9.187349285846782, 0.2625}], 
               Offset[{0, 10}, {9.187349285846782, 0.2625}], 
               Offset[{0, 10}, {9.187349285846782, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {9.187349285846782, 0.2625}], 
               Offset[{0, 5}, {9.187349285846782, 0.2625}], 
               Offset[{0, 10}, {9.187349285846782, 0.2625}], 
               Offset[{0, 10}, {9.187349285846782, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                9.187349285846782, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                9.187349285846782, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                9.187349285846782, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                9.187349285846782, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.25\"", ShowStringCharacters -> False], 0.25,
                     AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {9.187349285846782, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 5}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 10}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 10}, {11.783899091077721`, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 5}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 10}, {11.783899091077721`, 0.2625}], 
               Offset[{0, 10}, {11.783899091077721`, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                11.783899091077721`, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                11.783899091077721`, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                11.783899091077721`, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                11.783899091077721`, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {11.783899091077721`, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 5}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 10}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 10}, {14.380448896308664`, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 5}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 10}, {14.380448896308664`, 0.2625}], 
               Offset[{0, 10}, {14.380448896308664`, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                14.380448896308664`, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                14.380448896308664`, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                14.380448896308664`, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                14.380448896308664`, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.25\"", ShowStringCharacters -> False], 0.25,
                     AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {14.380448896308664`, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 5}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 10}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 10}, {16.976998701539603`, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
                0.25001311727178427`}], 
               Offset[{0, 0}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 5}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 10}, {16.976998701539603`, 0.2625}], 
               Offset[{0, 10}, {16.976998701539603`, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                16.976998701539603`, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                16.976998701539603`, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                16.976998701539603`, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                16.976998701539603`, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.25\"", ShowStringCharacters -> False], 0.25,
                     AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {16.976998701539603`, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}], 
          GraphicsGroupBox[{{
             Directive[
              AbsoluteThickness[4], 
              GrayLevel[1], 
              Opacity[
               NCache[
                Rational[2, 3], 0.6666666666666666]]], 
             CapForm["Butt"], 
             JoinForm["Round"], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 5}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 10}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 10}, {19.573548506770546`, 0.2625}]}]}, {
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]], 
             BSplineCurveBox[{
               
               Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
                0.00011311727178426711`}], 
               Offset[{0, 0}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 5}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 10}, {19.573548506770546`, 0.2625}], 
               Offset[{0, 10}, {19.573548506770546`, 0.2625}]}]}, {
             FaceForm[
              Directive[
               GrayLevel[1], 
               Opacity[
                NCache[
                 Rational[2, 3], 0.6666666666666666]]]], 
             EdgeForm[], 
             PolygonBox[{
               
               Offset[{12.499999999999998`, 29.000000000000004`}, {
                19.573548506770546`, 0.2625}], 
               
               Offset[{12.500000000000002`, 10.000000000000004`}, {
                19.573548506770546`, 0.2625}], 
               
               Offset[{-12.499999999999998`, 9.999999999999996}, {
                19.573548506770546`, 0.2625}], 
               
               Offset[{-12.500000000000002`, 28.999999999999996`}, {
                19.573548506770546`, 0.2625}]}]}, {
             EdgeForm[], 
             Directive[
              RGBColor[
              0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
              AbsoluteThickness[1.25]]}, {}, 
            InsetBox[
             FormBox[
              StyleBox[
               RotationBox[
                TemplateBox[{
                  TagBox[
                   InterpretationBox[
                    StyleBox["\"0.00\"", ShowStringCharacters -> False], 0., 
                    AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, 
                 "RowDefault"], BoxRotation -> 0.], {
                Directive[], 
                Opacity[1]}, StripOnInput -> False], TraditionalForm], 
             Offset[{0., 19.5}, {19.573548506770546`, 0.2625}], 
             NCache[
              ImageScaled[{
                Rational[1, 2], 
                Rational[1, 2]}], 
              ImageScaled[{0.5, 0.5}]]]}]}}}}, {}}, {
      StyleBox[{Antialiasing -> False, {
         Directive[
          Thickness[Tiny]], {
          LineBox[{{0.5975848636616583, 0.}, {21.38165431274346, 0.}}]}, 
         StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
        StyleBox[{{
           Directive[
            Thickness[Tiny]], 
           LineBox[{{0.9971248376924504, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {0.9971248376924504, 
              0.}]}], 
           LineBox[{{20.974123539232053`, 0.}, 
             
             Offset[{-1.102182119232618*^-15, -6.}, {20.974123539232053`, 
              0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
             LineBox[{{2.7982749026154696`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {2.7982749026154696`, 
                0.}]}], 
             LineBox[{{3.59367464292339, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {3.59367464292339, 
                0.}]}], 
             LineBox[{{5.394824707846409, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {5.394824707846409, 
                0.}]}], 
             LineBox[{{6.19022444815433, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {6.19022444815433, 
                0.}]}], 
             LineBox[{{7.99137451307735, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {7.99137451307735, 
                0.}]}], 
             LineBox[{{8.78677425338527, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {8.78677425338527, 
                0.}]}], 
             LineBox[{{10.587924318308287`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {10.587924318308287`, 
                0.}]}], 
             LineBox[{{11.383324058616209`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {11.383324058616209`, 
                0.}]}], 
             LineBox[{{13.184474123539228`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {13.184474123539228`, 
                0.}]}], 
             LineBox[{{13.97987386384715, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {13.97987386384715, 
                0.}]}], 
             LineBox[{{15.78102392877017, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {15.78102392877017, 
                0.}]}], 
             LineBox[{{16.576423669078093`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {16.576423669078093`, 
                0.}]}], 
             LineBox[{{18.37757373400111, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {18.37757373400111, 
                0.}]}], 
             LineBox[{{19.172973474309032`, 0.}, 
               
               Offset[{-1.102182119232618*^-15, -6.}, {19.172973474309032`, 
                0.}]}]}}}, 
          StyleBox[{
            Directive[
             Thickness[Tiny]], 
            Directive[
             Thickness[Tiny]], 
            StyleBox[{
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"000\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {1.8976998701539602`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"001\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {4.4942496753849, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"010\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {7.090799480615839, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"011\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {9.687349285846778, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"100\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {12.28389909107772, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"101\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {14.880448896308659`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"110\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {17.4769987015396, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*TemplateBox[{\\\"111\\\"},\\\"Ket\\\"]\\)\"", 
                TraditionalForm], 
               Offset[{0, -2}, {20.073548506770543`, 0.}], 
               NCache[
                ImageScaled[{
                  Rational[1, 2], 1}], 
                ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
             StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
           False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
       "GraphicsAxes"}, StripOnInput -> False]}}, {
    DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0.5975848636616583, 0.}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         Identity[
          Part[#, 1]], 
         Identity[
          Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], PlotLabel -> 
     FormBox["\"Pauli-X basis\"", TraditionalForm], 
     PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.15]}}, Ticks -> {None, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.471412, 0.108766, 0.527016]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.857359, 0.131106, 0.132128]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.471412, 0.108766, 0.527016]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.857359, 0.131106, 0.132128]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.889337132780095*^9, 3.8899574698648157`*^9, 
  3.88995941049747*^9, 3.889960674126074*^9},
 CellLabel->
  "Out[191]=",ExpressionUUID->"e82a2187-80c6-4e61-91b1-709f58755390"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliY", "Subsubsection",
 CellChangeTimes->{{3.8876797151883183`*^9, 
  3.887679717836677*^9}},ExpressionUUID->"5d23a89b-e1f5-46f0-9009-\
27fbe10187b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Values", "[", "resultsex3c", "]"}], ",", "qpuResultsex3c"}], 
     "}"}], "]"}], ",", 
   RowBox[{"ChartLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram quantum framwork\>\"", ",", "\"\<IBM QPU\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Pauli-Y basis\>\""}], ",", 
   RowBox[{"LabelingFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Callout", "[", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"NumberForm", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "//", "N"}], "}"}], 
         "]"}], ",", "Automatic"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ChartStyle", "->", "\"\<Rainbow\>\""}], ",", 
   RowBox[{"ChartLabels", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<\!\(\*TemplateBox[{\"000\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"001\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"010\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"011\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"100\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"101\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"110\"},\"Ket\"]\)\>\"", ",", 
        "\"\<\!\(\*TemplateBox[{\"111\"},\"Ket\"]\)\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", 
        "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\"", ",", "\"\<\>\""}], 
       "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.887679681045422*^9, 3.8876796919941587`*^9}, {
   3.887679898413301*^9, 3.887679902280917*^9}, {3.887680076320932*^9, 
   3.8876800784848623`*^9}, {3.887680269578045*^9, 3.887680271634226*^9}, 
   3.88933644491074*^9, {3.889959414929474*^9, 3.889959415552247*^9}, {
   3.88995958982909*^9, 3.889959748078293*^9}, {3.889959783471587*^9, 
   3.889959783885955*^9}, {3.889959868335415*^9, 3.889959923755354*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"0229070a-92d9-4347-8456-49286af79625"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{
      Opacity[0], 
      PointBox[{{0.5975848636616583, 0.}, {20.974123539232057`, 
       0.}}]}, {{}, {{{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{0.9971248376924504, 0.}, {1.79827490261547, 
                  0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{28.490196078431374`, 
                 42.50551088248403}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{1.9971248376924502`, 0.}, {2.79827490261547, 
                  0.1285}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{45.360087745170866`, 
                 59.37540254922352}, {-24.25544947379022, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1285]& , TagBoxNote -> "0.1285"], 
             StyleBox["0.1285`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1285, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{3.593674642923391, 0.}, {4.394824707846411, 
                  0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{72.29370999997089, 
                 86.30902480402354}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{4.593674642923391, 0.}, {5.394824707846411, 
                  0.13975}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{89.16360166671038, 
                 103.17891647076303`}, {-35.43700061564597, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.13975]& , TagBoxNote -> "0.13975"], 
             StyleBox["0.13975`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.13975, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{6.190224448154331, 0.}, {6.991374513077351, 
                  0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{116.09722392151038`, 
                 130.11253872556304`}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{7.190224448154331, 0.}, {7.991374513077351, 
                  0.14025}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{132.96711558824987`, 
                 146.98243039230255`}, {-35.93395844417289, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.14025]& , TagBoxNote -> "0.14025"], 
             StyleBox["0.14025`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.14025, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{8.786774253385271, 0.}, {9.587924318308291, 
                  0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{159.90073784304988`, 
                 173.91605264710253`}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{9.786774253385271, 0.}, {10.587924318308291`, 
                  0.1495}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{176.7706295097894, 
                 190.78594431384204`}, {-45.127678271920914`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1495]& , TagBoxNote -> "0.1495"], 
             StyleBox["0.1495`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1495, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{11.383324058616212`, 0.}, {12.184474123539232`,
                   0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{203.7042517645894, 
                 217.71956656864205`}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{12.383324058616212`, 0.}, {13.184474123539232`,
                   0.10875}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{220.57414343132888`, 
                 234.58945823538153`}, {-4.625615246976864, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.10875]& , TagBoxNote -> "0.10875"], 
             StyleBox["0.10875`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.10875, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{13.979873863847153`, 0.}, {14.781023928770173`,
                   0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{247.5077656861289, 
                 261.52308049018154`}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{14.979873863847153`, 0.}, {15.781023928770173`,
                   0.1065}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{264.37765735286837`, 
                 278.392972156921}, {-2.389305018605711, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1065]& , TagBoxNote -> "0.1065"], 
             StyleBox["0.1065`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1065, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{16.576423669078093`, 0.}, {17.377573734001114`,
                   0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{291.3112796076683, 
                 305.32659441172103`}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{17.576423669078093`, 0.}, {18.377573734001114`,
                   0.11125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{308.18117127440786`, 
                 322.1964860784605}, {-7.110404389611475, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.11125]& , TagBoxNote -> "0.11125"], 
             StyleBox["0.11125`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.11125, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{
           RGBColor[0.471412, 0.108766, 0.527016], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{19.172973474309035`, 0.}, {19.974123539232057`,
                   0.125}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{335.1147935292079, 
                 349.1301083332606}, {-20.776744674101792`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 
               Rational[1, 8]]& , TagBoxNote -> "1/8"], 
             StyleBox[
              FractionBox["1", "8"], {}, StripOnInput -> False]], 
            Annotation[#, 
             Style[
              Rational[1, 8], {}], "Tooltip"]& ]}, {
           RGBColor[0.857359, 0.131106, 0.132128], 
           EdgeForm[{
             Opacity[0.588], 
             Thickness[Small]}], 
           TagBox[
            TooltipBox[
             TagBox[
              TagBox[
               DynamicBox[{
                 FEPrivate`If[
                  CurrentValue["MouseOver"], 
                  EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                 
                 RectangleBox[{20.172973474309035`, 0.}, {20.974123539232057`,
                   0.1155}, "RoundingRadius" -> 0]}, 
                ImageSizeCache -> {{351.9846851959474, 
                 366.00000000000006`}, {-11.334545932090307`, 
                 103.96271245762843`}}], "DelayedMouseEffectStyle"], 
              StatusArea[#, 0.1155]& , TagBoxNote -> "0.1155"], 
             StyleBox["0.1155`", {}, StripOnInput -> False]], Annotation[#, 
             Style[0.1155, {}], 
             "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {{
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
             0.128507844128527}], 
            Offset[{0, 0}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 5}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {2.3976998701539602`, 
             0.128507844128527}], 
            Offset[{0, 0}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 5}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.18850052565979997`}], 
            Offset[{0, 10}, {2.3976998701539602`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             2.3976998701539602`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             2.3976998701539602`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             2.3976998701539602`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             2.3976998701539602`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.1285, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {2.3976998701539602`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
             0.13975784412852701`}], 
            Offset[{0, 0}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 5}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 10}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 10}, {4.994249675384901, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {4.994249675384901, 
             0.13975784412852701`}], 
            Offset[{0, 0}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 5}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 10}, {4.994249675384901, 0.18850052565979997`}], 
            Offset[{0, 10}, {4.994249675384901, 0.18850052565979997`}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             4.994249675384901, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             4.994249675384901, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             4.994249675384901, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             4.994249675384901, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.14\"", ShowStringCharacters -> False], 0.13975, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {4.994249675384901, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
             0.14025784412852701`}], 
            Offset[{0, 0}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 5}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 10}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 10}, {7.590799480615841, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {7.590799480615841, 
             0.14025784412852701`}], 
            Offset[{0, 0}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 5}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 10}, {7.590799480615841, 0.18850052565979997`}], 
            Offset[{0, 10}, {7.590799480615841, 0.18850052565979997`}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             7.590799480615841, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             7.590799480615841, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             7.590799480615841, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             7.590799480615841, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.14\"", ShowStringCharacters -> False], 0.14025, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {7.590799480615841, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
             0.149507844128527}], 
            Offset[{0, 0}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 5}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 10}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 10}, {10.187349285846782`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {10.187349285846782`, 
             0.149507844128527}], 
            Offset[{0, 0}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 5}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 10}, {10.187349285846782`, 0.18850052565979997`}], 
            Offset[{0, 10}, {10.187349285846782`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             10.187349285846782`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             10.187349285846782`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             10.187349285846782`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             10.187349285846782`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.15\"", ShowStringCharacters -> False], 0.1495, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {10.187349285846782`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
             0.10875784412852699`}], 
            Offset[{0, 0}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 5}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 10}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 10}, {12.783899091077721`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {12.783899091077721`, 
             0.10875784412852699`}], 
            Offset[{0, 0}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 5}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 10}, {12.783899091077721`, 0.18850052565979997`}], 
            Offset[{0, 10}, {12.783899091077721`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             12.783899091077721`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             12.783899091077721`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             12.783899091077721`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             12.783899091077721`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.11\"", ShowStringCharacters -> False], 0.10875, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {12.783899091077721`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
             0.10650784412852699`}], 
            Offset[{0, 0}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 5}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 10}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 10}, {15.380448896308664`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {15.380448896308664`, 
             0.10650784412852699`}], 
            Offset[{0, 0}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 5}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 10}, {15.380448896308664`, 0.18850052565979997`}], 
            Offset[{0, 10}, {15.380448896308664`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             15.380448896308664`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             15.380448896308664`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             15.380448896308664`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             15.380448896308664`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.11\"", ShowStringCharacters -> False], 0.1065, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {15.380448896308664`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
             0.11125784412852699`}], 
            Offset[{0, 0}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 5}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 10}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 10}, {17.976998701539603`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {17.976998701539603`, 
             0.11125784412852699`}], 
            Offset[{0, 0}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 5}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 10}, {17.976998701539603`, 0.18850052565979997`}], 
            Offset[{0, 10}, {17.976998701539603`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             17.976998701539603`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             17.976998701539603`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             17.976998701539603`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             17.976998701539603`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.11\"", ShowStringCharacters -> False], 0.11125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {17.976998701539603`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
             0.11550784412852699`}], 
            Offset[{0, 0}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 5}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 10}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 10}, {20.573548506770546`, 0.18850052565979997`}]}]}, {
         
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {20.573548506770546`, 
             0.11550784412852699`}], 
            Offset[{0, 0}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 5}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 10}, {20.573548506770546`, 0.18850052565979997`}], 
            Offset[{0, 10}, {20.573548506770546`, 0.18850052565979997`}]}]}, {
         
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             20.573548506770546`, 0.18850052565979997`}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             20.573548506770546`, 0.18850052565979997`}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             20.573548506770546`, 0.18850052565979997`}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             20.573548506770546`, 0.18850052565979997`}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.12\"", ShowStringCharacters -> False], 0.1155, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {20.573548506770546`, 0.18850052565979997`}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
             0.125007844128527}], 
            Offset[{0, 0}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 5}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {1.3976998701539602`, 
             0.125007844128527}], 
            Offset[{0, 0}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 5}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.156975}], 
            Offset[{0, 10}, {1.3976998701539602`, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             1.3976998701539602`, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             1.3976998701539602`, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             1.3976998701539602`, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             1.3976998701539602`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {1.3976998701539602`, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
             0.125007844128527}], 
            Offset[{0, 0}, {3.994249675384901, 0.156975}], 
            Offset[{0, 5}, {3.994249675384901, 0.156975}], 
            Offset[{0, 10}, {3.994249675384901, 0.156975}], 
            Offset[{0, 10}, {3.994249675384901, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {3.994249675384901, 
             0.125007844128527}], 
            Offset[{0, 0}, {3.994249675384901, 0.156975}], 
            Offset[{0, 5}, {3.994249675384901, 0.156975}], 
            Offset[{0, 10}, {3.994249675384901, 0.156975}], 
            Offset[{0, 10}, {3.994249675384901, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             3.994249675384901, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             3.994249675384901, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             3.994249675384901, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             3.994249675384901, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {3.994249675384901, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
             0.125007844128527}], 
            Offset[{0, 0}, {6.590799480615841, 0.156975}], 
            Offset[{0, 5}, {6.590799480615841, 0.156975}], 
            Offset[{0, 10}, {6.590799480615841, 0.156975}], 
            Offset[{0, 10}, {6.590799480615841, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {6.590799480615841, 
             0.125007844128527}], 
            Offset[{0, 0}, {6.590799480615841, 0.156975}], 
            Offset[{0, 5}, {6.590799480615841, 0.156975}], 
            Offset[{0, 10}, {6.590799480615841, 0.156975}], 
            Offset[{0, 10}, {6.590799480615841, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             6.590799480615841, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             6.590799480615841, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             6.590799480615841, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             6.590799480615841, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {6.590799480615841, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
             0.125007844128527}], 
            Offset[{0, 0}, {9.187349285846782, 0.156975}], 
            Offset[{0, 5}, {9.187349285846782, 0.156975}], 
            Offset[{0, 10}, {9.187349285846782, 0.156975}], 
            Offset[{0, 10}, {9.187349285846782, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {9.187349285846782, 
             0.125007844128527}], 
            Offset[{0, 0}, {9.187349285846782, 0.156975}], 
            Offset[{0, 5}, {9.187349285846782, 0.156975}], 
            Offset[{0, 10}, {9.187349285846782, 0.156975}], 
            Offset[{0, 10}, {9.187349285846782, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             9.187349285846782, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             9.187349285846782, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             9.187349285846782, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             9.187349285846782, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {9.187349285846782, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
             0.125007844128527}], 
            Offset[{0, 0}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 5}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 10}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 10}, {11.783899091077721`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {11.783899091077721`, 
             0.125007844128527}], 
            Offset[{0, 0}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 5}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 10}, {11.783899091077721`, 0.156975}], 
            Offset[{0, 10}, {11.783899091077721`, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             11.783899091077721`, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             11.783899091077721`, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             11.783899091077721`, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             11.783899091077721`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {11.783899091077721`, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
             0.125007844128527}], 
            Offset[{0, 0}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 5}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 10}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 10}, {14.380448896308664`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {14.380448896308664`, 
             0.125007844128527}], 
            Offset[{0, 0}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 5}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 10}, {14.380448896308664`, 0.156975}], 
            Offset[{0, 10}, {14.380448896308664`, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             14.380448896308664`, 0.156975}], 
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             14.380448896308664`, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             14.380448896308664`, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             14.380448896308664`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {14.380448896308664`, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
             0.125007844128527}], 
            Offset[{0, 0}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 5}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 10}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 10}, {16.976998701539603`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {16.976998701539603`, 
             0.125007844128527}], 
            Offset[{0, 0}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 5}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 10}, {16.976998701539603`, 0.156975}], 
            Offset[{0, 10}, {16.976998701539603`, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             16.976998701539603`, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             16.976998701539603`, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             16.976998701539603`, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             16.976998701539603`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {16.976998701539603`, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}], 
       GraphicsGroupBox[{{
          GrayLevel[1], 
          AbsoluteThickness[4], 
          Opacity[
           NCache[
            Rational[2, 3], 0.6666666666666666]], 
          CapForm["Butt"], 
          JoinForm["Round"], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
             0.125007844128527}], 
            Offset[{0, 0}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 5}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 10}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 10}, {19.573548506770546`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          BSplineCurveBox[{
            
            Offset[{1.8369701987210297`*^-16, 3.}, {19.573548506770546`, 
             0.125007844128527}], 
            Offset[{0, 0}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 5}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 10}, {19.573548506770546`, 0.156975}], 
            Offset[{0, 10}, {19.573548506770546`, 0.156975}]}]}, {
          EdgeForm[None], 
          FaceForm[{
            GrayLevel[1], 
            Opacity[
             NCache[
              Rational[2, 3], 0.6666666666666666]]}], 
          PolygonBox[{
            
            Offset[{12.499999999999998`, 29.000000000000004`}, {
             19.573548506770546`, 0.156975}], 
            
            Offset[{12.500000000000002`, 10.000000000000004`}, {
             19.573548506770546`, 0.156975}], 
            
            Offset[{-12.499999999999998`, 9.999999999999996}, {
             19.573548506770546`, 0.156975}], 
            
            Offset[{-12.500000000000002`, 28.999999999999996`}, {
             19.573548506770546`, 0.156975}]}]}, {
          RGBColor[
          0.6666666666666666, 0.6666666666666666, 0.6666666666666666], 
          AbsoluteThickness[1.25], 
          EdgeForm[None]}, {}, 
         InsetBox[
          StyleBox[
           RotationBox[
            TemplateBox[{
              TagBox[
               InterpretationBox[
                StyleBox["\"0.13\"", ShowStringCharacters -> False], 0.125, 
                AutoDelete -> True], NumberForm[#, {2, 2}]& ]}, "RowDefault"],
             BoxRotation -> 0.], StripOnInput -> False, LineOpacity -> 1, 
           FrontFaceOpacity -> 1, BackFaceOpacity -> 1, Opacity -> 1, 
           FontOpacity -> 1], 
          Offset[{0., 19.5}, {19.573548506770546`, 0.156975}], 
          NCache[
           ImageScaled[{
             Rational[1, 2], 
             Rational[1, 2]}], 
           ImageScaled[{0.5, 0.5}]]]}]}, {}}, 
     StyleBox[{{
        Thickness[Tiny], 
        LineBox[{{0.5975848636616583, 0.}, {21.38165431274346, 0.}}], 
        StyleBox[{}, "GraphicsLabel", StripOnInput -> False]}, 
       StyleBox[{{
          Thickness[Tiny], 
          LineBox[{{0.9971248376924504, 0.}, 
            
            Offset[{-1.102182119232618*^-15, -6.}, {0.9971248376924504, 
             0.}]}], 
          LineBox[{{20.974123539232053`, 0.}, 
            
            Offset[{-1.102182119232618*^-15, -6.}, {20.974123539232053`, 
             0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {
            LineBox[{{2.7982749026154696`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {2.7982749026154696`, 
               0.}]}], 
            LineBox[{{3.59367464292339, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {3.59367464292339, 
               0.}]}], 
            LineBox[{{5.394824707846409, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {5.394824707846409, 
               0.}]}], 
            LineBox[{{6.19022444815433, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {6.19022444815433, 
               0.}]}], 
            LineBox[{{7.99137451307735, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {7.99137451307735, 
               0.}]}], 
            LineBox[{{8.78677425338527, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {8.78677425338527, 
               0.}]}], 
            LineBox[{{10.587924318308287`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {10.587924318308287`, 
               0.}]}], 
            LineBox[{{11.383324058616209`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {11.383324058616209`, 
               0.}]}], 
            LineBox[{{13.184474123539228`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {13.184474123539228`, 
               0.}]}], 
            LineBox[{{13.97987386384715, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {13.97987386384715, 
               0.}]}], 
            LineBox[{{15.78102392877017, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {15.78102392877017, 
               0.}]}], 
            LineBox[{{16.576423669078093`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {16.576423669078093`, 
               0.}]}], 
            LineBox[{{18.37757373400111, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {18.37757373400111, 
               0.}]}], 
            LineBox[{{19.172973474309032`, 0.}, 
              
              Offset[{-1.102182119232618*^-15, -6.}, {19.172973474309032`, 
               0.}]}]}}}, 
         StyleBox[{
           Thickness[Tiny], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"000\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {1.8976998701539602`, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"001\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {4.4942496753849, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"010\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {7.090799480615839, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"011\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {9.687349285846778, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"100\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {12.28389909107772, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"101\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {14.880448896308659`, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"110\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {17.4769987015396, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
           InsetBox[
           "\"\\!\\(\\*TemplateBox[{\\\"111\\\"},\\\"Ket\\\"]\\)\"", 
            Offset[{0, -2}, {20.073548506770543`, 0.}], 
            NCache[
             ImageScaled[{
               Rational[1, 2], 1}], 
             ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, "GraphicsLabel", 
          StripOnInput -> False]}, "GraphicsTicks", StripOnInput -> False]}, 
      "GraphicsAxes", StripOnInput -> False, Antialiasing -> False]}, 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {False, True}, AxesLabel -> {None, None}, 
    AxesOrigin -> {0.5975848636616583, 0.}, 
    CoordinatesToolOptions :> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}, DisplayFunction -> Identity, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImageSize -> {380.9296875, Automatic}, PlotLabel -> 
    FormBox["\"Pauli-Y basis\"", TraditionalForm], 
    PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.15]}}, Ticks -> {None, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Wolfram quantum framwork\"", "\"IBM QPU\""}, 
      "SwatchLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.471412, 0.108766, 0.527016]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{
                    Directive[
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Thickness[Small], 
                    Opacity[0.588]]], 
                    RGBColor[0.857359, 0.131106, 0.132128]], 
                    RectangleBox[{0, 0}, {10, 10}, "RoundingRadius" -> 0]}, 
                    AspectRatio -> Full, ImageSize -> {10, 10}, 
                    PlotRangePadding -> None, ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.3}}, "Rows" -> {{0.5}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"SwatchLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|"color" -> GrayLevel[1]|>, 
                    "GrayLevelColorSwatchTemplate"]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.471412, 0.108766, 0.527016]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}], ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"Thickness", "[", "Small", "]"}], ",", 
                    RowBox[{"Opacity", "[", "0.588`", "]"}]}], "]"}], "]"}], 
                    ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.857359, 0.131106, 0.132128]|>, 
                    "RGBColorSwatchTemplate"]}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "None", "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"Automatic", ",", "Automatic"}], "}"}]}], "}"}]}], 
           ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", "}"}], ",", 
                 RowBox[{"{", "}"}]}], "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.889337137446886*^9, 3.889957470318087*^9, 
  3.889959417432309*^9, 3.889959719307008*^9, 3.889959752737247*^9, 
  3.889959785717349*^9, 3.889959872865108*^9, 3.889959925322703*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"1ebafeac-e62b-40de-8509-4deebc5b89f2"]
}, Open  ]],

Cell["\<\
The above comparison shows very different trend between WQF and IBM QPU \
result mainly for Pauli-Z and Paulli-X basis measurement circuit. It most \
certainly affirms impact of noise in quantum circuit which utilises higher \
number of qubits. This can be reduced by doing optimization or similar \
methods. The impact of noised can further be studied by fidelity and \
decoherence in the circuit.\
\>", "Text",
 CellChangeTimes->{{3.889795408193324*^9, 3.889795421520288*^9}, {
  3.889795603602685*^9, 
  3.889795894171908*^9}},ExpressionUUID->"746d811d-2222-4cac-8569-\
ac1f4f0b500e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Quantum State Estimate", "Subsection",
 CellChangeTimes->{{3.890011640003862*^9, 
  3.890011655987331*^9}},ExpressionUUID->"0d29dbbf-0e67-4306-a81d-\
203b6da91101"],

Cell["\<\
Simulate measurement results in different basis state and find the \
corresponding quantum state estimation.\
\>", "CodeText",
 CellChangeTimes->{{3.890013217609788*^9, 
  3.890013277022872*^9}},ExpressionUUID->"70c12036-8bac-42b0-be31-\
30fc48c3029d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"est3", "=", 
  RowBox[{"QuantumStateEstimate", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<X\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex3b"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Y\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex3c"}]}], ",", 
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Z\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "->", 
      RowBox[{"Values", "@", "dssex3a"}]}]}], "|>"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8900117367131042`*^9, 3.8900117530374517`*^9}, {
  3.8900117846346703`*^9, 3.890011792854273*^9}, {3.890011848836671*^9, 
  3.8900118527952633`*^9}, {3.890012001162582*^9, 3.8900120111981163`*^9}, {
  3.890012063579384*^9, 3.890012077495348*^9}, {3.890012193710898*^9, 
  3.8900122117579317`*^9}, {3.890044396207984*^9, 3.890044403247767*^9}},
 CellLabel->
  "In[330]:=",ExpressionUUID->"3f209008-f840-4d85-af69-140cb777b203"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantumStateEstimation",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
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
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
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
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["24", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJzsvWeUlVW293vGvffD/XjHeMe4n++973v69Olu2ywo5qxtm3MGCQKCCuac
MCvmiBhQUQEDGEBBcigqV1E557RrV9VOlWve+ZvrWbt2FYWCjbFrMRbPzrX3
86z/mvM/4/875cbzp/9v//Ef/zH//9T/zp98+wnz5k2+84L/S+9cNHf+zBlz
p009Y+4t02ZMmzdxyv+uD76gc4fO/0OniGwZnz9txmKxbU89+WR6IpGw+wMD
A7/6dxqf+3Wul/Gxz2NoaMiOra2t8ve//U3OPussaWpqsscUI7/mVxsf+38M
js99m4oBO27YsGHwkosuGlzwyCODRx911OCu/Hx7vL+//1f/juNzv8xuGR/7
PLyMeP211+T66dNF8SAvv/SSHHbIIbL2u+9GvGZ8/K5H76/9BX6Pw6/9+fPm
yeOPPSYtLS2ma3326ady6MEHy3vvvmvPDw4OJnWx8fG7HOP4+AnDr/mLL7pI
li1bJs3NzVJUVGQY2bJ5s0w68kh5dMGC5OvByfj4XY5xfOzj8NgIt7fLGaed
JmlpaVJbWyvl5eVSWloqjY2NsmvXLnvuhlmzkrJmHCO/yzGOj30cfp1nZGTI
Wf/4h1RVVUlFRUVyghHwUlNTI1decYVcdMEF0tHRYe8Z5yS/uzGOj30cfo1/
8P77cu3VV5tOVVZWNgIj3Ac3zcpL4CgnHn+8Pc6Ay4+P380Yx8c+Do+Pe++5
R+67914JhUImM1LxwUTfYoZUD3v6qadkwuGHy/bt2+294xj53YxxfOzj8Pzj
KtWd3l682Lh52Rj48BgBO+2KkfdV3mDb+nTFCns/OBu3bf3mxzg+9mH49RyL
xeSfyj0y0tPNtjsWNlJnSUmJtLW1yXfffitHHHaYvPD888nPG8fIb3qM42Mf
hufmrPdjjz7aOAg6U3FxscmJ0TxkNEaQNZmZmcZHbr/ttt0+d3z85sa/NT78
/p06f2h47rFm9Wo58IAD5MzTT5dTTzlFZl1/va19YrAqVKfaE0bAUH19veld
F5x3nlxz1VWSSCRGfPb4+E2NPyw+WOvsy6w7P/fWnz3We5l9fX32HPoR8mPK
tdfKeeecY/OpJ5+UL7/88kd1LWRMdXW1NDQ2yvUzZhjG8JkwxjHymxt/CHyk
rue91VV4Heu9u7vb9vDe3l4Z2Eu70pzZs+XUk0+WuXPmyOyZM+Weu++WyYqV
mSpHKisr9wojHOEkDz7wgPnb83Jz7bPHbVu/qfG7xceP4QF9B9/2iuXL5cUX
XpC77rhTZulaxmdxyUUXmX7Dvn/OP/9p8ennnn22nHfuuXLB+efLFZddJtOu
u05uvvEmWfDII/LO22/Lt8qt0Y+6urrsfVMmT5abb7rJXvvN119Lpz7ubVY/
hg//OnCCbeuN11+Xww4+WL5ds8a++7gc+c2M3xU+PCZGD/zT27ZutRhaMHC+
rv1/nHGGnK/r/dprrpb5826WJ594XF599WVZsuQ9xcwy+e7bNbJh/feyfdtW
SduxXbZs2SQbN6y3xz9bsVwxsVheeG6h3HfP3TJzxnS57JKLzWZ11plnysQj
jpDjjjlGzlFMgZOcnByTBfAPdCfWPXNvsALm8KF88fnnFv+Lzdj/1nHb1q8+
fvP4YI2M5Sso2LXL4suv0/V5+qmnmhyYc8NseeXll+Trr7/UNZsldbU1Eg6H
dM/vkEikU9paWyTcHpKG+lqpr6vV+80SamsZMXmszR/19R0d7dLZGZa6uhop
Li40zODHOGriRPnbX/4iB/z1r4bD22+9VT788EPJy8szmy/yCx/6j9m1vG2L
92xVjB991FHy8EMPJX/nuG3rVx2/WXx4XKSOgoICWfjss3Kh6kDo/9OmXidv
vPaq7Ny5Q+p1zbeH2mxdN9TXSW1NlTTqY81N9dLS1KDHBnusvY113yT1tdUS
DrXa/dQZYurzvKa1pdGOfE5pSZFEIx3KzRcaNm6+8UaZOmWK3DJ/nryr+hdx
JOhn8G1k2JIlS6SwsNDkSkNDQ1Kf+iE5Ak/nPcg+uIznIoPj+tavNX5z+BjS
/TJ1PaDvf/zRR3K56vknn3iizJg+TRa/9ZYUKlZaW5qlsaFeaqorpbqqQhp0
jwcPrG+/3sOhFukMt9ljLfoctzvaW1V+VEubrv9wKMBG8B5e39HeYq/p7GjT
v9EgdTWV9tq+nrjiYq7JqxnTphpO31r0phQXFao8y5fMzAzLAbnn7rtMnp1+
2mlyx+23W84UGEGmpPLzsTBCbCPz6quuMo4EP2GMc5JfZfxm8DFaXtTW1FgO
xYknnGD8GZtqSXGRxKIR3cc7FRd1UlVZrmtX5UQD+lKN7fNtLU2KgVbp0rXd
wVrXybqvr61SDJUrhqptVlWU6iyz27W6/nmez6pVrNVWV9h9Jq8BM12Kq4h+
JvG4fB/wgX13wcMPyScfLZXv1qyWtO3bJDsrQ4oKCyQrK9P8h9hwT9LfQCzv
UtW/4Cfe5z4WTngMGxivuU11thOOO84eY4zbtn7x8avjYzQu0ENuveUWOXrS
JLOZrln9jelNPd1x3dNDhoMalRVNig/2eNYteGANIx/Y63neHcttrXMsLy22
282Ndfq6On1/jeKiQvHUIK36vrbmBputpo/VKdZqpKykUKory+x93M/NzpDj
jz1Wrr7yCsPH1CmT5crLL9M1fKzxkqLCfNm+dbNs2bxROf822ZWfK4XKk75f
t1YevP9+kzvYyRYtWpTEyVh6l49tRHY8q/okMSlbt2yx87O3NujxsV/Gr4qP
VD2qrq5O7rz9DvMFzL3hBlmnayrS1SlxlRftuvabdF2zv4MLrzuBh8aGGlu7
rHvWNrfBQ0VZsdQrRro6WiXaqfqV4qBLcRTratf7IZvNjbXJ26kzHmnXz1L8
qe4V09udqm/1JLpk7Zqv5cgJE2TyNVfLFZddKrOunyFZmWmyZdN6WfvtasNG
2vYtsmMbGNkgG9avU869WTLS0xRbWbJp4waL5YWjYPsiDxd/OrwD3SrV3pUa
24jcwSaw7JNP7FyNxzb+YuNXwYf35zHwzy185lmz28xUXSRtxw7pCLeb7SjU
6vgyvKJadakm1aPAicNDre39rGH0nva2RpMJbS31er/V1nh7a4M01VcbLnh9
V7hFIooVZqwrpPiqVdnTbPixx/V9McVHe2uj4YPXRExPa9Yv3SPvvfOWHKX4
mDr5Wrnkogvl4Qcf0LW/XdJ3bpOdadsME+Bj546tkpm+Qx/fLtsUHzyXmb5T
Mnamme6VmZEuzzz9lOUYXnbJJbL6m28sjwSZMjpW3sc2rlu71mLkn1u4MHkO
xzHys49fHB+puhTr4pSTTpLLL71Ur/93Eo12OR2qttp0p9bmRtOVqlTHAQvt
bU22l7Oeo7p22dtZ102N4KVG13qLrWm33h1GOtubpbmhWjFVpWu/TeJdyIeQ
dMfCqpM16t9pkkS03R7j9Rxbmmr0c9rs9cyudvDRK/fefafpV3NmzdTvfIm8
+vKLkpuVrut+mxTkZ+txu+TlZEpO1k5JV0ykbd8qOxQvGzfgZ9misiZdH9+h
HCXTcLJj21Z58IH7LV4RXyP2OXSu0b6TUsUIvpXs7GzjMrfOn588h+P23591
/GL4SOUZ7Ic3zJ4tJyr3/OTjj4xfgIvmxnopLysxOyx8oUD1d3Ql9n4mvMDP
kMoGZn1tpa7zJumOhm1927pOmfGo4kWPtdXl0qEyhsc69PXIFnBTX1uhule9
YrHWHmusq1QeUhfgxU3eA56uvPxS5Q//VL1qulx68UXy8YdLpLK0UOXFFsMI
+EBu5GanK04yJC83w26Dl21bNsnmTRuMl4Cb9J2Kk8wM/Y15qputkenKZ7DP
LXnvPcPIaFnC7TrVxbiNjQC+T5w9Y9y29bONXwQfqXscMuOYo4+W226ZL9VV
lbovNkhleZnOUt1TdxnHgEvAi7G9wr3Rb9xsMixwbNU1XFNZajoS67lVj+1t
yjE6WmxNJ2LtJhcSgazg+fqacmlUPHSZToUu1WrY4HleG9H3tjSijzXp4/CP
Rnsdr68qL1J+fYrx8WuuutJ0rJ3bN0thfpbkKxayMnYoBjZKlnKNXblZDh86
c22m22vAUdqOraZ37VB5gkzB5oVcycvNNp898mH2rFkWM4/MSMWIj22ErxD3
Bd+HvzDGMfKzjJ8dH/66cSQnFf79+WcrlHe2SQW4qNB9UfUpx7VrDQ/YXDmi
+8Ov4QXoS9GAN7Bm0afQlXpY28Eejx7U3lqvulidrXvWNY8jJ6orSwxXDXUV
hhWwwPpH7+LIfV6HDIl28ff0vmKltDhfv4vqNpnblZsfIXNvmKX6zc2qa90h
WzevlzJ9vmhXtpQU5JqutWPrJinIAzOZhon83Exd+5mGFW6np20NZEyGfuZO
xcw2w8nWzZtMnhDrMvmaa+SUk0+Wr776ymRtqr6VGtuInx1fJXoXY9z+u9/H
z4oPjw32OPxlxAWWlhRLS3OTFBbkp/gr2lQeNBjHgHvDM+AVY2EjYbalWsMI
coJ1Dccw2aL6ExNstDTW2NqvKCuUuuoyw1Mi0mZYQkYgH3pUxrSBFeUtYKtF
8cHzhhvVs/icTvhJvFPefXuR2a6w606+5irj5yedcLzZscBJtsoPZMjmjd9L
2rZNdj9T5USG8hCbehtOkqmPb9+K/XeL6V2Or2QoZtJk04b1yvE3ma/xuWed
zYJ4AfQtfCIeG6mxjYvefNNsW8RI+nM+ztv32/jZ8OGxsWnjRrO7PHD/fdLV
2WH+bmI18EfDwfFVw7nRqeAY6E3RABumA8EhAvnA46xzbFIeBxxNTuhrTZdS
Pak3Hpb+7k7lGw2GAZ5rUqx06rqP6+0Bfa5d8QFeoh3NduxSHPTA0+En+r6+
eIe+rstePzjQLY898qAcd8zRMnP6VItVfPbpJ2Tj+m/lwyXvpPCPbcrHN9v6
z85UPUvlCLJkF/JDsVCkHN74vOJk6+YNAU62Gm6yzAacYfxk/ffrJCc7S1at
/MJ0KPQt9Cr86qM5CbGNq1atsthGsMIYj23cb2O/4yOVh3/4wQdy+KGHyqcr
lpvfu66m2vh3SOVDe+DXNn6h+GjQNd+k+3fEbFMOE/EuJx8cFvDf1UuD8vFU
3CTsdW2GAT+7oyHTs8BDX6JDX9dmGOrVNQ+34PGEviesr4nq5zMjKj8i+hqw
wXO8BgyFlLf36PumXzdFTj35JLlh5vUy+eqr5PPlH0tjTYXxktLCXCkpzJFi
PYKL7Mwdyis2mzzJDORKcWGevKcyaOum7/U9xZKjulW6YiMnK81egw0Yv4nj
JlsVe9/rYztM38IfeaFycuxbxKmkYsTHNpLne8ykSZZP4se4betfHvsVH6l+
jWeeftp04x26H3Z2hM3vTcwT8VEdASbC4ENlCP6GOl1rXodCX4JzIyeY6Erm
y2ioMk6A/hPW+6xlbFKsZSa3kQPMpvpKO6IfoUvxPmRFrLPFjmCD9d9QWy6V
pbukWeVLqKVW36OfpZ8bU8wgiwZ6VIYoHznrzDPMpjtj6nVy3eRrZPvm76Wy
ZJfKhCzlHoqNXTr1mKtyYldepq37gvxMm9wGH7wf/8nmDWulWjECPsCTs3Vl
mq0rC79J4EvBLoy+lZeTY/GQxGTiHxrN27kNbqhxSvz9jGnTLPeLMc7b/6Wx
3/CRio0H7r/f8iN25eepnGg1uy2+DPwaXl6AC2Kk8GM0KgZqqhxHwA5bV1Me
cOV64wXIi4TKhJDpRCHTfWwmmJ2mSzHRmwZ7u3S/D9t7hvpjMtQXlW7VsZAf
6FpgA9yAD3C3acN38tILC00PalNZ4WUKepXpY4qR/Oydlk973bXX6F5+ucya
MU11pC2qN2XIrpx0w0ixcvTSolx7rEDXOsc8fV9xQbbN/Nx0uej883Sdz1Fe
caR89OES5fa7zOaVl50R2Lsyzd5ldi99bKs+t3H9OsNIfl6u+Uo4r5s3bbJY
x9EYqQliG69Vfk8OF7oXYxwjP3nsF3yk6lR33n67+bsKC3aZXwNcoEcRA2ix
tIoNcIEeBQ/Hf5Gfl234QGaABzCAXcpm3E10I2RGr912990MG04MI7rXM2O6
34eRAdihFBfgirUPxpyuhf+jzuxU69eultNOOUUalI/jXyS+JNLpbGTxrhb9
RQOy7tuvLAYK2YF999GHH1CdKkfyFRu7dN3nZaepvrRDOUaa7v9wie2Kmwy7
jW2roqxA1q9zf4fv/MWny+Tggw6URa+/os/nmM0LTgI3yQ9sXUxkC/7FrVs2
mX0rJytTHn7wQePt33///Zj2X3g8vnjihvFlon8xxm1bP2n8y/hIxcbdd91l
PoKSkmLVoUKGDTg49lpi/6Kd7RbrEWptNJmBrGgy22tp0lbLXo9eY1Nvs+eD
AThFR0h5c7diArmhx/4eh4negGNEkA3hJtO/WptrpDvebq/hCF9JBJ8RCzDS
3xtRXX+jXHDuuabbYQPj+3QjmxRvkY4m6e2JyfPPPmW6/a3zb5JrrrpCFr/x
iupy9VJbWSxlKjPKivNMdsBBHC62m1zBPwJGsAEvXvS68fo+5fxgbsumdTLx
iMNlwUMPSGVZoeRkpEka/AOunpGWtAdj58KfmJWxU7Gy1WJTHl3wiMVvbty4
cTeMpMY2Pv/cc8b/kDeMcYzs8/iX8eHjSR95+GE5QeVGUWGhyoew5RZ5Dt5U
X2O4IH6qTuVFcxD3hF8OrgHnBg+OW6fgIhZOygf84HCJQV3THhOsc3wTPB5V
XuHxMNQfNawMqK412BdRjDaafzwRC8nQQMxeh+zg5+/csUl1kbMV6H26TouM
P/f1JkyO9Xe7utLzVCf6x+mnmfy49uor5ULVk5hvL3pNaquKlX9kO5zoRJfK
y9lpmMlVeYLuVV9dJvfdfafMv/lG6euJ6F5RY38b38oJusfPu2mufk6pFKqO
l63YwD9CDBexj9n6GXB9eDs6F373nOxMue/ee1TXOlYxs303zu71LTBC7gz2
X452vcbtv/sy/iV8+P3olZdftv01H77R1mq2W3DR1REyuy3x4ehXxNp6/7bZ
nqJh4wD4M1jv7O/YWod1qAAfupfzPHs/coL1zgQTPYmwYUB03TO5DT54HBmC
n8/86noc1OfBZUg5Rq+u/R79zMz0rZZXTnwu3HrLxnX2m3oCWxcYvPjC8w1D
06ZcqxiZIsuXLpGnn3hUlrz9psqQIilXLJSX5Bk+wAq8A/0rN2uH6VdNdRXG
6d9SuTM42G+8Ch9MQvHfWFcl5/zzLPPJlxXlG8/Py043/yI+E+xacBRkCPpX
dma6yZL8vBy5847b5eSTTtLznm+8Y3ScPLpVa1ub6WLkzGMzYYzHNu71+Mn4
8DrVyi++kEMOOsjskORvo1O5HLxWi5MqLys2jODPiAV+DDedPoVfAq7A+kde
9JhuFTI9HVwwPSYa6yv1M1rtMTAwFOChz+tQ0TZbz8Qd4kOvx1eucoMYxM4O
YuLrbXbr3wI3cO+sjG1y9ln/kIh+nx3bNlmsejTaad83Huuw9X3s0ZNMr5qi
/Bz/IL4M4lTKivIkW3Up+Hup4gI7GDiBmxsnVzmC3lVekq8YPFM2b/jOTrnJ
xziys9H2CWxt8BpsZDkqM0oL8yU3c2cyTgVZQqw8cgUuDz6IBc7KzJA5s2dZ
/ju57nCP0TUhSoLYRmpIEAs67+abk9dw3P77o+Mn4cOfV+IaDj7wQPnqyy8t
1xU7Fb5w5Af5SfAOYs7BxbAP3GHD8w30fexE/QE+PO9G94oGMSD4QMBARPky
OhKxVcghZEEYe6yufXwm6EzIBrDUpzqYDMalR+WEyRv9HGSKa7nYbZ+jUkIK
d2VaPgafyengfehy/D3G1s3fm536+unT5PJLL1Z+fJ9UVxRJQV6G6U5M9KjM
tK3KIXYYT2eNg43C/EypqSiU9O2bjJc11JQZrrtjoaTtAaygHyKv7lZ5gJ1s
0/q1UqW6HvIMDsLctnWjxTfuNJvwTpMjO3VPIhaYWtkzpk93tbLHyEm02Ma6
OsMPMQzES0ejUft947atHxz7jA8vm9Ft0akWLXrT7FT4NvBrcAQb2HCxT7U2
17u1m4KNRMTFibA2sONib3W2Wse9sR0hUziiAyWw13Y5uYAfI6brF3mBjjSA
bgUOAplguBhKqGyJy2A/a6DHdCtkT1zXZTf6GPyks8V+fqi1Vrnzq/Z5fA7v
5bNaGquUW3WbTkTM2Ixp18mlF18or73ygmJaeXBpvvKVAptVzNIC8xNiw9qh
a3mnyiL0rPKSXfKJ6mMXnHtOYE/oDGwM4aTtwezWUfA6KC+/8JzZyj5d9pHi
sNgwgl61M8gryUjfYTkmHiNwduK2zlR+9MQTT1hc1lj9FnxsI7Jkzg03WF1U
dDLGOEb2OPYJH6m2qisvv1zuuP02y/EjDxyZQZ0Ep0u1mY2U2Fp8316vints
BPYp1ga6ODwCPxx4wA8IDpA3HfizdUa6Wu098PJIZ7PhYhDfhmIAGxSyBPzw
GGscvYvJ7T7l6OhaPfhH+mKm8/N6W5PxTuMBn69Yqo81m26GDEKWhJXrDA32
yP333iUnn3iC2a7AyCcfLZEy1aHAR0XZLqkoDabiAP2qurzQ7Fdwj3zFCjLj
qccXWEx8T3c0+L2tQQyM2xPCqvOZ7Vl/AxhZ8clSk8v4ZSoUd/nZziYGLvCP
ELeF3ReswE/Qs9Z99635VagPMdo3Mtq2hV+E3H7iyaiXzRi3bY059gkfHhvY
Dcmjxi9eW11l+Us1ysGRF2DDYm8720x2YDN18VOek7uYc2c/bZHK8iKTIehZ
+AfhChZfgg6ScBwaXHhbVK++D70KbMAf0K2GZUZsBDbADuvdPkf1FxlCt+qx
272JTuXrcdOlSnW9g43+QBbxWUxkzRWXX2rr7h9nnG4cIj1tkzQ3VZlfHHxU
lhc4nNgsMLtV5s5thpUS5S51VSXmT3zxOceNuyNt5sNH30OvwkfTid06HnZx
YOEmfVW/xTxOUDny0AP3mQzC174zkBsuHjjd5WDt2KacaYOUFBXKojfeMN8T
/Q/p7zZWfbrU2MbFixebbYu6wf76jvP2EWOv8eE5B/sN8p/421Bbq5QWF0pl
RZlhwqbVTGi1NZ6Mfw3y8lLjB/Ft3zLvZnn8sUfNR2jxUdipdK2j+7vp/H3c
Ro8a6GX9JkwekePXzecMpMqMeHKy9pETQwMJwwLyA3wM6fujug55Hj9EY32F
vKo6EzrbUIANO0qfcXlkB7an66dPtZjdfyiHnnbdZF2Xm6RIOXh5Wf4IjOAn
J57EyZR8kx8XnneurPzsE/0NCWczxkat3wc84BMlVpjf382+gd3abM99UqL6
Gjlk2H+Jbdy2eYPFBOfnZSnfTg98iDuNl2zdslm/S6nl7l83Zcoeucjo2EZi
6PGRUGvPX+dxjCTHXuHDx4709PRYDNC777yt67jbckQdNtpczEjYYcPbqtCV
yGsymRF1Nht0bvzgYGfhM0+abo/cYD1gYx3oiztc6BoyTASTx1j3YMK4PnoQ
nCHgGqlTBrtNh8HXYPLC40N/bn9f1HQsJ0tE9ZWd9pvAxwD6mT6OHVhv6DrM
UG4+wexWxJU8/ujDsmb1KnnhuWf0uXT97YW6lyvHQI5UFBg2Sotz9Zhh+hc8
Hj8h3LxKX9OvMrAzVK/nIGT2iEHFPfEu2OfQP8NBPJnL3WqxnHds3+eprMa+
BRdBjhCjBUZykxhJs1gtcnfxsfP3XtP1jh99LD1rdGwjdYqxC9Avzo9x25aN
vcKH16see/RRs5X09fboOiiyelLNVnOt1cWNhIN8jQ6Xm0H+K3427FHcR3cg
DhB7ZizQtdEf0F3wJaLvY2cd6I+brBjQtexmTLlFPIkLw4CuY/Qr7g8GmBjq
j9uaMiwm8O312OxWfCTQrxSDHPv0s4cGHT4KdmXJxRdeYDaAvl7H5w0nOj77
9GPbW+fMnmk1S8gBCas8bGmukSpd+xXIDZ15igtwVgZnV5yg+8BRGurK5dtv
VsrZqpexLwzqb0GPioQbLeZxQPFBPKSPH0PnTAR+0HbbQ+pU9nXpntAp06ZM
tvNELIr51bdvtiMxjUy4+zaVIbk52bL8k48ttgT74p70rNGxjeQrUteLutzU
sk+97v/G40fx4fcRfFATjjhc11Oe1AZx6q5uZ12Sc/h8pqj5wcO6VzaZrOgM
8vrIPyLm1vx+un47TdfuM/0B2z/7IPEU6N/IC7AB52Zib4I3j5ATipFelRH8
zV6L2+izI7jhp6FLmfzQx8AIz8f0ObAxOOD60uzKzzL/QY/pdk7eeHw8pvIC
/WrunNmWB7X2u6/1t5dJSTE4KLJZjLzIyzCMODlSaPeRI9jAsHdNnXItZ9Lw
INjUVB7i42lrqjGccN/b78CIt3VzHsmHsTpDup/cefutFp+4acNa1b3yLH/E
cncVJ+SgoGtRL6WgYJee0xtlxrTp1kP3x+r/WmxjDfHVdVbPmFw2ZA/j3xwj
e40P7ObPPPWU1XcuKyly2Giss5w/8OFlh8U5wcfJZQpi08EBeXr4M5Al6Fnw
CrP7wkm643KjrsFjJh1l+gJrCS6CzAAjnpuY7hPgBV7BNLmhR9Z9JKhbAg5M
dsA3hnp17UfMdgQu4uhW+jw5T4xdqteDj16VHd0BxgYNV0Myfdp1xsmnXTdF
1821yr12SHU1+kqRrqldyoMzpbAwWyorVZaYrpWu2MnVz8w03IRa6+S2W+dZ
bhWD3zyEf99m1Hg58gOsDAWcxGzcPm4g7uzdnMuG2gqTJc889YTxv5WfLVe+
U6QyY4PJD3KzfN4uOe3btm4xf+Dy5culqbnpRzGSGtt41513mr5FvLx9739f
29YP4sPvHdTeJ/a0upqamzVJbOD78zYr4xxBPhN5TPALbDTmH1fZwRogFr3X
x6TrekDn7yIOfZCvMWgxFtQdGBoaNJ7gbVXctrVuciNhuGF6bHCk/g624Cg5
gKqPDPSzxvvtc/t64/oZ2HpjhgOHgQAfu8DHOboG4kl8wNt7VJbgN7z0kotl
5vXT5fbbbrHXlpTssmOhcufyskLDRpnKjbJyN52ulW56F3Yucj4+Xb7UnU/l
H/gHZTBmvAMsuFgxFz9GbH5/EEuDf8RwEtSOcP4gZzd/7x1ndyLmkdhOdC7k
B3lY4INc3fzcHHnqiSfMzojfY197ktAzBd1yw/r1I9bCv9nYIz68H5DeSmDj
gw/eVy5HDecW6w/QbnXbqq3GSDTI+WuzvO9a06ewU6E/N9SUm77gfX9gw3QI
3UOxraIL9Qd8gL1/1Rcr9H7M9CvsT+bjG3SYSJUZwtE4Nj/B6U2s/0HFWiLe
Zb7KNupl6XpqbW3Ua95sM0odIH0+Gu2w35aha+rcc862x3k+FutQnCQUAznO
Lzh9mtVwe+zRR3QNlajcKDBscCwrcxN5UllZLFVVxSZHMtK3KT4KjY/gt9uV
52SixYkNJcx3DycXZGGvixezuHuVJQNBHktfgBGOUcuxbzI7HHXr+nqi8u3q
r+SQgw6Wx/V7kRtAvi66KbbfrMB3SMwPnIK+KD/G1ceKbVy2bJnhkDxQxr+h
bWuP+PD7BTnNrI/GxgaVG40BPmqMbyA/wlazrdny/JAZ3obbGuhTkSA33MUY
Omw4buHxQUxt1Gw7xil0kCe48vNlgV+jN8m7HS66DSuskYSuZWRFR7jFcnZj
sU637nX9o0+ZXqWv68QXA98NudckEhGdXdLX16scNt322G59bQfcSXHS09Ot
MvNTiyuZPvU6y29FjsDRF735upQoNnKJ+1DdDBwxC8khLMrTtZWvz6VLaUm+
bNq41jh1LIrO1x34+cMudhibtMpFdC2PEfCAzoXcgKtwH3lCfEEUjqVYoU4k
3F0Ge8xPSAwDccGllmu1QTIzXJxvZkaa2eBff/VVy2HHVlVZVbVX+EjGNiqm
NmzYYH7EJ1UWMVLz4P4Nxpj48LKDGB1sn8uXL7N6n2CDmp/UGKH2Dv4/5AUx
qCYzVBeAf7RaXduWwMYfMk5ufoyEw0af+fqixrfxy+EL6e+N2rpHnyK+/N23
35Rb590kjotEDAvRSFgiXe0247HOJAboQ+D0Ij/7UyY92Hokou/tVfkyMNCr
uECX0vXY2yNZusaIzQUf4Ai8cf1ffGGhyY8bZs2UaVOn6B78gjz4wH3y7DNP
SkMD66xY9ZEincUqQ4pM7ypSfKB7padvN5ny6isvml12aIjvlAhkpn7XocBf
Q4xlgBHv/yT+BIygjw7YOetI1pmAu+FvheeBGfYNfKvYf9Hj8nOzLJeduF9q
ohDHmKmTflrPPvPMPsmQ1NhGev6wDm6aOzcpP/5NMDImPrzsePONN6wuAL2W
0KnoJ0M9HqvrrFzDxSBWBfUSQrbHgQ10hb7ABoO8IF7Ec3Kw0R/gozuIqzK+
PZgwv4TZb4f6VTcpMNn++qsvCVw5GlE9rC8W2GWdTsXaJ8YWvYr8jeQchZV+
5SIh1QPdOh2w6W7DP3ItftdxDsVpv+Mlc2+YLWfq3n/j3BuMn+fonhxR2VKl
ugz6VWVlicOIcZBiu+8eK9L1lKl/r0EeuP8euUUx3tfbq/tLvbSqvknssNMZ
48M4QYakYGTQ/CQOI/gQkcG2t4CPQJYgo8FKX3fEdFTq1dFXh3rAyBUwkh3U
naNHCb1IsOFW7YMMSY1t5H3oEZdefLH1ZEldJ3/gsRs+vOzABo5c/vijpWaz
olZVR7uLzUWvsh4B9a6emqsz4mro4OfojbvcWJ+7AV7Qnwd0XTh8RGyNEEeF
HxEeAdcgTyOGXTjcbOu8qCBPJhx+mKz+epV9twGvZzGx5aJjxbHb9svggHts
9zmgvyWhXKSZXydergwOOnwUFxdYz04wGY9HVLboPt/fY5z9Mt2TqdUGN69U
HlxaqpyirNj0KbDhZQjyw98vU7yAjzb9LddNuVbeevM1/cyY+ez7dR9IEEep
ewJzBFb06OTHcCwN/qLWphrH2YOaRZ0mP1qSstrJbfLHwnLn7beZ3Wnd2jWW
P0LNoPS07ZZzSC8f8nT2VYZ42xb4wCePDMEuBue3a/LHxshu+PC/9/PPPjP7
DbG5dYHNinwn1z+gwvDA/gUH53aLYsbFV4Ush8P5OJyfg+uNjReugdxgsm9y
P0TtHl1L7K89ZteKGs/AJ8hgHzz04IPks0+X2X3DgXISdCZkylAgLzgOmh1s
pG4FJsAHPQgdPrz86Ld9IBxuk88/X2G3wQf6XGNjnfkZwM01V18lTz35hO6h
1VJWXmw4KSKPqWiX3YazOz2ryOQHvL2gIFdqayvknyqXNm74zvS6hPkr+X7d
xtGxW8eJ01fZC1aICRsIcrt8jlfc4k9q7Oh9iL42KvjgfHPb6qI2uRiEl55f
aPbfZR9/KIUqG9O2bbH43pdfetH6v1XtpS3rh2IbH3/sMcu3St+5067JH9j+
O6b8YFxy0cXy+muvWhwJvQWsb5/KDlcXt8nZcsPU5KwxHdjyOYJ8hu5Ahvg8
8b5uFz8FRtgf0auIK8QmjBxyua5u3WCr8nYqw4qOjRvWyp//9Cf5dMXHYnYg
xQZyo7/P23CdHjWMkYGUOaScvEv5R0fw+5zsgIdgRyYXasuWjfZcIu7+Hj42
6q3Nmnm9YeSNN153+ChDRtCnoySQISXBdHLD4aNQ9fYC2bZtk9n9Wlvr7DPB
AH579zuHYyCHghhjs3Vjzwhi+jlvxCqDE1cHuMV4PPIDf0iPxTO2J2vUW22L
Duf7WfbRB/b9X3rhOZPB263Hwg7Lk/zk44+NU/yYP+TH7L/vvvOO6b/kxzH+
oLGNI/CR6is/4fjjpKa6SrHQZnV5qI9L/jh1FvB5RINeAdQ6Aye+toLPGbfb
PvYWvaG3y659Q32l0zV6oyYv8A8730Ys6d8wGy7+O5Uj5vvQ8fWXKw0j9Nog
LyNMz4EROHAyw8mFfknFR2dnu+FjcHDAsJH6PPd7erCbDSpHdzLr7cWLrJY6
+avoV6wt+thWVhKnUWbHwsJ8082QIW6WGEawaxUX58uyZUvlogvON8wOmZ+y
2zDi4iKdLcvHVQ5zEefzgZORr+LyWTpNB3O5hm12romDh6u7PIGwq9dNnVTq
bWPbUv1z04Z1VreS/tTUDaJO/P333Wt5VC174VP/MU5Cnsk333xjPpJXX3kl
uX7+YBgZgQ+vW1FH+vbbbrU4K/QqevKR94TNCpyEg5h1ron5x0NNydjD3hTe
wR7o4glbXJ8NdIKo6zmA/mQ55HqthwYTY2LD+f16zLfHeH/JO6Zf0xetr6/H
1n0iEQ04tcMC69zLCHK9OXaoXhg32TAow7hwOgE9m+kjODQET3Hc/O677rQ6
6nPn3GDxsNQLWfbJx7pvKC+vchhBjhTo3lxZWWb8g9voVdiLG/WcPPvMU8bt
3Xnl+/fYMYLfY8jLSn08GS8zHJcfCfLqydnivJGbwl5DzQlXN9jxO5/HH9I9
xtUzcr1PsIcM6TkkNoBaQDfMmmXx7/RItBpzaWmWG7U3/dl/yLZF7MpO1bGO
O/ZYueeuu5Lr6A9k20riw+Menxm8nB560UiX5ZMTaxUO+jRhu3I+8jqX+4Rv
oak2wEc4ySOtHg912KjlGcTmDQY54+gR5IVbrLm3X+0BG3ANpsfIwmefNtlG
D2cGNifWPnoSWOnr6w6w4bg5epR7Dtng8TGYxAdrHr3DyRZsWAnLP0VXnz1r
pvnzWV//OPNMWb36a1379YqHEpu5OVnKxbOlULGBToVtC5w0qM55w+yZ8vKL
z9vfGLBYL2d3I37fxbj0mC4pqbHHgy4mH2xYbn2/s2sRp0weMdyDOBPkR080
nOzr095Sb9iwia826KfVp+eGPqQWB3DxxdZnl/hDerztKc9wX+WIr52CD2nK
5MkW4+1+8x+Ctyfx4X8Pfbz4regT1FtAt6L+iO81gI+cCSbs+nSFzC8YC+o+
o1ch78EGsmPA22SCOHUw4nPHsd/g90aWOGwkxsSGm32KkW6z1a784nN5++03
paam0r4zOgw4YG3HYhHdox0ekAdwbuK7HD6GB9yDQSwf8Vf+fm1tjdUEuW7K
ZOMe1Czs6AhLRWWF8nK4d75yjzzVr3bZ5HZVVYXJE/Qs8AFOLjj/PD2Xq4Nz
G9ikA38/+HBcpGeYbwVyA/2KfcOfL8vJ7e10tr6uNuvnA0ZcTbwu5w9J6Zvl
7OyuVxy+23i0QyqVI11x2WU2n3v2Gesdjc32X5EfSduWj22sr5dpU6faXoP+
lrqmfsdjN3zcMn++PPTAA7oWe8zn4fom1wR9zVxPS2oNJoL60dazjJoh9M3A
RqtHbFjYrAYCXwdH9Gj2RHRkcMNaQa7AP8xWpZw7KTu8DTcVH/g6iE0P5EhX
V1g++OBdkxns+86ONWQTXQk5AiZaW5vNdhUKter7sSPFDS/cdv7BTNsPuE/N
WuKN8Bezz15x+WWKw8W6P5ZY7aLiYmy57LnlioUKwwW9CJAljpeUGSfJycmQ
M047VaqrSu27Dpk9mt/gfpdxEZ+jBWYUD5yXXuJ7A9sWNvDhPLHOpN8IXcvF
tVU7H4jqVVbLIsCGxwkxv53trpd7v8qRmPIvcqKxO6E7btu27Udj3/fF/suR
WkLo5vj0qaXN+J3btgwfXrdCNp5+6mmuF6DqVtV6/fEJgg/ONz5BYn06gxqg
w/nkIdvTiGEfsJy/IMYqsOV7ueHyu9uCeCr28x6zb6ILDHlcjCU7Ah8fsVFw
C3QqRmlpkTxwn8vpARPD/j+v/w4ZFnguGo2YXjww0G8TbLAn5OZmJ/HBtXzn
7beN1944Z47l4X3zzdcWWwMmqqoqDRfcdhgpN/6CHOF2eXmpyZGvv/7SfI7E
tjh+PhIflqelvx85MhjEnZnc0P2DvJd+mz73JRI81mUx+MhldFVsfuQmsx/5
mhaRIEaUPUsCOzhxJ4sXvSHXXHml6c233XKLHPCXv1j8YWdnp/GIfxUfo21b
+Fmwn61b52qJ/Y7liOHD86n09HQ7h/TowGcONyc3EH8g+GgL+v35/Cf2L64P
0+9l3p7r9IIuu7Zggz2wI9xk19zbqsAJ+Rox6xsYMv+42WpTsEFsLzZb4kPg
4d4+BX8gjhCucMv8efb9h59TXay/z3hJZ6eLQ2xra7VeucgPJnhgP8jIcPFX
Ed0PuP/AffdZTcPp01xc4lrdK8rLy1S3KrS6qciSVBkCLtC5PD5qVR999ZWX
rS4VA1yDATgIx6GhAP+K+a4uZ28iL2soGbfvJjkow/lhEYtN6bacmWZnI7fa
YZXJ2vbULR3odbmRnMvPln9stbqOP/YY+31PPv6ofPP1Kjtvi99aJH9TjCxd
utT8GaN7S/+rnCSkGFmxYoXZf+mn6NfY79C2Zfjw+CZGZ87s2coFnU0X2UGd
N3I8wAi6EL0IuEZwjza7X29xD3DyWFDz3PY7csZ7h3kH+57HhvnBgpw/8EF+
3JD5+0Lm1+A2Ezsu2PDxUm4M2oRvgAF63pJbNX/eTSYTuro6ba3H43HjDcgN
Huc2R2ISeR+3kRe5OTlW65z7XMPJQe3za1RHv1X3WvgImCgsLFAeXmB8Zdeu
/OTk8ZycbMMIsgR83HTjjTJzxnRpamwM/DGpY8h+DzGV5Ep2Woyyt08M27IG
R+GD2AP8ifiQLE5Rz7vxe/YYPf8ZO7fK16s+k7RtG/WcRuWeu+6QZ5583Pq5
4Vtnr6FXdkL3BfraEVtGXb+nn37aMOL9f/sDIz62cdOmTRbjiT/RfvnvL7Zx
hH7Fmnh78VsWi9hifo7mZH8nOJ7V3MFnTixRUGs91eeBbuX8uy4u3cXkBrl/
cI7BxIhrDz4G+2ImP/gqg5a/1Kk6VyjQoZyu5GILHW9gvcO/wQWT9Y4tAZ0a
uyzD26aQE553Iy8cN3G/NZWfn6t48K/HpwePpWcTtejXrFlt3MPJiuGJ/ECu
wE+RLdnZWcbV8/JyZaFyYPpwEIcB97/pxrny5huvWb+COrhbvGvERegxTt4d
6FUj84o5eg4SsxpZgR1M95WC/Cx5YeHTFl95wnHHKT4+tzowToftNk5HTXpy
11yt/CrDB3IQPeG1V1+V8849R+bddNNuPdz2B0boI4ovjb9FzS2Pjd8RRnr9
eiHmjPg26mC4WN3moDeg619jNdYjTmagYzn9yuUx+H4DfRZLEjFfltU7G3S1
oOGUnnOk1hnxawAOYjl7pncMWM4fMbrtissQNa5VhsG1wQd+D+ff4xwPBbfF
6jfCq994/VW7D25isah4zg6u3OsHbcLpGciA8wJ8sG6sx+D06XK9Tvwi2LLg
6sQfuf115HQ8vdLkCPoVcqS+vtb4+tatm+XDD9+33nJXXnG5xTuedsrJ1hv6
jttulXcWL7J4wob6quC3+zFkvB0O4vKG3W8k/+v7dautJhe+R7BMv1D85TWV
xTKor0e3ot6Fxfyge9EzqMP1WrH6x51h+yz41VuLFpmcRf9ib8QnUjOqh9u/
qmvxmcRqsedcfOGFxnkYvxNO0uuxTB1w8o655k0NdVZDNxxyNRDpRcB5xmbS
bDkfjebrsL7g0VCyxrrPnx7o6zLfHzbJro6mIB5xWLc23Ur1CfTlAc9TqcPT
E9c9kvi9cGCXjem+1mA5G/39LsfQ+wB9DJXzcbhYwypdq3DrLz7/zO6jZ7nh
YvWdzBgybMDRGez3rDPG119/bfadWddfb9yD2jdcX3gZe+vwtd8dI9i2kDPg
w/H0MrNvVVf7CZffJRs3rpN3312sa/weufbqq0zOnHH6aYaZu+64Xd5/723L
JzcZIG4NZWXusFhgcklOO/UU65/79Zef2zXx+iZyuyuoic97qZkPPmJd7UFt
gDaLf6AOBnbwxYvetFxzBna762fMsO9SXFQ0Zj34f8W25WMbqf2LnOdcMn4H
tq3e1DwobP70XW6oq3G9bMLsQXWWs4bPvLqqzHyDoYCPIztG4CPg5T7+tKmh
Msh3SIzAh+nNVkcnbjURWhUD5PmR10curLNDDZrfAD2LtQxe0Kvg3MiQYX/5
UPBahxHWOzEPxFcyPCZS8cH0+MDGiR7FeG6hy/lAdsxUjIALv//tfu3LkzoW
s0JlCzwEOVJaWmy6FhOfCXFb+Njxj9TUlOv6q7Z+i5zPvNwsi7cFF48+8pDx
Fjg1dd7Iy3pQZQ/xhsQTf6WY8LLEjT7zy+IvBBvNDVUm46mLj0/K2VLaAt9V
m+17rrZ+k6xa+bnJDe/PY9D3i/gE/Ov4xvenbcvHNj715JO2h9EnjvEbx0gS
H7ffdps8/NCDun93WT9y6y2rGGEfws8EP+ca4Bc0H0fE6VYuVrdjBD6szmFQ
nwTdymrtDAbxFINObiAzOrGDxTstpr3H+DffZThvg1xA5wf363rAsOH85V0B
VrxckaTOhCz8y5//LF9/5eoCggt0Lf+8e8zxrkgkIt999509htzA18zx1vnz
k+tjN95aXiEuxiTgIGWlNjMUT/hT4CP4RLBpuZitUsMHcY0+l6qstNDiZNgb
mlVnpdfHW4teV64yx2JAqHvy/pLFqofdYvW3kC/oVNSJePih++XTFR9JUUGO
6bkeM9iweoJ8dYv7sd4qVXYdwQg5CqEgzjQvJyuoKVA9om7sG6+/bvsL/aLb
dD3vV/tvkLeLTQvb1mfBHvYbjm1M8g/0iY+WLrU9GttVFz3Jm+rNH9jcUJus
TUItW/qK+14dqfjoT8EH2LA8wX5s9S5mAp+x1RghPgJ7pPlAXOwIvBybVaq/
w8WbD8ekD/s2vA/QYyWS9PcxGVs2b5aXXnrRfBfokOhaY/FCb3dEx2A/vfrK
K61/H7XSkB1c21TdiuuM7lFSXGyywtuz0K9ysrNNx6KOhcNPWVLXcrG/JcpN
qqVN9aJ65elbNq+X5xc+Y3Up8CdiqyaffO23X1t+GHnG+MsryoskO2unrPzi
U8tJnHfz3CT/wF89feoUefrJx2XV5yus5xv+Q5cfoL9Nzy39upAf1AugbxE8
PdTaZLaDdWuHfRQeI6tWrrT1+96779p63p/2X/BGbMuaNWtMLr704ov2N3+j
PUnMfoV/4IzTTpPNmzfpnk5eYJX5PTifTPahWKfzO4GRWtULfB0f35PA98m0
eCHFDpjw8anYZ6hVjV7maxR6/Yojdlx4h7dhgQM4x+Cglw0DY0wvU5x8QI7g
DwEn2Hi5TR45/g8G98n58tch1S6Rn0dNrxrTrS447zzjYfgJicEoLCy0Ojcc
C8y+66b3hyA/4B9gomDXLsnNzTG5YjFapSXJmF+Pj7WqSz264GG5ROUBtRum
XjdFXnv1ZdmZttVsT/hfa6pKpagw1+pR83hJUZ4UFuQaTpoa6QFcrd+3VHKz
0+SrlZ9a/7c5s2aaDgb/pybRrOtnyHP6+Herv9T359teR6wJ5xr9amig12pP
UFcUXLA/cE68vkPcIXoQ+hD+jP1t/4WPZGRkmN3tzjvuSC7I35hty/DB2mAv
In4N3wf6FXtOpe594SCWnZge4+OKB2xYxBf2BjG7yT6yAfcg723Qejh1WG8B
q3eruHCx262uNo/0DMdXqMwgt9xquhGLaLIDbj1adozGxzCfSB34N6grzzVH
v37h+eetPwy34SHYbDiyL9A3nNw6ahiRp71Z5Q71t9esXm37JlggL5XJdWWN
IE9S7bx+IjvycnMNM83NTbpPtpj8cNPpVuhHM6ZPVR3jHcnNyZQWzqXqWDXV
KmtU56LnWk72TrPdUocO/7fVf0vbZvG41IAoKswx/JSV5EtNZYn16qGGL30M
t25aLx8seUeefHyB+QepX8K1PVcxP3vm9fLi8wtl5eefmp4Ft3n4oYdGnDsw
4jkJvxUeRMzR/rb/cm6J2eLzkGPEunE9GL8h25bhY6fyMfbMpsZ6q8FAPEmV
7nlwDmKuujqGe9v42m91ej3pEZ60W5Er2utkR5flPrVYX4L+oKaN5+V9QU31
7iAOz+fKIj9cnOuAcRL8HT8sO0bjYxgnyA2nZ7n7Tzz2mOUDhsPOtpkqP/AP
Tp0yRRY+84zZPMMdHXb9kB0cfb429+Hyqfw8lXsgP5joc+hZy5d9IvPn3Wy2
423btlgsJbUcmC3UQWquN34ODyktKVTZUGz4KFI5QY0FZEaFrveykgJ9vEBy
stKttwHT6qQoNorBiXKQQsVS4a5slSc7rfZvmfIb6gvV16ouqK+lp+LSD96T
e+6+0zg/dnx41nHHHC3nqE6JHoUtoqOjY7cFAj9j/V5x+eWWe8g52J+2LfgP
9jJs6nwvcrcYvxGMGD7YO7FPk2fu6/dUqH5g2MDPOwofTGQINRG97QrfIJNc
QqtBQqxdSi+O4ZgSp1tRBxe/R3+/q6PebbV4XHyJj7PyMeo/LjtG4gM/n7NP
Dftr77vnHvNTITs83+DIWr5G9y78gdiv8Psia7wuwZFruGXLFl23GSm2rHLz
rbe2tug1bbQ+TtSzIBaetYdMul85zFdfrjJ7lpch2LCQI+CiHJuW6lzMosJ8
qz+CvAAnu/KyrPYD+CguzLV61NwvUBzARaiLCkZK6Hmokz5wmenbFSvZJnvS
07ZYLcqCvEyrA8/nkktI7R/mpg3f677xqO0bxJmdqWuT83O5roN7777buCj1
e/2ejg4ER0XPxO+3v+SI/xw4yf333Wf5KvgUGb8B25bhA10bXxh+aOzj1GSv
LC+xWn0OH23J+FAfd0U+DrEkFpOosgC7ifWCwhdoPvLhfI+kXTeIubKJDxh/
VlDvkFg+8DEcSzK4B4z8EDYcPrBVef84w2MEGz/1tRkeH3AG9Cp86OwT5vNV
PuLxwfVjT2PdEHeHnoGuhW6VlrbDYq1m6ueix8Apnnj8cYtp5Hlihhsa6gwb
Lsa31ORHRYAJZqmuf/q/FxXm6TkvTs4CdKlCJ0NY7wW7cuy1pSobShQX1idH
5QXYoMdhVsZ2ex34QAYhS6hjwv1dqp9lBn2nqCNHL1yw+bVi96ILLrD9m9/L
HrBkyRKLwb1SzxM4p+4JvkN6e9JTmrxK4kbYJ/YXH0mNbcSnT2zjd99+a9fp
V5Yjhg/2Tfz/xIFTjx18oGNhB7SalqPwARYsX033f+orN6nui82E/rLkS1tM
IrFWe8KH5V0ngvrRfYaJSMT5y6nPNlxbYWAMjPwwPsCFiyVxw+tSxCZyRJci
xsyPUuUUkyZOtFgQ+CI2KzDD9fK+LdYC6//7desUH62GkdWrvzHdCY6LrLhx
7lyTI8RB4k93fg/Hz5uaGpL4sFxcw4XKiPwcm6zVKvLY4fDIFOXh4ACZwX3k
ABzbsKGcpKQ4z2ozFhZkW/9nYq/oRYKuVZCHrpVjWEGe2H2d9FQHH9Qg3b5t
s+Xcrv7mK7N/IS/Rm/jt/Db8FD4Hd+OGDeZnx/6PT4j4gttuvfVH+4v8VE7C
38Z3BUbIcWf8irGNho8HH3jA9ozOzrBy9SrLpyXuqtFyalsNH7FU+RHUFkd2
UKfM+nkoX+8O6pMk8THwA/gYCmqoJ2O/B6xGFbVAfR5gqt9j2A+yZ17OwMcB
PjinyGfkBBM7lefm2HFvmTfPnCAFqi8Qy3ql6g7YKcrLyoxjgwv4I5yUGs9m
21IcoENh/yQua+vWLcZzqHnzxOOPSXs4ZFyEeEb8lPjP09PTlIu/G/CVEuUO
BVZzi5zDstIi5eXlhhf4h8cHMgOMoGMhQ6gZir23pHgYH0z0q5zstKDubrrD
h8oLuAi3qYdPr+gC1dvof7B926agF8I2q0FKPBj48Pm2fk9gnfp61ZwDdE7W
LXLG2/P2pRbjvtq2WvTvIcs45wseeSTl2v7iti3DB7olvT3oB0Wtkqb62mTv
cmyy0ZTcNC8/6HGEndfXHm9pqDKsDAS1334UH8RjBfgYCuKuOoO4RGJJqDmC
D5C4K+7j7xjO6/DD+cHh4+jJ6FXhcLtdS7DAjMViSXsV/BPMdCnnxKZz/4IF
+huq5O9//aucqfhYrut+244dxjNW6h72oPKHK1WvoocT6+gM1TfIISVXFXsL
cX0PPfig6l6Xmh10w4b1ZveFp+MPwZf0zjuLLW4DOZKTk2V1HchbqUTXUjyg
JyE/HD6KkvjgiJ5EzwI4R3kKPpAjcHNkB1jAjoWMASeFAT6QH2DDZIjiA70K
3u97Tu1M22491ZGL2Oz2lE/odR+PGfaNfa0x91PkCHoutkP8DuQ4ez3rF8aI
4QP73bPPPG16ALWtWpsbLLYEGWI2rCQ+2sw3a35CYttb6l3vmy6nZ9G3GB0L
O++QxZOMwkdQs2M0Pnw9xLByHWrjehnhfYDIE/Jm8QW6/D+HBXx+2Fe4jf6E
nAAPvr9L6uD8eh0LudGk+sPN/zxbWk8+Xb49/Ei56eBD5cK/HyhnHnucnKw4
+K9DDpY/HXywPKh8Yp7qE8Qo3qD6xY2qm81VDj5N9TR0NXjb5Guvsbh48lbx
vVOrgP3my1Ur5e4775SbFUc1yOXaKj3HdeYjpN4FaxRZxl5OnnhZSWESH/By
4t6o24gs8PKD+lpw8ZxAnypVOQJ/Z9KXBx1qV15mkouAGXBCf2jsxDlBPx16
e9K3EOyiQ9WpnNgbPrE//SA/hhGLl1SZftWVV5oO6+2PvyAnsYWE7owfk9oD
6FYh5R1gw9UrcTLE18qw+rqWex6yfFrLW8NXbj0FIxYPBEaIL0nWzzTZMRY+
4kn7LjUGfe1ob9clx8PlkMfMz+dkQ5vp+GAj1YbrB3IkdY9J7Q3ne34nn7tx
voT/139L4vBJ0n/YkRLRWX7w4bLhwEPlg8MmyCNHTJTrjpggpx52mEw6+mg5
UrnpMWecIWdfcrFcqvwVP/t8cj2mTpVZytHhNdjC4LbE63K8fsZ0mzfOnWNx
7+8veVf16+UmOz5e+oHrRdPSIHW1leYbhIdgn+X43jtvyVdffmG2Jx4rVQ6y
Sx/PevklKXr4ISlvqEzadwsCnQr5QEww+HD3061uNfwjtd8UtUc3rl9nf3/t
2rWmR/0S635fppdXcCH2cHwxxLkxfiHbluFj7pw5VsOoqbHBeqaFk3kfrUHc
TnVQY7fN/OBgozvo0Uy9GeryUzN2IIgtIb+N+JJYpNX1urQ6NsN1nkbw8yCX
jt4b+M67utqDem6dSf0KLuL0KzfgGPgAkSVOj4ok8wGRJ+wvYGK0LB5UrNTp
nvTu22/LHOUfFaf9QyJ/PVhCE46WtiMmSeiwiYaRHp39h060GdPZoHPnwUfI
soMPk8dUzkzXefaEiTJp0iQ58uST5BiVNyedeYZceOGFMkUxM111sLmzZloM
Oz458EEMCT2GsJ9hSzfMzLnBevAseuM1WaNcGY4At64PsIJvefknHzldS+UD
fQdz9Xbh3XfL1v/vvyRd9b/SSnyXeSZTHFayA3+i+yzsWBvXrzU+bv4Ts++m
mz9l88b1ljtC/Jm3Yf3amNiTvMKHjw2Nnr7kzv9CGDF8zNe1go+5oaHe/II+
NtHjg/yaJusFVZv0oRMz2p/otDg45MhQgA8fuwseqL/Q2dGUrDuQio+k71z6
zS9I7wHq8JDvge98mG/4eHY3fR2eEet+cMDiS5AdcA/v4/DnkH7H2GYvu/RS
i68mF/udpUslvOY7CU86Ttr+628S/s+/So/ioOuQCdKqM6R4ATPthx8lXYqX
xKFHSp/OAb3drbNFZ/7Eo+XL406UF44/UW4640y5UDnKiYqTI085WSYcf5yc
pboTeehXKT+ZrXiYOWOa1b0m9xZ9bPq0qdY/gdhD+Mz106cpnmbIk8r133rz
dVu79BnEtss0H2K17qmXXykzDzlUHj3gQKm8YY7sAh/Uj1eZAac3eaN6WLr1
lNom27duSsGHYiMzzeTJ+u/Xyjln/9NqUvwW5UcqRnxPkg8++MBiw1YsX27X
92eObTR8YLuDf6BfVSmPpLdMR2i4Hy2xV9RpBwsuPtT1sscvSP1k6ovD0VPx
MdTnejGTF0qdzJjV68Du2u1m0DsQnQq7bsRq6bq4RO//GMvvMZzb5Gy58PPR
eOF8YaslrxMbLPGw2K+XffKJ8T4/evR1XfUN0vHNaul8/kVZe8gRUqtrPoE8
+Z9/lvY//VXa/3awtCte2pEvYEbxElJsdCJb9PHeQyYaZnonHS8dp58lZRdf
JuuvmyaLZ82WO6dNkyuUk5ys6/woxcwkxcyxxx4j5yiOrlKsTrnmapl9/QyT
MTMMGzOV0zj+f+st88zXDV7uuuM2eeG5Z2Xpxx/K+lWfS+YJp8jZuo9+OOlY
qfn7oVJw1TVSonKikJ49yt+Xf7LUYuXh7zu2bTZOgi8EfDhbcZ75QzaofkWN
4B/i57+l6WMbkXfEhr3w3HPJ6/0zYcTwcd8998qjCxZY7keJckRiE8NBfRh8
6OSAUGOJvCjyCnqCXvYJxQj9iK02O3lRHh+9QY+9/mHOQfwuGOkhV7QvarnX
TPCQCHQrVx+01+La9+Qzd7pV726YYGDD3bp1q1ykeg6+LfI61uq53I13+PM5
6pR+snKlHKvrruSLVdK/7FOJ3HmPdJ1/sYSRIypj2v/zL9L+33+X8EGHS1g5
ffuEADOKj5BiJfz3wyR6wCHSc+DhMnDksTJwxj8levVkqb/1dkl7ZIF8rFx/
wf33yRSVH2cph5mkfGbikUfKCYqZU084US4691zDDDLlvnvvtiOx7Rzp73HJ
hRfI1Ouny+yDDpHLJk6UhyccKYsnHSPfKEa2nXOe5G1cZ3L4njtvt9wr4qzB
B/IjU2VJXtD3ltrV1P3e8P06i+nYsWPHv1xP8ZfECL6XrKws4yP4Yvz4GWxb
hg/q6SFD8A9in0e/Ah/ERBOnaLGfgW0Xu5XVCDAe3uj6U1BvX58DFyPxEU2p
L5swfYs67cxE0E+WrxCLhYOv4mLbkSkDAz4HyvkIyX8ajQk4OzaiBY88LDt3
psknKh/Wq66QlZlptqzUwbkDP6P7uzSoXvHKiy/q93Y2r/eWLJGJqvc3+B4X
fSqfauuk99vvJPHMQolMniYdx5/s5Mr/+ovhJnzAoRJWeRJWudOu0zCjeGnT
ddv+lwOl678PlO6DjpCBE06VoSuukb677pXQy69IwYcfyqr335OFL74gc+64
Xf6pmDnq2GMth/Eo3R9PJ39dZc81KkfQvWYyVUebrXrVlIlHypVHTJCr9LVX
KMamHnSw3DLpaHn5pedNFj143z3Wbw37bnaG86WTb/LRh++bjgkPWbP6a4sr
wT/o/eE/ZLvd3/7Anzp9bCPfF58UOQno1Ha99q9tyxYF/lF8o3DistJiy8NE
hpiPMOgV5WPbXQ56rcXogg+rRR0NDetYo/AB36AuDfGK8XjYdKxBxQsxvTFq
vRObQh+1IO8cfBBrQm6tyxUfycGoCfLxRx+ZHRUfBrLiheefM93Uxwr54Xm6
x4TLIRyJj9zcXPOd81rP915SLnbiMcfo7wvZ/dGSe6gjLP2qv3W//a5E590m
4X+cI2F0MPQx5THtfzlIwsrnkTvhicdIu+psIdXL2lTutCpeQvq6zj8fIAmV
OwNnny9y8y0ir74ubZ9+KsXrvpO1366WFxa9LvPvu1cuvOJyOfroo2WiyrWj
FQfHnXySnHfoYXK5YuNanbN1ztR5neJl8sGHyFSVKdeRE6Lc/wqVOTfNnSML
HnpAnnhsgaz7brU8rLfpaYUNgJrfxPPjBySGhnrTs1TH4/5oWcJj7Nsj84xH
coRfEiM+thF9mbWLnwQbg7/u+xMfn65YYXaVcDgkNdWVFnvVFdTaRX6k+j+s
x4eua3I5iU9M9gBTrPQHvT7Ah/S7Oj7UPLEeaoNwj4Sz+So+4OfEJobD9NBs
DXqfuXo+HOHqfuBbo2YTHBYugT2cPDd83amDPWQ0JlIHvpHRNTTwQWFb9/Yu
f27Jj8In2A3meK5f5RExj0MjZTivjqvcHdD10bNylcQXPCYRlREdykfaVW4g
Y8J//ru0qywJKx6QMeEjj7FjSGVOm+pjrYoX+E6Hvj5xrGJVdbKhRx8XWbVK
erIzpVQ5w1rVk95Y9IbcccREufSww+Xkw48wHfxwncerDDlD5/kTJsp8ffw6
lSOzzjxTpir/v5IeP6prURsBOwD8hhj7e+++Sx556EGLSaSmLHr98wsX2jrA
Buhi+CuT9iP85uRgc77GkjGs1Z/bb7gnecZ3x0+Lv514bMZ+sm0ZPrCXEeds
fXCaG5SjlwX9m2uD2hfD8bveR4iOBUaQG+CBWCyzYwU99ZApxPEO265ibgb2
K+LeiTGJkr9uvccjgfxwA45eUlJkspP9fYZyXfqo1tXVjvgBnqODB9b/Dw2P
H4bHB7YtOHwqprxuhs4JV/bYSeavc0TX08/qwa4c1H1Pfif919/UID1btkji
1dek4/rZ0qXcvUPlh8mXgPcjc7yMsYkNQF/Tpjhp+5//La2KmbBymYTKp+75
txr2+hRXEX1ftWJr26ET5P3DJsiDhx0hkxUXpypWjlacTNTjUQcfLGeee45c
cvmlcrXKoFmql828fobpaUxkyGWqz/3Xf/6nnePbVY/nPNx1xx2yevVqi91F
j2Hd45fbuHFjsic6uPH+dJ8Pw+v9c2PJlp9LvqTGNr7xxhtymP5ucncY+8G2
ZQuyUv8OfLaosEBaW5osT5n4durC+brUI/ERMr+H5Xq0N5k/EBni+uR12GPE
n/he346DuIkcsT5r1By1uv+9wXrtVZ64xfpfrlr1mXzxxaeyYsUnFh+O3SB1
UN9q2G7l4rBYv14H3dPgeb+vjIWPVNnisQYufZ2PERgJtC5Xt5dYsj6Vnd02
fe+25N/V+72d7dKRtkO6FOPxe++XrgsvdXxF9awk7z8Q3n+Uw0ogY5A5IZUx
oT/9TUKKrTbFRbvOiM7uwEczoDOus1FnhmJmhWLmycMnyPXK489R3ByjPHbC
hAly3KRJctKJJ5jdGDmCb/DAAw6wfeAS3QeINcHHSRw7sc48jhxdvmyZ1Q5E
brP+8Wmj1zB9/obPz+ax1HxcjtjGfih+ZX9gx8c20q+H2MbFb72Vcs1+MkZs
cSJPiTPYsX2b5Q82qtwoVx7iehk4/0cSH5G2oO9XrfkH0aligQ8dfQv+To1R
6Y+O5OhBvf7UliPkoa9Z86Xcc9ed9veZ995zt+XVdQU1fhjUvfK1S3pt/e2u
X7Lu4/HEbo+nDh+DwvDnDH1htPyQZL0sMR/9u++8bbmB7nwPBLzI+WH4Xvj5
R+b8Duge0KuyhR5pnZbrHUtEyB4e/jLokTXV0vvddxJ/9jmJXDddOpS/hxUL
hhfj/Yckeb9hBuxwP8CI6WfB5H5ngJO+ADM9+vrWAw6VwsuuUK7xhTxJT5LZ
s6y2/EmKGWJxic30OYbomeTBEE9BfVXi9tkbWPvsE0yef+KJJ+RN1bWwh2BH
wpbO+8mxQtfxNV/Y18EOvqd33nlnt7wRj539VSfbYhtbWkwfIo8EnSt5un+a
bStZnwE9gh4w6P1NqlvhJ6QuA7V9sPFafYZOxz+sxo/KD8fN22VQOQi6FTWq
8ZGADWy9/d0dQSxvJMj5EGlXnrLyixXGG+ES6PgLHnlI0tK2BTar5C8yOy+P
OfuV61/g6yYScwUfxy/o8qb7drNZpQ7XXzBu7wFL+Nqtvqjyc/DBe7nv/I+D
KTkk7vx8//33pmMwXO6Vszfj6wcr9PTk+/naKsSLYWPge3cnqINHDqX+Pnr5
EJus+Ejd1UwnC7VK5+ZNknjnXYnccpt0Knc3LKjsaP+vA5LY2NMcjRludyhG
4qrLJabOkBj6QE9cOloapUI5JniA29KXgGuB3eygv//dcIONC/ky+dprTZYg
V4iz4LX4NnmcehLkVhH7bb0TlL8sU1mDPyXX8ozLrR4cOSbEZxAf6vUyHzvC
OSV+eH/lk/ieJPAlbNd8d68z/ATenqzvgw+dWGJ68JFnSw6I1Yarc7novu8K
+OgI8qIsdzDeYf2jeIwYE3oZtTTS29Tr5G4tURuIXuJwiUsuulCeevJRSdux
SaymeXL0JOs4u5gTn1M4HNPualAPJH3mriaDq7WLDsptZiQSTcbw+jherg/X
CznCa8BIZqbrbwAemOhLTOK8fAwkcV+8Fv2WegYMMEA+gPP3u9qOyDbX1zC1
v9uA1fTqtj4MKmfQvcAGr1NMDfXq76Xml+Imob812h/0l+EMqMzpKSmUxJdf
SuTue5xN7EcwMiZu8GnCe846RxqyMiSs3K6lvsZyn+rr6oLfE7W1Bfcg/56+
WeCD+rnU+8FnTa4hPJW9lHxYXoOcIe+PI/qXxWtabIB7/OWXXrK4mg/ef9/6
qPu8AeQG14KeC/w9n3eWqm+hy+2J83vesSeMIMOYxMORH8za+AkYSeKDvC1i
t6lr0NhQZ3VL4Oj4CF0NpSbzo1s/L8WG2XZVt8Jf6HMI/Von/iQ7fat89P47
krFzi3zz1ef6GWWyYvlSxV2BJC2m8HbDRMzqizKHUuJ5nR2rQ4Z96YPJtef2
7L4gljdmMYvt7aFkPBa+Ec6/j+8FD/g/eIy17mRPn9XNJXeQ511994TFdbkY
+UhQ79fljnC9sJG88srLJkOIVyNH0MmyWKD79clwfpfriUjNkHisaxgfAwE+
gjnY32N9ebGp9yFrdP3290Rdr+khp5V1p203e1iqjrVPc8IkCf/1YGk99iSJ
5+fKpqx0OV11otRYnNGDtYF/iFpJ5Jhajq3KDPxy4IX6POQUohdfqDKC+GXk
EfoZ+CHmGZwgY5g8x2fgb6MGFnGR6A/ffvutne963fd93j94efnFF01Hwvac
mvPu/TRNzc0/KEe4XnwOPOr4Y4+1x2zH3nvbVrK+KDmT/E56G4APehtY3w96
rITASKXl2g7XHmtyfSsSzg5LTCI5ntQMpzbTKSedKNOUA675+gspK84zTu5G
v3H0eCxk9ciT8SY2e6w3rZMfw75CZ/PtC/SrTtP5WbOsS3I/uI6s6bHypQyG
Q4PJGF7e5+qadNt5oubh2bpP+npAvIbneR348zqWj48kNxA9ZNVK17eV3p7Y
C8AGGEGu8P3Qu6iXOhTghZgyMDA0ChtDwWPdCWzhYbtPPTAmOllvrEO69HPa
H3/CYsTM3rUvuABPvCfAVej/+ZP06/33VVearLoHw3Mvb9/2NvI9DexZ6E/w
9ieVixBbC79HJwMz7CHk4bL2wQgTPYc8MnICsJfBZbAtw23uuftukyH0RMC/
i0znb/A+YoTY/1LzncEGtfiwN+8JH57TMJEdCxe6vtdg3WN/b/Dh9452xS8c
i/rUzU2NVkcMjBDfTh469UXBCDlS6EpD/Qnrub118/fy0AP3WY8B3n/LvJvk
q1WfSUMNvgm378M/Yl0tFs870O96HIMP6sc5XPj+fB4XbtLvg5wp+mu6WN5o
sB5Tayp6O1J0hD1rpJ3J+wQHkjYuz/Gp8XaJ2XAHRuSsozMNf4bvqeD4TX5e
ru2fvj6j4+epuY39+tsShhHsDNSkpK5Yfy/+nz6TIR4byA5u83xvNzYMbGHd
+v6Y1TzqaG+WuN6PTJ8p7X/++4/LD3wsHhPcx478J8XVXw6U9uNPltDsuSIr
PpP7r75GnnrmmR9cKz4Ox2Pmx9ZUq+7VcHRiCKlVijxBnwYv+GrQz9Bl0beo
YwF+iIsDM9OV15APQK47j9n7FUfE7OKfoWaDr5WBLEf+wC885/fTYwKMef3L
xzZiX+O60ePa/+4fsW2N6G+A7MRW4/HRHmq2WiboWBHri9okTfVVkpO5Q26b
P89qkVmf1xtmyReffmIyxQ/6HsSpy26+QpUdA1GLwaLXQXeCvhxB7Lthwh97
Tb+CcxDnzkTHSO0LNVq394/7/gU/NNGJfB1FjyX0KWy8zkbcL6l22+H7ft0P
BFgQ2b5tqxx84IGSvjMtONcuTt/190nRsYK+idgF6acSjXToeYgZLjwP6UlE
rSY39+mpCS46iVmgJ5DK0j693XHS6RI+8DC3/sfChJcRBylHwVYMJg6ZIB0X
XCIdCxZI55pvpKm0ULqU6/DNLta1+FNrIOyLrEGfZW2TU07tCvQt9BQwg235
+OOOs331UpUjPDc9sJExTUdT3Fhss8of4umIE8SGC7ehzwr6GDwDTu4n2AB7
YBVZA058bOO6detkgsr/hc8+m/wtP4CREf1x4Ofzb77ZegWgYxGHRT9n4q/o
I9Gb6JK0rRtU5i2Qh+6/V7brbevTEuja+NKtXrXyD/hIZ5AXYrG8QawJtl7w
0dpSa31ZBwddnzViTugv2EWcV7xzuKdlwEX8dDUVR+IDzLj+zbvXavDx8H56
u+3u+etDKfJHTFdy8mL3GnUeI/QJRWYXFe4Sdx5drpfhI3Xqe9C1uuMRJ1dU
nnR1thtWwA56VTxK7byw9T6h1iqc3jiI4jKRmS5h738fU0Yconj4m8mI0DEn
SHjGTOlavFgiOZmuBo2ey079rEZyd/RvlpeVyulHHy2hQB8f2k9xfaNxs6d1
x57EHg8+6fOG3oVcOS6IPWPSLxheDefHdkbNcI8fbGfY0sDMDfocfAZ/B/HZ
+Cg5YlsgHgZbgLc3w/+RN9R0Qv9DL/RjDxgf0V9ts3IQ4tWqVcemhmJ70OOA
eu5wkLjuZ9UVJbJl0/eKlYBP6Hp1cSdtrpYivaSsVpzDSkzlhfeFGEaILaEX
UrTNasXRt7hVMdaux27rdeF4h8cGXMTxEY+P4bhFLzvQt4b73wwG/QsGUnSm
Ycz4PiCpGHJ5iL7ns3v9MD7GqlFHXWtXS406cFxP+kbZ6bC+fynYGHRHdKdY
hFgCx9npGwdnb7KcggrDCzrVQD+xBQm73af7Ed8g9v4S5w858tgRMgJfvNm0
zr1AOh58SFo/XyEdlaXSgs9KPyfaHbE4oS7si62Nph/H9XsvXbFcrlVerQvI
eWR+xtoge4sZnkMWYBtmrcOp0WfIEeP84s/gNuueGDFwAjaIwyOPEx2N2Bj0
NOxqU5W74Hf58ssvzR+CDOPz4ey1gQ2AmBvq3nlf8BhydIR+xevQFzes/978
6PhBsKmQj06Mu/WvJeZEZQm+w82Kk6ryYt3nIoaNEX1ylLcTr0gcY3/gLxTz
g8RdDdKOJuPnyJDe3ojFvRPH62IWu4Jail5P6Q1w0Zc8puID3wP+BtY3c3fu
MSwrwIf37zGIYeGcuvcOBI8PBXUhHG7G0udc7ypnw1705utyzKSjdLk12ntH
YCTAB/qUyYteZ8sCDxzD9P5ReYF+RU+gXupTKDcHH70BPiJ33CXtyquNfzBV
RnQoH4noOkrk5+j1qZeWqOqjvRGzibfr9Wquq5JYEPvAxM5CTZSI/t25qhu/
TP0W1eMHgnz8X3Lsi36GTgQXX/rhh2bLgtMQi4iPBk6Dfo+swReDPAE32M/A
CLZj7M08xnNwGmINkSfgpLGpyXgQdoK6wM49CiNJZ7b/jsiyRx5+WHWgWOAD
aTY9i1gsrgP1GvCRk09IXYG66gqLs4p0NFt9al9P0WSIxS6GDSOGD/Olx42n
hNrqza7ruPkwP+cx8AFWqIWVYI30xQ0XxGf5GF/f85x1jV3L9TcftgOPPYeC
Pgf9SXzk5+eaPowMGn580Hx7e8IH+pyLn+wPXuMw8sbrr7najTyGnKB2V3+3
yY644ok9J6bvM1+Ivgadi/Uq1msxYba6MDk3kXbFkcoPfawn1iGdZ51ruVeR
hx6W+OpvJKpyIKznhZ2jXfejuppyiek1iFsMXJvZ4V1PbocNYiBCLQ1WA4LY
ulN1DywKdKvfSj3ofbEFYKcn7oF6ftjPWPtwdWQM/hq4DfFS2MbwfyBnmNig
V65cmaxJDy/B/gvukFHEAjBS7L+79T//ctUqy7nE94Xsr62plA6VIe2tTVb7
B45OD6ke7K7Y51WvJTe9TfkE9RRT6/EiN9Cr8K072RI23zv2L3oTmv9jaDjn
dhgnPTaHhhJWtwHbKH4Q6o5ydD1zPB8esjXai21oBFcYGx/wFFcvyJ0DalGh
5w7jw+lY+PvGxsdg0Fvd15FwuhIjJzvTaloxkA3RLv2+xMWobAMLyIyhpI0X
f4ezWYEN4xucT/291lsu1CwJlQV9ejuRkyU91Ji0s6N8RLGDXYt8tXrFhuvF
0h70Pnc90MGDxc91tlkeKDUZ0QM+Xf6J5QTIb7OfwG5jb/UzfFfoTHAafJLI
EHJDsJnBEfF/IHPQ3eDvvu4Dtb2od4M9jLgt1j8jwENv6vdggE167u1M22HX
FvsVtWiQIdT+wd5LzAnXIBJ2MSdWryEWMj7e3lJnvMP6oBNfEuQUUl/c4nsH
XGxvf1CfNzWmdxgjo+29jnu43NuIrU32WvZwYrR8rBZ8Ydi+lVpHzt+WFLng
9oOCgjzrUen6lA/zC/DmXjfSfsXR2ZkdRln3icD+hBwDA8iSRNzpe2DByxLW
fR8+Efwd9MPS1zpbbjyYMZv8TvoFhdqcvOn39Yn1N4OTLj3nrgdVlcs3iDps
eHwQC+T74mFXQeaDj5jqdzfOmW2+hpQ18Lsbe6ufmX+zocFqzYELai3BOU5T
fQr7FjwfnQvfJ779L774wuxp7y9Z4v/OiEJR/u/QJ+6Rhx7Sa9Vtdl54CNjg
nKNPcb7j1BkhHivIK3QYabe43XCbq6tIzR9nx2qynrbIf2rEUffdxWSl1P1J
xchQKj68POm1fBGXd8h17TNdizVKf1uHFVcny09XL8vFfrB22Se87w4Z4OKv
soL+zgnz8VFvC/niY6h4H5gCA2CQ2aayFC4BBtCVqDWPj5yYxD7l+uS2klPO
6O/rCWy5fQ5D3VHn78BXHsiMVGwY7+gJbusR/Rb9yNt920Pky/hemy0WqxAL
8nPABXjoNJ9us/VOACNtqhcTD4F+hd0G3Tv1ev8Rxr5wGmQG/d2oX0o8P7Fj
xJ8hVzn+3//jf8hjCxbsER/0xCA2BztvW6vjHz4nhFisGr2NPE+tqZgI9jEw
0hPghLh35EaP9bJNqPxods91thh3l2RdrL3HCPbf4RgUZ+slV2S4l05/smav
65HeY1hw678n8Nl1BPd7JTs7Q84952xb/0ywACaGcdRjfkpwmMzdivj8+P7h
OeRkxZDKjP6+Xrnw/POs3yYDmy7POd+H/g30xa7wmLKjN8AHPcz7Aq7e1kos
ea31o4OPoWfW11UopwmZbhs1jtGarAVrUx+vq60w3sh1g5+/8dortmemXus/
9Ah0yMG94DTEIZFnDD95SjkNsZaj8eE+0uEQe/SK5cuMpyNDiHmvUy6CblVb
VW49CE2mBzIkEciQRIAPuEZ7W4PpVMS+kxsCf+fYSR3roH71CIwkuUgqTlIx
0mvyA13D4cDZsob9JX7Nev1qZI1r5AL7P9wKPzz4yMpKt9+KrHFyJm54AhtO
Z+t1/CLwY7DfJ+urBDaqoSDmkLiqQWxaqqfFY1HrmUZeK8P8Hoo5bFX4/oxr
7AEbzvcRsz7p1JTk9fARJr+1uQlbSU0ynzNu1yHketcZNtosBoi4OWqMc92Q
/dhGR+nX/5ZjbzmNpCZjBMOfN2QPccnEK9IH3XMQzjX4gIcgx33OVKoM8XGL
2LSsL4jigvoNyI9OkykVTl6k4mM3jKTgI2Vi96UW0DAvGbA9FR+J73fr+Tw6
l5+sd3Qt1jx9HJAfxFnl5GSaftVjciNu8gOcwGk6scHGI0HMl/s8+i7BMXj/
QKA3OX4xHDcyYLaCQV3PrdaL9tWXXY899H/WK7FW6GOpssNsujrNT6LfnRpL
zpYVVpxg8+oyvQp7Cf2b6Z/tZbfXr3wvI/q0oVPhsyJPAR/hp7rXoRMQX/Yb
7fX3q4496Gdjyg8mMS7EaZK/h7+Xuu7wRfyF1PYj7h0eMtyXMKhdjdxQ2YKP
hPpx3VEnS7D1MpEtxGaFiY9PhF38yYgai2PpWg4brh8C8ScRm6wnsEBNG8dB
Ooy7E5My7CfxOpDn3v1B3pWPv8o3XWhoKPW1g7a/w729zmZyYqjPYl56bW+P
mL4Ep+CIjaqvJxHw8T6LLYTb19ZUy5FHHGF1QxjI4UHj9TH7Gw4nMfOZIyfA
BNyEnr5gAiwZPnoipls2qVwAA+FQY3JfsnOv3wvOQfwPsdbIkSbVyWqVL2IH
wNfmY/P/nWXHPo7dCznL8Pl75qmnzH5MXyn86RaT1dYc5E3VqyypsLpxiYCL
JKxvTqNdO2RIT8zZdLsDfQtbFv6QaGez8XcmfTyt3xrPB/7DYVy4Wg4+Dp58
dWqd4B+gTwnYQCdxPUNS41D6JTUmJXW6+lq+9yf1SzKNk/naEM5W22/7OjLF
Y8N8k7quY9HAPhDIDPBA3GE3eVGRDpMtvMY4RI/zyxYXFlhdzI+WfuDOr9lz
E7b2iScBE8iLWMBPeukV1B2x58EI9Vw6FQNtuu/Q07GV3l0tzoYYC2y72HOb
wU7Y+UDASrXyRD577bdr5ATd68h/GZcd+zTGxIc/h/gusR/T68LFvNcbPrBn
YVsndgFdC18h2IAfwk96Akx0J33qYXsMbPTqY9TrxS8CPly93k57bTTSaliB
wyT9I+L63Lp+bG3JmnLxWIfpJCYPYtTC7t19psQCu8fcOo9ZX3Xn26hTHf2p
J58wXCT93gE+ui2Gxvs3BgJuHUniwk/vI+c4gG8Em7PipKuj3c4Rg55N2NeX
qhxB1sAlOsJOf+oxLh63iX41AhvdEcM/Nay79RwkdM9BflCfJxHYrlotr7k+
6IfnaybXmO0K2UG+EnGwjHHZsU9jTHww/Hkk9ov6/eSF0BcdfOBncrVNnF6F
DKmrLrf6vMgRdCpvy0piJOFmd1T1ZOXr4IPHyT2kFpDNAVe7gZonxL+Hlauw
Z5KTCz68fuXiTBKGFepbo4uMiY8xMdNv+/vgwDB/sTHUNwofzgdh+Ah8GPj7
LEZ9cPccDstxslj1nmSOIPwbOxU+JPDy5huvybyb5pqN1nFyxz+cvSrmOJD+
TYeNiGEDPg42wILhIehPxDlvV1lNzj8+2xjxztivOtvMXgU/5FrRI2pcdvzk
sUd8+HPJecVn8tWXX5oujY5FvYEG8z21BhzdYaSqvMT0K+53W53eYXuvjzvp
tponjcZFhoJe6di0kjGMqk/1KyehdkNMn0OfYMZNvgSPWXxW3HoXUsO323wi
qfrVD+Gjz3yL/X0+5rE/+L29Zm/1coa9vCcxLCtY+y4GvW/UdPiAR5ivEF7S
5eLTmcgHaibhG+Tc0SsK3jGk8gsbLrgYCxvGO3SCDTDB/hC389lhcqJOORx7
kvHyruEew22mZ9Va/UtkCLnML734kv3Gcdmxz2OP+GD48/n24sVy3jnnSjW9
g4L61fWKB1+jF3nOdcEHhd2K+Cw4YiIaTupavk86eOgMaslZ/An1qzta7PFB
u91stnswkqz5Puj6Tg30Ra2HOniIE5+l6wYfWLi92R5znN3FawwNdifxMHIO
2NrrC/pHo5vRN5bXsma9/HCcIuDx1Ofpjhs/ACe25wdrOR7EFnp9yuxN/397
5/5cZ1X18X/JcbzNeIXaOkKRIuIr/qADOoyCvuOrpagM6LwI4gWsAo7CeEPl
IvPyIkVKdUotBYHSAqU2TdI0ycm53685Sc5JzuP+fNfeT05CRmmbtinz7Jk9
J+fk5Mm5rO9et+9ayz3G78Ebthx+CboJnVHzcSnOF/IbwuEa2CCGzaw5PgvZ
VW6DE3w7Yrd8xsymh2cSYleWM08Z96RSjP7w4G/lW8EnT3THaa1/i48Q8yLP
TD7+gQfuV86QGTrERjjbGlXr886Zhe1rcV/jBmEXkzsPNhbcd/r1qtfivHEZ
xe11dhX+Jhv5V0+g/pvney4xkwo7jHiWt7XENXI2GLgAIzpnsUPay3u2XRcO
tJ1PH2KnxDrp0wwflPoL5cN9ThwdQE0TvELsMXLm6APwoOtpN8Szwi/BliJm
taQ8elcbOef/BD4u/oTVd9Sj3U8/KRnuqg63syY26Mm64HQleqPuPkc+H/Lj
xAY5fxrufOJcwrYK+oLvA38QG2vTRR/RrERWojtOa/1bfLDi2pADB8SLZLZr
NjOj+XnWp9e4PvwcOA7wF7klrmU939PiZhHPIpcO/0Rc367xT8i1ozfU9xre
b2/tGbjLM6Nn473o8EJOX3N2pDPm/c9uu/N7sNhVLfBSvOccXhuar4jMMCcG
fiK4wJ5C1jnX0QHKcVPv2u9Krpe83IMD23PKBwoT/jHDgtWPUz+DXojx4X5W
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
nesk+4LdxX8BDIdkxQ==
              "], {{0, 0}, {48., 35.04}}, {0, 255}, 
              ImageResolution -> {300, 300}, ColorFunction -> RGBColor], {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], ImageSize -> {46.0859375, Automatic}, 
              PlotRange -> {{0, 48.}, {0, 35.04}}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimension: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["8", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Possible Outcomes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["24", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Invertible: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Physical Inversion: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Total Counts: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["12000", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Maximum Likelihood Acceptance Ratio: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["0.9090909090909091`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox[
                 "\"Sampler Acceptance Ratio: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.5016722408026756`", "SummaryItem"]}], ""}, {
               RowBox[{
                 TagBox["\"Sampler stepSize: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.0009915195883103893`", "SummaryItem"]}], ""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Wolfram`QuantumFramework`QuantumStateEstimation[<|
   "Invertible" -> False, "PhysicalInversion" -> True, "InversionState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {8, 8}, 0, {
       1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
         6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
         3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
         8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
         5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
         2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
        0.11150000000000004`, 
         Complex[-0.022000000000000013`, -0.0028125000000000094`], 
         Complex[-0.0030624999999999576`, -0.0041250000000000115`], \
-0.0010000000000000135`, Complex[
         0.007187500000000048, 0.014500000000000002`], -0.002500000000000004, 
         0.0008749999999999613, 
         Complex[-0.0009999999999999879, 0.0010625000000000137`], 
         Complex[-0.021999999999999985`, 0.0028125000000000094`], 
         0.09650000000000003, 0.0001250000000000417, 
         Complex[-0.0030624999999999615`, -0.004125000000000006], \
-0.007125000000000008, Complex[0.007187500000000048, 0.014500000000000002`], 
         Complex[-0.0010000000000000152`, -0.0010624999999999999`], 
         0.0008749999999999613, 
         Complex[-0.0030624999999999476`, 0.004124999999999995], 
         0.00012500000000002234`, 0.085, 
         Complex[-0.022000000000000026`, -0.0028124999999999886`], \
-0.001624999999999991, 
         Complex[-0.0010000000000000152`, -0.0010624999999999999`], Complex[
         0.007187500000000048, 
          0.014500000000000002`], -0.002500000000000004, \
-0.0009999999999999714, 
         Complex[-0.0030624999999999732`, 0.004125000000000004], 
         Complex[-0.022, 0.0028125000000000094`], 0.1015, 
         Complex[-0.0009999999999999879, 
          0.0010625000000000137`], -0.001624999999999991, \
-0.007125000000000008, Complex[0.007187500000000048, 0.014500000000000002`], 
         Complex[0.00718750000000009, -0.014500000000000008`], \
-0.007125000000000003, -0.0016249999999999897`, 
         Complex[-0.0010000000000000152`, -0.0010624999999999999`], 
         0.15350000000000003`, 
         Complex[-0.022000000000000026`, -0.0028124999999999886`], 
         Complex[-0.0030624999999999615`, -0.004125000000000006], \
-0.0010000000000000135`, -0.002500000000000044, Complex[
         0.007187500000000024, -0.014499999999999985`], 
         Complex[-0.0009999999999999757, 
          0.0010625000000000077`], -0.001624999999999991, 
         Complex[-0.021999999999999992`, 0.0028124999999999886`], 
         0.15725000000000006`, 0.00012500000000003166`, 
         Complex[-0.0030624999999999615`, -0.004125000000000006], 
         0.0008749999999999976, 
         Complex[-0.0009999999999999924, 0.0010625000000000215`], Complex[
         0.007187500000000027, -0.014499999999999975`], -0.007125000000000019,
          Complex[-0.0030624999999999663`, 0.004125000000000008], 
         0.00012500000000003166`, 0.14350000000000004`, 
         Complex[-0.022, -0.0028124999999999817`], 
         Complex[-0.0010000000000000174`, -0.0010625000000000092`], 
         0.0008749999999999698, -0.002500000000000004, Complex[
         0.007187500000000037, -0.014499999999999989`], \
-0.0010000000000000135`, 
         Complex[-0.0030624999999999663`, 0.004125000000000008], 
         Complex[-0.021999999999999992`, 0.0028124999999999886`], 
         0.15125000000000005`}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 2} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 3} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodState" -> 
    Wolfram`QuantumFramework`QuantumState[
     SparseArray[
      Automatic, {8, 8}, 0, {
       1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
         6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
         3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
         8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
         5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
         2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
        0.11149999999999999`, 
         Complex[-0.021999999999999905`, -0.0028124999999999765`], 
         Complex[-0.0030624999999999338`, -0.004124999999999924], \
-0.0010000000000001726`, Complex[
         0.007187500000000045, 0.01450000000000003], -0.0024999999999999883`, 
         0.0008749999999999314, 
         Complex[-0.0009999999999999072, 0.001062499999999831], 
         Complex[-0.021999999999999915`, 0.0028124999999999765`], 
         0.09649999999999982, 0.00012499999999988302`, 
         Complex[-0.003062499999999928, -0.004124999999999813], \
-0.0071250000000000115`, Complex[0.007187500000000022, 0.01449999999999999], 
         Complex[-0.001000000000000079, -0.0010624999999997494`], 
         0.0008749999999998967, 
         Complex[-0.003062499999999934, 0.004124999999999924], 
         0.00012499999999987955`, 0.08499999999999995, 
         Complex[-0.021999999999999874`, -0.0028125000000000485`], \
-0.0016250000000000014`, 
         Complex[-0.0009999999999999217, -0.0010625000000000096`], Complex[
         0.007187500000000145, 
          0.014500000000000093`], -0.002499999999999958, \
-0.0010000000000001718`, Complex[-0.003062499999999928, 0.004124999999999816],
          Complex[-0.021999999999999867`, 0.0028125000000000493`], 
         0.10149999999999981`, 
         Complex[-0.0009999999999998118, 
          0.001062500000000137], -0.0016250000000000379`, \
-0.007125000000000089, Complex[0.007187499999999991, 0.014500000000000134`], 
         Complex[0.007187500000000045, -0.014500000000000023`], \
-0.007125000000000013, -0.001625000000000005, 
         Complex[-0.0009999999999998135, -0.0010625000000001365`], 
         0.1535000000000002, 
         Complex[-0.021999999999999933`, -0.002812499999999933], 
         Complex[-0.003062499999999895, -0.004124999999999844], \
-0.0010000000000000798`, -0.002499999999999989, Complex[
         0.007187500000000021, -0.014499999999999989`], 
         Complex[-0.0009999999999999224, 
          0.0010625000000000096`], -0.0016250000000000379`, 
         Complex[-0.021999999999999936`, 0.0028124999999999322`], 
         0.15724999999999983`, 0.00012499999999999404`, 
         Complex[-0.0030625000000000157`, -0.004125000000000031], 
         0.0008749999999999418, 
         Complex[-0.001000000000000079, 0.0010624999999997546`], Complex[
         0.007187500000000147, -0.014500000000000093`], -0.007125000000000084,
          Complex[-0.003062499999999897, 0.004124999999999844], 
         0.0001249999999999975, 0.14350000000000035`, 
         Complex[-0.021999999999999815`, -0.002812499999999901], 
         Complex[-0.0009999999999999072, -0.0010624999999998344`], 
         0.0008749999999998967, -0.0024999999999999606`, Complex[
         0.007187499999999982, -0.014500000000000133`], -0.001000000000000079,
          Complex[-0.003062500000000019, 0.004125000000000031], 
         Complex[-0.021999999999999815`, 0.0028124999999998997`], 
         0.15125000000000038`}}], 
      Wolfram`QuantumFramework`QuantumBasis[<|
       "Input" -> Wolfram`QuantumFramework`QuditBasis[<|{
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 1} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 2} -> 1, {
             
             Wolfram`QuantumFramework`QuditName[\[FormalCapitalI], "Dual" -> 
              False], 3} -> 1|>], "Output" -> 
        Wolfram`QuantumFramework`QuditBasis[<|{
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 1} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 2} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[0, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{1}}}, {1}}], {
             Wolfram`QuantumFramework`QuditName[1, "Dual" -> False], 3} -> 
           SparseArray[Automatic, {2}, 0, {1, {{0, 1}, {{2}}}, {1}}]|>], 
        "Picture" -> "Schr\[ODoubleDot]dinger", "Label" -> None, 
        "ParameterSpec" -> {}|>]], "MaximumLikelihoodAcceptanceRatio" -> 
    0.9090909090909091, 
    "MaximumLikelihoodConvergence" -> {0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
     0., 0.}, "MaximumLikelihoodConvergenceStepSize" -> {0.0078125, 
     0.007421875, 0.00705078125, 0.006698242187499999, 0.006363330078124999, 
     0.006045163574218749, 0.005742905395507811, 0.00545576012573242, 
     0.005182972119445799, 0.004923823513473508, 0.0046776323377998325`, 
     0.00444375072090984, 0.004221563184864348, 0.0040104850256211305`, 
     0.0038099607743400737`, 0.0036194627356230698`, 0.003438489598841916, 
     0.00326656511889982, 0.003103236862954829, 0.002948075019807087, 
     0.0028006712688167326`, 0.0026606377053758957`, 0.0025276058201071008`, 
     0.002401225529101746, 0.0022811642526466584`, 0.0021671060400143254`, 
     0.0020587507380136092`, 0.0019558132011129287`, 0.001858022541057282, 
     0.001765121414004418}, "BayesianAcceptanceRatio" -> 0.5016722408026756, 
    "BayesianSampler" -> 
    Wolfram`QuantumFramework`QuantumStateSampler[{{0.11093020422142097`, 
        Complex[-0.022166816674715942`, -0.0032811930772097438`], 
        Complex[-0.00310316770871557, -0.004082054796946625], 
        Complex[-0.001081003103995744, 0.00010794092176837425`], 
        Complex[0.007113860119897576, 0.014776954558083377`], 
        Complex[-0.0023244163646923954`, 0.00025761685054469415`], 
        Complex[0.001175880870973131, -0.0005093253485343452], 
        Complex[-0.0009454101242747509, 0.0011525039474365485`]}, {
        Complex[-0.02216681667471594, 0.003281193077209744], 
        0.09742800783792048, 
        Complex[0.00008178195774207484, 0.000026427432579297994`], 
        Complex[-0.0033324628560842057`, -0.004273553925193192], 
        Complex[-0.007237952566323582, 0.000028746798393234838`], 
        Complex[0.0077931469303134365`, 0.014382666041452653`], 
        Complex[-0.0012922590122132994`, -0.001470990849745394], 
        Complex[0.0014161604722926248`, -0.0002234289610429348]}, {
        Complex[-0.003103167708715571, 0.004082054796946625], 
        Complex[0.00008178195774207397, -0.00002642743257929561], 
        0.0851617092075104, 
        Complex[-0.02224654146446137, -0.0032373200650612105`], 
        Complex[-0.0014270837730113173`, -0.000322221009396894], 
        Complex[-0.0010568790893059415`, -0.0004199007706051656], 
        Complex[0.007032252717834964, 0.015105489697087287`], 
        Complex[-0.002742916816800404, -0.0010960826164974893`]}, {
        Complex[-0.0010810031039957448`, -0.00010794092176837772`], 
        Complex[-0.0033324628560842057`, 0.004273553925193189], 
        Complex[-0.02224654146446137, 0.0032373200650612096`], 
        0.10143225447315775`, 
        Complex[-0.0007599270185826672, 0.0009852849526972823], 
        Complex[-0.0015421206098120508`, -0.00040626322594490647`], 
        Complex[-0.007061349753770958, -0.00006456786363889485], 
        Complex[0.007048775718814277, 0.014186013943974049`]}, {
        Complex[0.007113860119897572, -0.014776954558083373`], 
        Complex[-0.007237952566323584, -0.000028746798393234838`], 
        Complex[-0.0014270837730113173`, 0.00032222100939689486`], 
        Complex[-0.0007599270185826706, -0.0009852849526972827], 
        0.15349190729457127`, 
        Complex[-0.021962356416791867`, -0.002780742775539965], 
        Complex[-0.0024808682585158136`, -0.004317615941758585], 
        Complex[-0.0012572034559478942`, -0.00008903705094374242]}, {
        Complex[-0.0023244163646923945`, -0.00025761685054469415`], 
        Complex[0.007793146930313435, -0.01438266604145265], 
        Complex[-0.0010568790893059432`, 0.0004199007706051656], 
        Complex[-0.001542120609812049, 0.00040626322594490647`], 
        Complex[-0.02196235641679188, 0.002780742775539965], 
        0.1571599871563026, 
        Complex[0.0003038419081990533, 0.0001203103470355342], 
        Complex[-0.003410166862568464, -0.0037459870236367793`]}, {
        Complex[0.001175880870973131, 0.0005093253485343417], 
        Complex[-0.0012922590122132985`, 0.001470990849745394], 
        Complex[0.007032252717834966, -0.015105489697087289`], 
        Complex[-0.0070613497537709655`, 0.00006456786363889738], 
        Complex[-0.002480868258515812, 0.004317615941758585], 
        Complex[0.00030384190819905243`, -0.0001203103470355342], 
        0.14272289968251578`, 
        Complex[-0.021651931985661566`, -0.002651447661640782]}, {
        Complex[-0.0009454101242747526, -0.001152503947436552], 
        Complex[0.0014161604722926283`, 0.00022342896104293308`], 
        Complex[-0.0027429168168004035`, 0.0010960826164974893`], 
        Complex[0.007048775718814274, -0.014186013943974052`], 
        Complex[-0.0012572034559478942`, 0.00008903705094373549], 
        Complex[-0.0034101668625684646`, 0.0037459870236367793`], 
        Complex[-0.021651931985661566`, 0.002651447661640784], 
        0.15167303012658692`}}, {
      SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/ZQej8ajS5uT6R6XPrINZ9U++jtflr7j2buBwDu
blGr
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/Zo9H4CNLp6SvXT2vzBrn/A3AcA7m5Rqw==
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/ZQej8OPi5xYvnk6qOX/UPd/WTbDwDublGr
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/YE6P0E6KGuf7C7j2b6Ae5uUas=
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/ZQej8abU+kPKnqqS1Pb/uGjf8B7m5Rqw==
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/Zo9H40mtby9LYPXX7E+h8A7m5Rqw==
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/ZQej+ZfHL12VOob9R+Cu0HAO5uUas=
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, CompressedData["
1:eJxTTMoPSmVkYGBwYICBA/aj9MikAR2NQas=
         "]}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, Complex[
          0., 0.125], -0.125, -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125, 0.125, Complex[0., 0.125], 0.125, Complex[
          0., 0.125], Complex[0., 0.125], -0.125, Complex[0., -0.125], 0.125, 
          0.125, Complex[0., 0.125], 0.125, Complex[0., 0.125], Complex[
          0., 0.125], -0.125, -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125, Complex[0., -0.125], 0.125, 0.125, Complex[
          0., 0.125], Complex[0., -0.125], 0.125, 0.125, Complex[0., 0.125], 
          0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, -0.125, 
          Complex[0., -0.125], Complex[0., -0.125], 0.125, Complex[
          0., -0.125], 0.125, 0.125, Complex[0., 0.125], -0.125, Complex[
          0., -0.125], Complex[0., -0.125], 0.125, Complex[0., -0.125], 0.125,
           0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, -0.125, 
          Complex[0., -0.125], -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., -0.125], Complex[0., 0.125], 0.125, Complex[
          0., 0.125], 0.125, -0.125, Complex[0., 0.125], Complex[0., 0.125], 
          0.125, -0.125, Complex[0., 0.125], -0.125, Complex[0., 0.125], 
          Complex[0., -0.125], -0.125, Complex[0., -0.125], -0.125, 0.125, 
          Complex[0., -0.125], 0.125, Complex[0., -0.125], Complex[0., 0.125],
           0.125, 0.125, Complex[0., -0.125], Complex[0., 0.125], 0.125, 
          Complex[0., 0.125], 0.125, -0.125, Complex[0., 0.125], Complex[
          0., -0.125], -0.125, 0.125, Complex[0., -0.125], 0.125, Complex[
          0., -0.125], Complex[0., 0.125], 0.125, 0.125, Complex[0., -0.125], 
          Complex[0., 0.125], 0.125, Complex[0., 0.125], 0.125, -0.125, 
          Complex[0., 0.125], -0.125, Complex[0., 0.125], Complex[
          0., -0.125], -0.125, Complex[0., -0.125], -0.125, 0.125, Complex[
          0., -0.125], Complex[0., -0.125], -0.125, 0.125, Complex[
          0., -0.125], 0.125, Complex[0., -0.125], Complex[0., 0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., 0.125], Complex[0., -0.125], 0.125, Complex[
          0., 0.125], -0.125, 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125, -0.125, Complex[0., -0.125], 0.125, Complex[0., 0.125], 
          Complex[0., -0.125], 0.125, Complex[0., 0.125], -0.125, 0.125, 
          Complex[0., 0.125], -0.125, Complex[0., -0.125], Complex[
          0., 0.125], -0.125, 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125, Complex[0., 0.125], -0.125, 0.125, Complex[0., 0.125], 
          Complex[0., -0.125], 0.125, -0.125, Complex[0., -0.125], 0.125, 
          Complex[0., 0.125], Complex[0., -0.125], 0.125, -0.125, Complex[
          0., -0.125], Complex[0., 0.125], -0.125, Complex[0., -0.125], 
          0.125, -0.125, Complex[0., -0.125], 0.125, Complex[0., 0.125], 
          Complex[0., -0.125], 0.125, Complex[0., 0.125], -0.125, 0.125, 
          Complex[0., 0.125], Complex[0., -0.125], 0.125, -0.125, Complex[
          0., -0.125], 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., -0.125], Complex[0., -0.125], -0.125, Complex[
          0., 0.125], 0.125, 0.125, Complex[0., -0.125], Complex[0., 0.125], 
          0.125, 0.125, Complex[0., -0.125], -0.125, Complex[0., 0.125], 
          Complex[0., 0.125], 0.125, Complex[0., 0.125], 0.125, 0.125, 
          Complex[0., -0.125], -0.125, Complex[0., 0.125], Complex[0., 0.125],
           0.125, -0.125, Complex[0., 0.125], Complex[0., 0.125], 0.125, 
          Complex[0., -0.125], -0.125, -0.125, Complex[0., 0.125], Complex[
          0., -0.125], -0.125, -0.125, Complex[0., 0.125], 0.125, Complex[
          0., -0.125], Complex[0., -0.125], -0.125, 0.125, Complex[
          0., -0.125], Complex[0., -0.125], -0.125, Complex[0., 0.125], 0.125,
           0.125, Complex[0., -0.125], 0.125, Complex[0., -0.125], Complex[
          0., -0.125], -0.125, Complex[0., 0.125], 0.125, 0.125, Complex[
          0., -0.125], Complex[0., 0.125], 0.125, 0.125, Complex[
          0., -0.125], -0.125, Complex[0., 0.125], Complex[0., 0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, Complex[
          0., -0.125], 0.125, 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125, 0.125, Complex[0., 0.125], -0.125, Complex[0., -0.125], 
          Complex[0., -0.125], 0.125, Complex[0., -0.125], 0.125, 0.125, 
          Complex[0., 0.125], -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125, -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125, Complex[0., 0.125], -0.125, -0.125, Complex[
          0., -0.125], Complex[0., 0.125], -0.125, -0.125, Complex[
          0., -0.125], 0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, 
          0.125, Complex[0., 0.125], Complex[0., 0.125], -0.125, Complex[
          0., -0.125], 0.125, 0.125, Complex[0., 0.125], 0.125, Complex[
          0., 0.125], Complex[0., 0.125], -0.125, Complex[0., -0.125], 0.125, 
          0.125, Complex[0., 0.125], Complex[0., -0.125], 0.125, 0.125, 
          Complex[0., 0.125], -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., -0.125], Complex[0., 0.125], 0.125, Complex[
          0., -0.125], -0.125, 0.125, Complex[0., -0.125], Complex[0., 0.125],
           0.125, -0.125, Complex[0., 0.125], 0.125, Complex[0., -0.125], 
          Complex[0., 0.125], 0.125, Complex[0., -0.125], -0.125, 0.125, 
          Complex[0., -0.125], -0.125, Complex[0., 0.125], Complex[
          0., -0.125], -0.125, 0.125, Complex[0., -0.125], Complex[0., 0.125],
           0.125, Complex[0., -0.125], -0.125, 0.125, Complex[0., -0.125], 
          Complex[0., 0.125], 0.125, -0.125, Complex[0., 0.125], 0.125, 
          Complex[0., -0.125], Complex[0., 0.125], 0.125, -0.125, Complex[
          0., 0.125], Complex[0., -0.125], -0.125, Complex[0., 0.125], 
          0.125, -0.125, Complex[0., 0.125], 0.125, Complex[0., -0.125], 
          Complex[0., 0.125], 0.125, Complex[0., -0.125], -0.125, 0.125, 
          Complex[0., -0.125], Complex[0., 0.125], 0.125, -0.125, Complex[
          0., 0.125], 0.125, Complex[0., -0.125], Complex[0., 0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., 0.125], Complex[0., -0.125], 0.125, Complex[
          0., -0.125], 0.125, -0.125, Complex[0., -0.125], Complex[
          0., -0.125], 0.125, -0.125, Complex[0., -0.125], -0.125, Complex[
          0., -0.125], Complex[0., 0.125], -0.125, Complex[0., 0.125], -0.125,
           0.125, Complex[0., 0.125], 0.125, Complex[0., 0.125], Complex[
          0., -0.125], 0.125, 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125, Complex[0., -0.125], 0.125, -0.125, Complex[0., -0.125], 
          Complex[0., 0.125], -0.125, 0.125, Complex[0., 0.125], 0.125, 
          Complex[0., 0.125], Complex[0., -0.125], 0.125, 0.125, Complex[
          0., 0.125], Complex[0., -0.125], 0.125, Complex[0., -0.125], 
          0.125, -0.125, Complex[0., -0.125], -0.125, Complex[0., -0.125], 
          Complex[0., 0.125], -0.125, Complex[0., 0.125], -0.125, 0.125, 
          Complex[0., 0.125], Complex[0., 0.125], -0.125, 0.125, Complex[
          0., 0.125], 0.125, Complex[0., 0.125], Complex[0., -0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 8, 16, 24, 32, 40, 48, 56, 64}, {{1}, {2}, {3}, {4}, {5}, {
          6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {
          3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {
          8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {
          5}, {6}, {7}, {8}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {1}, {
          2}, {3}, {4}, {5}, {6}, {7}, {8}}}, {
         0.125, Complex[0., -0.125], Complex[0., -0.125], -0.125, Complex[
          0., -0.125], -0.125, -0.125, Complex[0., 0.125], Complex[0., 0.125],
           0.125, 0.125, Complex[0., -0.125], 0.125, Complex[0., -0.125], 
          Complex[0., -0.125], -0.125, Complex[0., 0.125], 0.125, 0.125, 
          Complex[0., -0.125], 0.125, Complex[0., -0.125], Complex[
          0., -0.125], -0.125, -0.125, Complex[0., 0.125], Complex[0., 0.125],
           0.125, Complex[0., 0.125], 0.125, 0.125, Complex[0., -0.125], 
          Complex[0., 0.125], 0.125, 0.125, Complex[0., -0.125], 0.125, 
          Complex[0., -0.125], Complex[0., -0.125], -0.125, -0.125, Complex[
          0., 0.125], Complex[0., 0.125], 0.125, Complex[0., 0.125], 0.125, 
          0.125, Complex[0., -0.125], -0.125, Complex[0., 0.125], Complex[
          0., 0.125], 0.125, Complex[0., 0.125], 0.125, 0.125, Complex[
          0., -0.125], Complex[0., -0.125], -0.125, -0.125, Complex[
          0., 0.125], -0.125, Complex[0., 0.125], Complex[0., 0.125], 
          0.125}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 0, 0, 0, 0, 0, 1}, {{8}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 0, 0, 0, 0, 1, 1}, {{7}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 0, 0, 0, 1, 1, 1}, {{6}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 0, 0, 1, 1, 1, 1}, {{5}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 0, 1, 1, 1, 1, 1}, {{4}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 0, 1, 1, 1, 1, 1, 1}, {{3}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 0, 1, 1, 1, 1, 1, 1, 1}, {{2}}}, {1.}}], SparseArray[
       Automatic, {8, 8}, 0., {
        1, {{0, 1, 1, 1, 1, 1, 1, 1, 1}, {{1}}}, {1.}}]}, {553., 411., 527., 
      394., 644., 441., 628., 402., 514., 559., 561., 598., 435., 426., 445., 
      462., 605., 574., 629., 614., 406., 340., 386., 446.}, 
      0.0009915195883103893], "TotalCounts" -> 12000, "CountsPerMeasurement" -> 
    4000, "Dimension" -> 8, "MetropolisStepSize" -> 0.0009915195883103893, 
    "MeasurementOutcomes" -> 24, 
    "Properties" -> {
     "Invertible", "PhysicalInversion", "InversionState", 
      "MaximumLikelihoodState", "MaximumLikelihoodAcceptanceRatio", 
      "MaximumLikelihoodConvergence", "MaximumLikelihoodConvergenceStepSize", 
      "BayesianAcceptanceRatio", "BayesianSampler", "TotalCounts", 
      "CountsPerMeasurement", "Dimension", "MetropolisStepSize", 
      "MeasurementOutcomes"}|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8900117940207567`*^9, 3.890011854119836*^9, 
  3.890012014697864*^9, 3.8900120794496193`*^9, 3.890012216140595*^9, 
  3.8900444052961397`*^9},
 CellLabel->
  "Out[330]=",ExpressionUUID->"65ab0ca8-1baa-4a42-9b03-bd04c030f121"]
}, Open  ]],

Cell["\<\
Generate 100 states using the corresponding Bayesian sampling function.\
\>", "CodeText",
 CellChangeTimes->{{3.8900132821005573`*^9, 
  3.890013310578074*^9}},ExpressionUUID->"ba37b820-4af2-432e-8262-\
98f348d690c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sample3a", "=", 
   RowBox[{
    RowBox[{"est3", "[", "\"\<BayesianSampler\>\"", "]"}], "[", "100", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.89001186206511*^9, 3.8900119037859983`*^9}, {
  3.890012039319517*^9, 3.890012044671685*^9}, {3.890012216079362*^9, 
  3.890012227466755*^9}},
 CellLabel->
  "In[331]:=",ExpressionUUID->"3e92099e-955e-43da-87bc-ebe8e7353c57"],

Cell["\<\
Show histogram of fidelity with respect to the original quantum state.\
\>", "CodeText",
 CellChangeTimes->{{3.8900133160099287`*^9, 
  3.8900133414767303`*^9}},ExpressionUUID->"1b8d55d3-dbef-4652-845d-\
425891ca218d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"QuantumDistance", "[", 
     RowBox[{"#", ",", "\[Psi]3", ",", "\"\<Fidelity\>\""}], "]"}], "&"}], "/@",
    "sample3a"}], "]"}]], "Input",
 CellChangeTimes->{{3.890011906593874*^9, 3.890011943664322*^9}, {
  3.89001205303537*^9, 3.890012055386671*^9}, {3.890012088239325*^9, 
  3.890012092982463*^9}, {3.890012144204185*^9, 3.89001214637579*^9}, {
  3.8900122228045683`*^9, 3.890012225707507*^9}},
 CellLabel->
  "In[332]:=",ExpressionUUID->"a8f7a70a-73d0-4c66-8967-640fb9ec3ecb"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.623], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.623], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36075, 0}, {0.3608, 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{20.21078431373462, 56.60403050109744}, {
           78.97043757486496, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36085, 0}, {0.3609, 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{91.99727668846026, 128.39052287579398`}, {
           72.92636954284379, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3609, 0}, {0.36095, 7.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{127.89052287579398`, 164.2837690631568}, {
           48.750097414759125`, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36095, 0}, {0.361, 17.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{163.7837690631568, 
           200.17701525051962`}, {-11.690582905452544`, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.361, 0}, {0.36105, 16.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{199.67701525051962`, 
           236.07026143788244`}, {-5.6465148734313715`, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 16]& ,
        TagBoxNote->"16"],
       StyleBox["16", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[16, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36105, 0}, {0.3611, 32.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{235.57026143788244`, 
           271.96350762524526`}, {-102.35160338577003`, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 32]& ,
        TagBoxNote->"32"],
       StyleBox["32", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[32, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3611, 0}, {0.36115, 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{271.46350762524526`, 
           307.8567538126372}, {-23.778718969494875`, 91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36115, 0}, {0.3612, 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{307.3567538126372, 343.75}, {66.88230151082263, 
           91.55857363890729}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.36074100000000003`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0.36075, 0.3612}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.890011933607544*^9, 3.890011944912717*^9}, 
   3.890012056594118*^9, 3.89001214930837*^9, 3.890012232154789*^9, 
   3.890044411990285*^9},
 CellLabel->
  "Out[332]=",ExpressionUUID->"0ead41d5-1abd-4204-bd8d-26581d1cda0f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["KS Test", "Subsection",ExpressionUUID->"047de2ee-5598-4a68-9571-ac954a9fd187"],

Cell["\<\
Perform the KS test on the GHZ state in different basis and test the fit of \
qpu data to a SimulatedMeasurement distribution.\
\>", "Text",
 CellChangeTimes->{{3.891433897844104*^9, 3.89143390432619*^9}, {
  3.8914345860674467`*^9, 
  3.8914346218788*^9}},ExpressionUUID->"80cf710d-4c97-4c13-9fb7-c47891f3689d"],

Cell["List all qpu counts generated above.", "CodeText",
 CellChangeTimes->{{3.8914347119729548`*^9, 
  3.891434733408814*^9}},ExpressionUUID->"3a2142bf-e13e-4646-bacf-\
69767354b67f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"qpu3z", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "605", ",", " ", "574", ",", " ", "629", ",", " ", "614", ",", " ", "406",
      ",", " ", "340", ",", " ", "386", ",", " ", "446"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu3x", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "553", ",", " ", "411", ",", " ", "527", ",", " ", "394", ",", " ", "644",
      ",", " ", "441", ",", " ", "628", ",", " ", "402"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"qpu3y", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "514", ",", " ", "559", ",", " ", "561", ",", " ", "598", ",", " ", "435",
      ",", " ", "426", ",", " ", "445", ",", " ", "462"}], "}"}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[29]:= ",ExpressionUUID->"f6bdf63f-b982-4b9a-9f0f-b40182c721d4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pzzz", " ", "=", " ", 
   RowBox[{"Counts", "@", "\n", " ", " ", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<GHZ\>\"", "]"}], "]"}], "[", "\n", 
     " ", " ", " ", " ", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", " ", "4000"}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"pxxx", " ", "=", " ", 
   RowBox[{"Counts", "@", "\n", " ", " ", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<X\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<GHZ\>\"", "]"}], "]"}], "[", "\n", 
     " ", " ", " ", " ", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", " ", "4000"}], "]"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"pyyy", " ", "=", " ", 
   RowBox[{"Counts", "@", "\n", " ", " ", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantumMeasurementOperator", "[", 
       RowBox[{"\"\<Y\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}], "[", 
      RowBox[{"QuantumState", "[", "\"\<GHZ\>\"", "]"}], "]"}], "[", "\n", 
     " ", " ", " ", " ", 
     RowBox[{"\"\<SimulatedMeasurement\>\"", ",", " ", "4000"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellLabel->
  "In[32]:= ",ExpressionUUID->"aea180e0-7edf-43de-81db-322130673802"],

Cell[CellGroupData[{

Cell[BoxData["pxxx"], "Input",
 CellLabel->
  "In[35]:= ",ExpressionUUID->"b4efc6e9-0630-47f6-9e81-46bdebd50f9c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "-"]], 
       Subscript["\[Psi]", 
        Subscript["x", "+"]], 
       Subscript["\[Psi]", 
        Subscript["x", "-"]]}, "Dual" -> False]], "\[Rule]", "1039"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "+"]], 
       Subscript["\[Psi]", 
        Subscript["x", "-"]], 
       Subscript["\[Psi]", 
        Subscript["x", "-"]]}, "Dual" -> False]], "\[Rule]", "1027"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "-"]], 
       Subscript["\[Psi]", 
        Subscript["x", "-"]], 
       Subscript["\[Psi]", 
        Subscript["x", "+"]]}, "Dual" -> False]], "\[Rule]", "956"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"x\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["x", "+"]], 
       Subscript["\[Psi]", 
        Subscript["x", "+"]], 
       Subscript["\[Psi]", 
        Subscript["x", "+"]]}, "Dual" -> False]], "\[Rule]", "978"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[35]= ",ExpressionUUID->"52fd2382-e842-4f2a-8a0b-537fd92a4d62"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataXXX", " ", "=", " ", "\n", " ", 
  RowBox[{"Values", "@", 
   RowBox[{"Reverse", "@", "\n", " ", " ", " ", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"AssociationThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantumBasis", "[", 
          RowBox[{"\"\<X\>\"", ",", " ", "3"}], "]"}], "[", "\"\<Names\>\"", 
         "]"}], ",", " ", "0"}], "]"}], ",", " ", "pxxx"}], 
     "]"}]}]}]}]], "Input",
 CellLabel->
  "In[36]:= ",ExpressionUUID->"8396ed58-9f26-43a7-a268-622427033d2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "978", ",", "0", ",", "0", ",", "1027", ",", "0", ",", "1039", ",", "956", 
   ",", "0"}], "}"}]], "Output",
 CellLabel->
  "Out[36]= ",ExpressionUUID->"dd20dc49-dc41-42b1-b049-e43d37aba489"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu3x", ",", " ", "dataXXX", 
  "]"}]], "Input",
 CellLabel->
  "In[37]:= ",ExpressionUUID->"90543839-4170-4f47-aa1e-d5f8efea92bf"],

Cell[BoxData["0.28267288267288265`"], "Output",
 CellLabel->
  "Out[37]= ",ExpressionUUID->"5d5c5046-3d2e-4f5b-b156-26ddb7400cec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["pyyy"], "Input",
 CellLabel->
  "In[38]:= ",ExpressionUUID->"351c46ae-2c7e-4442-9bbf-26833b3e0747"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]]}, "Dual" -> False]], "\[Rule]", "497"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]]}, "Dual" -> False]], "\[Rule]", "489"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]]}, "Dual" -> False]], "\[Rule]", "527"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]]}, "Dual" -> False]], "\[Rule]", "510"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]]}, "Dual" -> False]], "\[Rule]", "495"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]]}, "Dual" -> False]], "\[Rule]", "556"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "-"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]]}, "Dual" -> False]], "\[Rule]", "429"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"+\""]], "\[InvisibleSpace]", 
          SubscriptBox["\"\[Psi]\"", 
           SubscriptBox["\"y\"", "\"-\""]]}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "+"]], 
       Subscript["\[Psi]", 
        Subscript["y", "-"]]}, "Dual" -> False]], "\[Rule]", "497"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[38]= ",ExpressionUUID->"e10bba7e-fc91-4b5c-8e6d-3111a637090a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataYYY", " ", "=", " ", "\n", " ", 
  RowBox[{"Reverse", "[", 
   RowBox[{"Values", "[", "pyyy", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[39]:= ",ExpressionUUID->"34882bf2-6d39-4a7e-9a3f-c5fb53831070"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "497", ",", "429", ",", "556", ",", "495", ",", "510", ",", "527", ",", 
   "489", ",", "497"}], "}"}]], "Output",
 CellLabel->
  "Out[39]= ",ExpressionUUID->"103f3999-9363-480d-af7b-91045974cfec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu3y", ",", " ", "dataYYY", 
  "]"}]], "Input",
 CellLabel->
  "In[41]:= ",ExpressionUUID->"ad4b6313-abc1-4886-9d6a-e17b8f601b7c"],

Cell[BoxData["0.6601398601398601`"], "Output",
 CellLabel->
  "Out[41]= ",ExpressionUUID->"1b74d147-f7f8-4aa0-936d-ffbeab037921"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["pzzz"], "Input",
 CellLabel->
  "In[42]:= ",ExpressionUUID->"2f81ec13-8ceb-4bcd-8837-fa680bd6cbac"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"0", "\[InvisibleSpace]", "0", "\[InvisibleSpace]", "0"}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{0, 0, 0}, "Dual" -> False]], "\[Rule]", "2035"}], ",", 
   RowBox[{
    InterpretationBox[
     StyleBox[
      TemplateBox[{
        RowBox[{"1", "\[InvisibleSpace]", "1", "\[InvisibleSpace]", "1"}]},
       "Ket"],
      FontWeight->"Plain"],
     QuditName[{1, 1, 1}, "Dual" -> False]], "\[Rule]", "1965"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[42]= ",ExpressionUUID->"40660078-1b9b-4385-92ec-f5a1d988b5e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataZZZ", "=", " ", "Join", "[", "Reverse", "[", "Values", "[", 
  "pzzz", "]", "]", ",", "{", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
  ",", "0", "}", "]"}]], "Input",
 CellLabel->
  "In[43]:= ",ExpressionUUID->"c3144b32-ca42-44b4-bcb6-f76f012e8e17"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1965", ",", "2035", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0"}], "}"}]], "Output",
 CellLabel->
  "Out[43]= ",ExpressionUUID->"0b3ffb1a-f7a8-4953-bcf5-f7daf338b5f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KolmogorovSmirnovTest", "[", "qpu3z", ",", " ", "dataZZZ", 
  "]"}]], "Input",
 CellLabel->
  "In[44]:= ",ExpressionUUID->"c68cf099-10d8-4e65-9497-808d3337dd2f"],

Cell[BoxData["0.018648018648018648`"], "Output",
 CellLabel->
  "Out[44]= ",ExpressionUUID->"24ee2ef1-c713-4835-8da2-0bd1038d2e30"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellFrame->{{0, 0}, {0.2, 0}},
 CellChangeTimes->{{3.802186344523418*^9, 3.802186360670889*^9}},
 CellTags->"Keywords",
 CellID->1137237116,ExpressionUUID->"a102b5e2-d351-47a5-baba-b14cdc3baba6"],

Cell["\<\
Logic Synthesis for Quantum State Generation paper by Philipp Niemann, Rhitam \
Datta,Robert Wille (2016 IEEE 46th International Symposium on Multiple-Valued \
Logic)\
\>", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186383585804*^9}, {
  3.802186733203268*^9, 3.8021867345244904`*^9}, {3.832335887743041*^9, 
  3.832335889639061*^9}, {3.882461465632195*^9, 3.882461521317985*^9}, {
  3.882531892988915*^9, 
  3.882531896124303*^9}},ExpressionUUID->"d01f20cf-14b5-467a-8f62-\
2a66f523e11b"],

Cell["\<\
Quantum state preparation with optimal circuits depth: Implementations and \
Applications by Xiao-Ming Zhang, Tongyang Li and Xiao Yuan \
(arXiv:2201.11495v3 [quant-ph] 5 Dec 2022 \
\>", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186385191455*^9}, {
  3.802186737059086*^9, 3.802186738383222*^9}, {3.832335891247954*^9, 
  3.83233589308599*^9}, {3.882461572658926*^9, 3.882461676694808*^9}, {
  3.8824617258914433`*^9, 3.882461785368225*^9}, {3.882531668479763*^9, 
  3.8825316684827023`*^9}},ExpressionUUID->"084b254a-1785-49df-a896-\
bcb6897c89c3"],

Cell["\<\
Circuits for measurement based quantum state preparation paper by Niels \
Gleinig and Torsten Hoefler\
\>", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186385191455*^9}, {
  3.802186737059086*^9, 3.802186738383222*^9}, {3.832335891247954*^9, 
  3.83233589308599*^9}, {3.882461572658926*^9, 3.882461676694808*^9}, {
  3.8824617258914433`*^9, 3.882461785368225*^9}, {3.882531670477825*^9, 
  3.882531749435951*^9}, {3.882531794967722*^9, 
  3.882531819176198*^9}},ExpressionUUID->"658fbe82-3947-474b-83ab-\
7bf584d50439"],

Cell["https://wolfr.am/wolfram-quantum", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, 
   3.8825318417634172`*^9, {3.8854713405756283`*^9, 
   3.885471340585927*^9}},ExpressionUUID->"16af6634-4d30-46fa-8d57-\
f2c8f0b3bed3"],

Cell["https://community.wolfram.com/groups/-/m/t/2777794", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, 
   3.8825318417634172`*^9, 3.8854713415836782`*^9, {3.890047951565069*^9, 
   3.890047951571467*^9}},ExpressionUUID->"015128aa-387a-415a-8442-\
50c3d41d5041"],

Cell["https://community.wolfram.com/groups/-/m/t/2846060", "Item",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.802186382533594*^9, 3.802186386161345*^9}, 
   3.8825318417634172`*^9, 3.8854713415836782`*^9, 
   3.890047976296489*^9},ExpressionUUID->"e93d3d9f-81ed-430e-acfa-\
2b63a787e400"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization cells", "Section",
 CellFrame->{{0, 0}, {0.2, 0}},
 CellChangeTimes->{
  3.483202458955147*^9, {3.514308340990994*^9, 3.514308352103572*^9}, {
   3.885347659131616*^9, 
   3.885347663319168*^9}},ExpressionUUID->"e8013d3d-af44-4865-a29a-\
7391e7799540"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"PacletInstall", "[", 
  RowBox[{"\"\<https://wolfr.am/DevWQCF\>\"", ",", 
   RowBox[{"ForceVersionInstall", "->", "True"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "Wolfram`QuantumFramework`"}]}], "Input",
 CellFrame->{{0, 0}, {0, 0}},
 FontWeight->"Plain",
 CellLabel->"In[29]:=",ExpressionUUID->"c5ba38b4-e29c-4396-9f73-0d38b228c0b8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PacletObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Wolfram/QuantumFramework\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.33\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Wolfram/QuantumFramework\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.0.33\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"/Users/s/Library/Mathematica/Paclets/Repository/Wolfram__\
QuantumFramework-1.0.33\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                  "\"Perform analytic and numeric quantum computations\"", 
                   Short], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PacletObject[<|
   "Name" -> "Wolfram/QuantumFramework", "Description" -> 
    "Perform analytic and numeric quantum computations", "Creator" -> 
    "Wolfram Research, Quantum Computation Framework team", "License" -> 
    "MIT", "PublisherID" -> "Wolfram", "Version" -> "1.0.33", 
    "WolframVersion" -> "13.1+", "PrimaryContext" -> 
    "Wolfram`QuantumFramework`", 
    "Extensions" -> {{
      "Kernel", "Root" -> "Kernel", 
       "Context" -> {
        "Wolfram`QuantumFrameworkLoader`", {
         "Wolfram`QuantumFramework`", "QuantumFrameworkMain.m"}}, 
       "Symbols" -> {
        "Wolfram`QuantumFramework`QuditName", 
         "Wolfram`QuantumFramework`QuditBasis", 
         "Wolfram`QuantumFramework`QuantumBasis", 
         "Wolfram`QuantumFramework`QuantumState", 
         "Wolfram`QuantumFramework`QuantumOperator", 
         "Wolfram`QuantumFramework`QuantumMeasurementOperator", 
         "Wolfram`QuantumFramework`QuantumCircuitOperator", 
         "Wolfram`QuantumFramework`QuantumMeasurement", 
         "Wolfram`QuantumFramework`QuantumTensorProduct", 
         "Wolfram`QuantumFramework`QuantumPartialTrace", 
         "Wolfram`QuantumFramework`QuantumDistance", 
         "Wolfram`QuantumFramework`QuantumEntanglementMonotone", 
         "Wolfram`QuantumFramework`QuantumEntangledQ", 
         "Wolfram`QuantumFramework`QuantumWignerTransform", 
         "Wolfram`QuantumFramework`QuantumChannel", 
         "Wolfram`QuantumFramework`QuantumStateEstimate", 
         "Wolfram`QuantumFramework`QuantumMeasurementSimulation"}}, {
      "IBMQ"}, {"Documentation", "Language" -> "English"}, {
      "AutoCompletionData", "Root" -> "AutoCompletionData"}, {"FrontEnd"}}, 
    "Location" -> 
    "/Users/s/Library/Mathematica/Paclets/Repository/Wolfram__\
QuantumFramework-1.0.33"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.886742212218472*^9, {3.88675533772554*^9, 3.886755354032281*^9}, {
   3.886766927412447*^9, 3.886766943861866*^9}, {3.8867673949029417`*^9, 
   3.886767410451373*^9}, {3.8867684068638363`*^9, 3.8867684184584427`*^9}, {
   3.8867686785402727`*^9, 3.8867686935925207`*^9}, {3.886889605998827*^9, 
   3.886889610853498*^9}, {3.887630849765202*^9, 3.88763086631993*^9}, {
   3.887666895212523*^9, 3.887666916622253*^9}, 3.887676635568303*^9, 
   3.887676865222683*^9, 3.887677048361472*^9, 3.887677107211459*^9, 
   3.887689561887323*^9, {3.887719835148241*^9, 3.8877198466153803`*^9}, {
   3.887724070295663*^9, 3.88772408433042*^9}, {3.887725324131268*^9, 
   3.887725337379483*^9}, {3.887725480710474*^9, 3.887725493994988*^9}, {
   3.88772695538311*^9, 3.887726970399557*^9}, {3.887728125915649*^9, 
   3.887728139456461*^9}, {3.8877469707074947`*^9, 3.8877469831005707`*^9}, {
   3.887760685540681*^9, 3.8877606903050537`*^9}, {3.887797895240991*^9, 
   3.887797910267853*^9}, {3.8878725409236593`*^9, 3.8878725521656723`*^9}, {
   3.887885646300116*^9, 3.887885669956656*^9}, {3.889275056637005*^9, 
   3.889275070289493*^9}, {3.889276039998891*^9, 3.88927605326537*^9}, {
   3.889278215577704*^9, 3.889278229449286*^9}, {3.889314178318334*^9, 
   3.889314192516651*^9}, {3.88932134897729*^9, 3.889321359225267*^9}, {
   3.889323526519342*^9, 3.889323540350065*^9}, {3.8893333725497093`*^9, 
   3.88933338620802*^9}, 3.889943587616704*^9, 3.891433628095624*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"8bae80f5-3169-4039-8199-2e0fc96be8bc"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1238, 799},
WindowMargins->{{12, Automatic}, {7, Automatic}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/target_prob_\
community_post_3.0.1.nb"},
FrontEndVersion->"13.2 for Mac OS X x86 (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"d266a883-0455-4f01-bbb5-14102b9f5820"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Keywords"->{
  Cell[1581216, 32483, 226, 4, 67, "Section",ExpressionUUID->"a102b5e2-d351-47a5-baba-b14cdc3baba6",
   CellTags->"Keywords",
   CellID->1137237116]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Keywords", 1610528, 33031}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 502, 7, 98, "Title",ExpressionUUID->"76ee9e23-f369-4f3f-955a-400a966ac51e"],
Cell[CellGroupData[{
Cell[1107, 33, 282, 5, 67, "Section",ExpressionUUID->"5862e289-b8a0-4802-bdfd-912b642713d9"],
Cell[1392, 40, 1978, 33, 173, "Text",ExpressionUUID->"37f4e627-a5ac-4566-ad86-8ed4f72bcc3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3407, 78, 156, 3, 67, "Section",ExpressionUUID->"0ec8d413-8f88-41ac-ab41-b1ba286a69d2"],
Cell[3566, 83, 1926, 29, 242, "Text",ExpressionUUID->"3f0db774-9384-4e5b-abdf-aa14587d8032"],
Cell[5495, 114, 381, 7, 35, "Text",ExpressionUUID->"f3c1143c-c739-4227-9c6d-d68ed661ab64"],
Cell[5879, 123, 1422, 21, 242, "Text",ExpressionUUID->"9643b92a-9374-4773-8aac-86d924b4ac0e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7338, 149, 239, 5, 62, "Section",ExpressionUUID->"e16377b6-7cfe-4c54-82eb-1265b968bdd8"],
Cell[7580, 156, 414, 8, 58, "Text",ExpressionUUID->"896ca019-dc0a-4ff2-b9bf-23ad1b9d38bf"],
Cell[CellGroupData[{
Cell[8019, 168, 331, 6, 30, "Input",ExpressionUUID->"2d5a5978-d4d7-4bee-86ff-7860699f758e"],
Cell[8353, 176, 101216, 1681, 62, "Output",ExpressionUUID->"d9b43111-6602-4e81-8f92-02b2b2049931"]
}, Open  ]],
Cell[109584, 1860, 476, 8, 38, "CodeText",ExpressionUUID->"3d37205b-e741-4ffe-a53e-e49c613ce278"],
Cell[CellGroupData[{
Cell[110085, 1872, 797, 18, 52, "Input",ExpressionUUID->"cc0cecc3-66b0-481e-b39b-5b87aadf4927"],
Cell[110885, 1892, 33690, 602, 173, "Output",ExpressionUUID->"50e23d13-934c-4e21-900e-516dc981dee5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144612, 2499, 652, 16, 52, "Input",ExpressionUUID->"c7f0790f-7ec9-4e1a-a876-1f94000d2891"],
Cell[145267, 2517, 28268, 503, 119, "Output",ExpressionUUID->"0c789448-a591-4b80-be66-a73159d951e8"]
}, Open  ]],
Cell[173550, 3023, 361, 8, 35, "Text",ExpressionUUID->"7936c76f-8589-4501-b29e-296b1c4490c7"],
Cell[CellGroupData[{
Cell[173936, 3035, 156, 3, 45, "Subsubsection",ExpressionUUID->"b055450d-70a5-4892-93c7-abb89c134643"],
Cell[174095, 3040, 1070, 17, 127, "Text",ExpressionUUID->"6154a2d3-c12b-4676-aadc-871da4d19291"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[175214, 3063, 156, 3, 67, "Section",ExpressionUUID->"d5bb8d8b-aa34-4385-9927-fe675c9bf921"],
Cell[175373, 3068, 1838, 54, 108, "Text",ExpressionUUID->"c46c7e76-fb6a-4518-a9fa-fd6b6e77f1a4"],
Cell[CellGroupData[{
Cell[177236, 3126, 162, 3, 54, "Subsection",ExpressionUUID->"027bb421-d9c4-4c6f-bfbc-0518bd84525e"],
Cell[177401, 3131, 171, 3, 38, "CodeText",ExpressionUUID->"f3e077fe-e588-4b38-b45f-d876f71b83da"],
Cell[177575, 3136, 370, 7, 30, "Input",ExpressionUUID->"afd74368-260d-4fa1-b88d-9a2020d7eb7e"],
Cell[177948, 3145, 376, 7, 38, "CodeText",ExpressionUUID->"3dcfef4e-458e-47db-a39f-0594efa3aa40"],
Cell[178327, 3154, 1664, 40, 73, "Input",ExpressionUUID->"989598de-dfee-43f3-a23a-3b9a64c2b771"],
Cell[179994, 3196, 219, 5, 38, "CodeText",ExpressionUUID->"cf02547d-0033-4d54-9d51-2ef1c538f3fb"],
Cell[180216, 3203, 1377, 27, 73, "Input",ExpressionUUID->"1a87bad6-a3c5-48e6-9805-2b646ca18c05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181630, 3235, 258, 6, 54, "Subsection",ExpressionUUID->"acac536d-6370-4303-9308-b1f6fa17c3e2"],
Cell[181891, 3243, 269, 6, 38, "CodeText",ExpressionUUID->"85229082-6b41-4427-94d5-c98ded1f243a"],
Cell[182163, 3251, 950, 17, 30, "Input",ExpressionUUID->"14d5ac3f-dbad-43af-a071-8fad63f7b764"],
Cell[183116, 3270, 292, 4, 38, "CodeText",ExpressionUUID->"2e0f97b1-6e64-48ca-bc5e-162866b3a226"],
Cell[183411, 3276, 971, 18, 30, "Input",ExpressionUUID->"38c452a8-071a-49bf-8883-5802c0ccbca0"],
Cell[184385, 3296, 168, 3, 38, "CodeText",ExpressionUUID->"76298719-df34-46b2-bad9-9fb60fc46c94"],
Cell[CellGroupData[{
Cell[184578, 3303, 987, 19, 30, "Input",ExpressionUUID->"5838e4b1-2273-4fda-8fa0-6366781506d0"],
Cell[185568, 3324, 51519, 952, 335, "Output",ExpressionUUID->"c398fbb4-6464-41d7-adc2-f0c268791285"]
}, Open  ]],
Cell[237102, 4279, 235, 6, 35, "Text",ExpressionUUID->"dbc6054c-a02b-4aaa-b0a3-10f8bf671239"],
Cell[237340, 4287, 174, 2, 38, "CodeText",ExpressionUUID->"efa455ec-c2f5-410c-871c-99746e040c2b"],
Cell[CellGroupData[{
Cell[237539, 4293, 1234, 34, 94, "Input",ExpressionUUID->"6cc9efb2-9097-4079-bd48-b301caf18cb1"],
Cell[238776, 4329, 1141, 19, 34, "Output",ExpressionUUID->"2d535785-5a2e-41d1-9c3a-7dbc99cf0f4a"],
Cell[239920, 4350, 1033, 16, 34, "Output",ExpressionUUID->"6be92745-5921-4f00-97d9-03650e15a6bb"],
Cell[240956, 4368, 1526, 34, 49, "Output",ExpressionUUID->"dba7b474-88fb-4384-99d3-83fd1ef7493c"]
}, Open  ]],
Cell[242497, 4405, 221, 5, 38, "CodeText",ExpressionUUID->"4d7ad652-26f9-4359-91ea-51912f1aaadb"],
Cell[242721, 4412, 511, 11, 30, "Input",ExpressionUUID->"38bd013e-460f-49c2-928f-dc429b557983"],
Cell[243235, 4425, 387, 10, 30, "Input",ExpressionUUID->"031897f9-e821-4805-a0f3-53dd3311ffd6"],
Cell[CellGroupData[{
Cell[243647, 4439, 493, 12, 30, "Input",ExpressionUUID->"bcc78cf6-4b2a-46e8-91ba-46237116eb9c"],
Cell[244143, 4453, 51467, 953, 335, "Output",ExpressionUUID->"df8c8caf-787a-4736-a339-a3b663a3f1fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[295647, 5411, 1268, 35, 94, "Input",ExpressionUUID->"ceece7c8-d7bf-4703-ab0d-fb16b5cf109d"],
Cell[296918, 5448, 461, 10, 34, "Output",ExpressionUUID->"b8b10a9d-257c-4a46-8754-9d0b6e0679bf"],
Cell[297382, 5460, 351, 7, 34, "Output",ExpressionUUID->"4b544864-3a70-46d6-85fa-2cf9d2e00b9f"],
Cell[297736, 5469, 844, 25, 49, "Output",ExpressionUUID->"bf55922f-332d-4373-a42c-ef5dbc831a27"]
}, Open  ]],
Cell[298595, 5497, 393, 9, 30, "Input",ExpressionUUID->"8e7c0c93-3edb-4feb-b809-fcfda59b3ab5"],
Cell[298991, 5508, 387, 10, 30, "Input",ExpressionUUID->"ab748503-21b1-4f41-8458-406405bfe82d"],
Cell[CellGroupData[{
Cell[299403, 5522, 569, 14, 30, "Input",ExpressionUUID->"b690fb4a-4d2c-4148-82b9-10d21cdb1219"],
Cell[299975, 5538, 51221, 949, 335, "Output",ExpressionUUID->"76b4a633-0c6a-46ad-8f8e-9b4416be2804"]
}, Open  ]],
Cell[CellGroupData[{
Cell[351233, 6492, 1238, 34, 94, "Input",ExpressionUUID->"f07953b1-b265-44e6-90fd-c08523d58469"],
Cell[352474, 6528, 387, 9, 34, "Output",ExpressionUUID->"ce89cb02-6611-4b2d-9379-1b7946ed9f3c"],
Cell[352864, 6539, 280, 6, 34, "Output",ExpressionUUID->"c278ce87-1574-4f9a-b30f-8d1aba0cfaeb"],
Cell[353147, 6547, 737, 24, 39, "Output",ExpressionUUID->"000744bc-7fda-4b1b-9e5d-9fe4beba4807"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[353933, 6577, 157, 3, 54, "Subsection",ExpressionUUID->"82da1cf6-3e15-4cf6-944c-2a4c2821c284"],
Cell[354093, 6582, 311, 7, 35, "Text",ExpressionUUID->"f72e5a57-16f7-42c5-8386-5c33524b3dc8"],
Cell[CellGroupData[{
Cell[354429, 6593, 157, 3, 45, "Subsubsection",ExpressionUUID->"7689510c-0622-419e-b406-faad01398938"],
Cell[CellGroupData[{
Cell[354611, 6600, 1864, 45, 79, "Input",ExpressionUUID->"7a5a19a8-e9fc-481b-8812-64dac89ccd42"],
Cell[356478, 6647, 25446, 592, 268, "Output",ExpressionUUID->"bf2e0aff-9d3f-4431-9814-00f5b064afe0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[381973, 7245, 159, 3, 45, "Subsubsection",ExpressionUUID->"2ee84c4f-2897-4d5e-bd57-7b0fb8992179"],
Cell[CellGroupData[{
Cell[382157, 7252, 1523, 41, 79, "Input",ExpressionUUID->"30f6cfeb-2524-4499-b334-a09442d60d42"],
Cell[383683, 7295, 24849, 589, 268, "Output",ExpressionUUID->"d0e826c9-bc2c-4bea-bee7-552a4aae93c8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[408581, 7890, 159, 3, 45, "Subsubsection",ExpressionUUID->"5255a3d9-0d48-4ca6-87a8-0022078fc6e9"],
Cell[CellGroupData[{
Cell[408765, 7897, 1521, 41, 79, "Input",ExpressionUUID->"4b76740a-211b-4a97-92a7-073be1c44dd7"],
Cell[410289, 7940, 24392, 581, 268, "Output",ExpressionUUID->"30271acf-5255-46c7-8489-c0782310f072"]
}, Open  ]],
Cell[434696, 8524, 335, 7, 58, "Text",ExpressionUUID->"e511a532-1b52-4c8e-89c5-730f7e862c35"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[435080, 8537, 170, 3, 54, "Subsection",ExpressionUUID->"2a980647-3b4f-4c04-a44b-d509ed3853dc"],
Cell[435253, 8542, 262, 6, 38, "CodeText",ExpressionUUID->"69af87bd-0895-428b-9637-7a853f79ef70"],
Cell[CellGroupData[{
Cell[435540, 8552, 851, 18, 52, "Input",ExpressionUUID->"f685d9fe-1588-47fd-98c7-d6eeb276bde9"],
Cell[436394, 8572, 98710, 1658, 64, "Output",ExpressionUUID->"74453d4f-5592-4897-b3fe-04ddf969dd5e"]
}, Open  ]],
Cell[535119, 10233, 227, 5, 38, "CodeText",ExpressionUUID->"409c0e82-b956-482a-b4c6-54642bfd6686"],
Cell[535349, 10240, 315, 8, 30, "Input",ExpressionUUID->"4819c45d-d598-48df-ba22-3ffe40a4e459"],
Cell[535667, 10250, 228, 5, 38, "CodeText",ExpressionUUID->"c205a40a-0ec7-45f0-b5b8-85a06ea93db0"],
Cell[CellGroupData[{
Cell[535920, 10259, 415, 10, 30, "Input",ExpressionUUID->"454440b1-4492-40d4-930c-2891a5d3542d"],
Cell[536338, 10271, 5168, 151, 240, "Output",ExpressionUUID->"0bd71f46-84de-43ea-8b4c-bb2500f06789"]
}, Open  ]],
Cell[541521, 10425, 165, 3, 35, "Text",ExpressionUUID->"3decd4ba-6019-457a-8ea4-bc4d8cff5c5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541723, 10433, 84, 0, 54, "Subsection",ExpressionUUID->"53f3d430-cbde-4f71-b303-2ad930228d3e"],
Cell[541810, 10435, 438, 6, 58, "Text",ExpressionUUID->"9221657d-0a1f-414e-9994-34eae8c0770e"],
Cell[542251, 10443, 187, 3, 38, "CodeText",ExpressionUUID->"a3702e92-6a68-45f5-ace2-18f2938c09c2"],
Cell[542441, 10448, 518, 15, 73, "Input",ExpressionUUID->"903cb603-0c01-4810-9bce-87cb3546d1a5"],
Cell[542962, 10465, 224, 5, 38, "CodeText",ExpressionUUID->"eb245c8c-bcc4-481e-8abd-8564a8af4e05"],
Cell[543189, 10472, 1249, 31, 73, "Input",ExpressionUUID->"bf9dfc61-f986-408b-8161-acd8671819a9"],
Cell[544441, 10505, 172, 3, 38, "CodeText",ExpressionUUID->"f74798b9-40f6-4606-aab6-fb890e79e09a"],
Cell[CellGroupData[{
Cell[544638, 10512, 300, 4, 30, "Input",ExpressionUUID->"eae9f37e-818b-46f4-90f9-e293db883e62"],
Cell[544941, 10518, 200, 4, 34, "Output",ExpressionUUID->"08352b80-b73a-439d-9f81-b6087926ca60"]
}, Open  ]],
Cell[545156, 10525, 189, 3, 38, "CodeText",ExpressionUUID->"373a00f5-956d-4417-b0eb-1aacebb40161"],
Cell[CellGroupData[{
Cell[545370, 10532, 241, 4, 30, "Input",ExpressionUUID->"7991bb53-72ae-4688-a679-bd66d60b995f"],
Cell[545614, 10538, 222, 3, 34, "Output",ExpressionUUID->"1f64105f-2da9-4a35-9aeb-0a7b9f77cef2"]
}, Open  ]],
Cell[545851, 10544, 197, 3, 38, "CodeText",ExpressionUUID->"9bfd1277-bf74-4b69-ba30-2748b02c2bc9"],
Cell[CellGroupData[{
Cell[546073, 10551, 518, 7, 30, "Input",ExpressionUUID->"cd743fba-4f32-4d8d-a0a3-14a3cda42634"],
Cell[546594, 10560, 367, 6, 34, "Output",ExpressionUUID->"fa58f7c5-f9df-40d9-9c9e-a586d93ed049"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546998, 10571, 292, 5, 30, "Input",ExpressionUUID->"b5363df8-28a0-4c1c-98f1-382b5b7d8e2b"],
Cell[547293, 10578, 242, 3, 34, "Output",ExpressionUUID->"419f0f34-110e-41ea-9221-ec97da3574a5"]
}, Open  ]],
Cell[547550, 10584, 173, 3, 38, "CodeText",ExpressionUUID->"f109e822-6c0a-4741-82b6-7f4db8d83b99"],
Cell[CellGroupData[{
Cell[547748, 10591, 509, 7, 30, "Input",ExpressionUUID->"a0ea24b5-e7f6-41a0-ab69-64a49b73aabb"],
Cell[548260, 10600, 348, 6, 34, "Output",ExpressionUUID->"171f7ead-a718-4325-adaf-ce85498407e4"]
}, Open  ]],
Cell[548623, 10609, 162, 3, 38, "CodeText",ExpressionUUID->"e4675524-f026-49a1-af44-ab1f629c5965"],
Cell[CellGroupData[{
Cell[548810, 10616, 292, 5, 30, "Input",ExpressionUUID->"dc1dff2e-8625-4bd0-a42e-fd2f2432e045"],
Cell[549105, 10623, 244, 3, 34, "Output",ExpressionUUID->"edcf75a7-001c-4702-814d-1dbdb0c6a9b1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[549410, 10633, 351, 10, 68, "Section",ExpressionUUID->"2bbdbd74-3b3e-4715-8e2f-6f8c923a43f4"],
Cell[549764, 10645, 2519, 73, 154, "Text",ExpressionUUID->"ca3fbc2a-cddd-4a52-afb3-15cf012aca15"],
Cell[CellGroupData[{
Cell[552308, 10722, 162, 3, 54, "Subsection",ExpressionUUID->"ad5be213-9207-428d-9d0d-053f14c0ff36"],
Cell[552473, 10727, 320, 10, 38, "CodeText",ExpressionUUID->"c8f8a64f-1a41-4a92-a6f9-6824f67c5200"],
Cell[552796, 10739, 369, 7, 30, "Input",ExpressionUUID->"33ed7ea6-09d6-4be6-b483-87c5eef3aea8"],
Cell[553168, 10748, 366, 5, 35, "Text",ExpressionUUID->"6c2bfbc2-d745-484d-afe2-ff981c4c213f"],
Cell[553537, 10755, 1560, 44, 73, "Input",ExpressionUUID->"6ced4099-68ad-4541-affa-9a5435b66819"],
Cell[555100, 10801, 195, 5, 38, "CodeText",ExpressionUUID->"e4b2b183-6e19-48de-b206-625618b17d4f"],
Cell[555298, 10808, 1211, 25, 73, "Input",ExpressionUUID->"a0fc217f-e87f-485c-ad9a-bcf038f6c9a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[556546, 10838, 258, 6, 54, "Subsection",ExpressionUUID->"33dd8e22-a87a-4f95-8039-aac6592a1c42"],
Cell[556807, 10846, 219, 5, 38, "CodeText",ExpressionUUID->"d767c790-5f8b-4131-a37d-7684ebd3baa9"],
Cell[557029, 10853, 1004, 18, 30, "Input",ExpressionUUID->"c274d21a-6485-4690-9f33-7bf4ef9b79b4"],
Cell[558036, 10873, 174, 3, 38, "CodeText",ExpressionUUID->"d335912d-0bf4-475f-b926-4e2033096cab"],
Cell[558213, 10878, 1117, 20, 30, "Input",ExpressionUUID->"afced56f-6a70-400a-ac58-d58be5c7a541"],
Cell[559333, 10900, 146, 3, 38, "CodeText",ExpressionUUID->"eb497ff6-fa06-4e25-a18e-69c4380b745f"],
Cell[CellGroupData[{
Cell[559504, 10907, 378, 10, 30, "Input",ExpressionUUID->"2540953a-bc90-4059-9698-d52e6e7e618f"],
Cell[559885, 10919, 51475, 954, 335, "Output",ExpressionUUID->"a449c469-f389-485b-b5bb-83c8fbcecf0c"]
}, Open  ]],
Cell[611375, 11876, 191, 3, 38, "CodeText",ExpressionUUID->"bf75fa14-e964-4948-ad79-3fd19b4615cb"],
Cell[CellGroupData[{
Cell[611591, 11883, 1359, 36, 94, "Input",ExpressionUUID->"771ddab6-0f46-4ffa-81c6-cbd89cae0048"],
Cell[612953, 11921, 1268, 22, 34, "Output",ExpressionUUID->"ff9f1cc2-e0a2-47de-958a-cb4b772372b5"],
Cell[614224, 11945, 1086, 18, 34, "Output",ExpressionUUID->"c7e9fa3a-127e-40e5-9cda-77113788dfc7"],
Cell[615313, 11965, 2139, 55, 49, "Output",ExpressionUUID->"8dec52c6-7907-45c1-b86b-64a578a655f2"]
}, Open  ]],
Cell[617467, 12023, 401, 7, 38, "CodeText",ExpressionUUID->"b2bbd787-f430-43ca-ae21-a506f89d5820"],
Cell[617871, 12032, 393, 9, 30, "Input",ExpressionUUID->"16233cce-dc97-47b4-b954-f19fe7feaa21"],
Cell[618267, 12043, 703, 15, 30, "Input",ExpressionUUID->"6a2da0ad-2be5-4cb5-8fe6-19494086ab79"],
Cell[CellGroupData[{
Cell[618995, 12062, 378, 10, 30, "Input",ExpressionUUID->"271c34fb-514a-4a29-bf0e-9e7237fce55c"],
Cell[619376, 12074, 51482, 952, 335, "Output",ExpressionUUID->"ca12aa50-8c9e-4e64-b0ec-12d3280a3295"]
}, Open  ]],
Cell[CellGroupData[{
Cell[670895, 13031, 1343, 36, 94, "Input",ExpressionUUID->"544ea44a-c9b5-4712-a138-409327dba420"],
Cell[672241, 13069, 550, 12, 34, "Output",ExpressionUUID->"12cce4e1-5fe3-416c-9fd3-9e920b209dcb"],
Cell[672794, 13083, 367, 8, 34, "Output",ExpressionUUID->"c2d0fdb5-f5f1-44b1-bb7a-a997ccc482bf"],
Cell[673164, 13093, 1418, 45, 49, "Output",ExpressionUUID->"a469d4f6-24ae-483b-82d3-af260d76780c"]
}, Open  ]],
Cell[674597, 13141, 360, 8, 38, "CodeText",ExpressionUUID->"e9f6053f-0283-4caf-9a90-bc182a1a82c1"],
Cell[674960, 13151, 393, 9, 30, "Input",ExpressionUUID->"724157d3-28e3-4079-b805-f3852c552309"],
Cell[675356, 13162, 624, 14, 30, "Input",ExpressionUUID->"37a04937-19c0-4db9-aa61-3852f20cccf8"],
Cell[CellGroupData[{
Cell[676005, 13180, 378, 10, 30, "Input",ExpressionUUID->"4782704f-5e3f-46a9-9f9a-940bac5d9f5b"],
Cell[676386, 13192, 51494, 954, 335, "Output",ExpressionUUID->"3c06e16a-67eb-4ccd-a846-86e608013716"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727917, 14151, 1370, 36, 94, "Input",ExpressionUUID->"d520e472-7c45-4876-87aa-2030cc88f486"],
Cell[729290, 14189, 547, 12, 34, "Output",ExpressionUUID->"e536a17b-0107-4a59-a054-616c804736ee"],
Cell[729840, 14203, 364, 8, 34, "Output",ExpressionUUID->"ad0a8a2d-503b-4aba-9bc3-204344bf76bc"],
Cell[730207, 14213, 1416, 45, 49, "Output",ExpressionUUID->"bf60ae05-f334-441b-b0f3-ed40fbcc3f73"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[731672, 14264, 157, 3, 54, "Subsection",ExpressionUUID->"f26345ef-edf4-4916-965e-95a4c6e08e1b"],
Cell[731832, 14269, 254, 6, 35, "Text",ExpressionUUID->"92832c49-7364-42b4-af45-96902897b8a3"],
Cell[CellGroupData[{
Cell[732111, 14279, 157, 3, 45, "Subsubsection",ExpressionUUID->"9d801b8a-d639-43d3-8e28-9e5092de1347"],
Cell[CellGroupData[{
Cell[732293, 14286, 2108, 49, 79, "Input",ExpressionUUID->"6074f325-0e22-41e7-85bb-a702f5ff2e6d"],
Cell[734404, 14337, 41497, 1003, 268, "Output",ExpressionUUID->"0cdc2f54-4938-47ef-b2ae-b42eddb53788"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[775950, 15346, 159, 3, 45, "Subsubsection",ExpressionUUID->"c2dc3fc1-008f-4ea5-bad4-75c82951d66a"],
Cell[CellGroupData[{
Cell[776134, 15353, 1748, 44, 79, "Input",ExpressionUUID->"556353a4-2ce7-4ff1-9fc4-d417ca33c7ed"],
Cell[777885, 15399, 43515, 1056, 268, "Output",ExpressionUUID->"b6a32e8f-e290-4f9e-852b-87dad8704389"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[821449, 16461, 159, 3, 45, "Subsubsection",ExpressionUUID->"645adfbd-19c7-45c8-96b4-587109bc70d9"],
Cell[CellGroupData[{
Cell[821633, 16468, 1742, 44, 79, "Input",ExpressionUUID->"41d44a82-74f4-447b-8fcf-f09c425ca01f"],
Cell[823378, 16514, 43574, 1058, 268, "Output",ExpressionUUID->"166a207b-4648-4175-980f-c9d0200d56ac"]
}, Open  ]],
Cell[866967, 17575, 216, 5, 35, "Text",ExpressionUUID->"8f4e3d38-c925-4c2f-a508-9ad177ea1e4c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[867232, 17586, 170, 3, 54, "Subsection",ExpressionUUID->"8a5ab51d-5f90-44b0-b655-a9f919c5a3e6"],
Cell[867405, 17591, 262, 6, 38, "CodeText",ExpressionUUID->"1cf2cea4-0972-4f71-a96b-94fbfed13cc3"],
Cell[CellGroupData[{
Cell[867692, 17601, 1214, 29, 52, "Input",ExpressionUUID->"4dfaa007-2b50-4cc7-8b0a-d5c1bb0e88f1"],
Cell[868909, 17632, 104187, 1746, 64, "Output",ExpressionUUID->"ab951a0a-72a2-4dd5-bf50-6a77ba024e21"]
}, Open  ]],
Cell[973111, 19381, 227, 5, 38, "CodeText",ExpressionUUID->"85c40ced-0d2a-453d-8b4b-5bab4041d7e5"],
Cell[973341, 19388, 364, 9, 30, "Input",ExpressionUUID->"2af5d5af-3324-4f2b-b317-fb627bedcb1c"],
Cell[973708, 19399, 228, 5, 38, "CodeText",ExpressionUUID->"ad71d1c2-f18a-4c1b-a111-dac4815a335b"],
Cell[CellGroupData[{
Cell[973961, 19408, 508, 11, 30, "Input",ExpressionUUID->"6d971790-abd4-4e16-ab9d-a3d272bec591"],
Cell[974472, 19421, 5293, 152, 240, "Output",ExpressionUUID->"e559de06-e33b-43b4-a801-808d40fb3bc2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[979814, 19579, 84, 0, 54, "Subsection",ExpressionUUID->"3e30e7cd-f886-42be-ba13-0086f24d8109"],
Cell[979901, 19581, 357, 7, 35, "Text",ExpressionUUID->"bcf3e799-6c7d-4f68-b47c-dd6828029293"],
Cell[980261, 19590, 166, 3, 38, "CodeText",ExpressionUUID->"ffd4af65-67ca-4cd2-b33e-2d018ed5fea6"],
Cell[980430, 19595, 559, 16, 73, "Input",ExpressionUUID->"3056083b-1463-4616-8d33-2beca5017d94"],
Cell[980992, 19613, 1540, 39, 73, "Input",ExpressionUUID->"8a3f296b-041e-4eb2-8658-a1a94563a692"],
Cell[CellGroupData[{
Cell[982557, 19656, 247, 3, 30, "Input",ExpressionUUID->"942e81e6-5f13-4bec-a832-4f88935e98a2"],
Cell[982807, 19661, 1313, 35, 39, "Output",ExpressionUUID->"0951f669-d74f-4fc4-8363-f0bdffed880d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[984157, 19701, 820, 11, 30, "Input",ExpressionUUID->"6b596599-9ed4-4c93-a612-2e9826590cb5"],
Cell[984980, 19714, 415, 7, 34, "Output",ExpressionUUID->"fd55d1dd-dde2-4903-8074-9d7d311b7e2f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[985432, 19726, 293, 5, 30, "Input",ExpressionUUID->"7a87f186-7e89-4397-869f-17dfedc6056a"],
Cell[985728, 19733, 384, 5, 34, "Output",ExpressionUUID->"c84e69b1-8c46-4009-bdf4-aa784b963181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[986149, 19743, 297, 4, 30, "Input",ExpressionUUID->"f51d8a64-ee06-4009-a4f0-2a7cc7ce7c23"],
Cell[986449, 19749, 1334, 35, 39, "Output",ExpressionUUID->"64412024-437b-41c5-aa9c-6ae1a71d8db3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[987820, 19789, 807, 11, 30, "Input",ExpressionUUID->"71da8acd-d207-4f6a-a3d2-1237d16721a5"],
Cell[988630, 19802, 542, 8, 34, "Output",ExpressionUUID->"6c988293-8b16-48ee-87cb-1f022bc196dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[989209, 19815, 342, 6, 30, "Input",ExpressionUUID->"1af7b046-41cb-45ef-95cd-6b0537e4e3d5"],
Cell[989554, 19823, 378, 5, 34, "Output",ExpressionUUID->"efe7c371-44de-4417-af44-430947f2549e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[989969, 19833, 303, 4, 30, "Input",ExpressionUUID->"341e8015-1f7b-42f8-ba7b-1794090fad92"],
Cell[990275, 19839, 816, 20, 39, "Output",ExpressionUUID->"4b98531f-3752-42b1-bee4-e2282c5a82ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[991128, 19864, 572, 8, 30, "Input",ExpressionUUID->"c13ce41e-2f2d-437d-a9cc-b838f7aa8b58"],
Cell[991703, 19874, 392, 6, 34, "Output",ExpressionUUID->"66aa87a5-1a68-42ff-a418-8f75990042b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[992132, 19885, 342, 6, 30, "Input",ExpressionUUID->"0350ab9f-bc9d-42dd-87ce-54c86e76a980"],
Cell[992477, 19893, 289, 4, 34, "Output",ExpressionUUID->"e24f2526-3ccb-4c39-b986-2d1fb32aa4f4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[992827, 19904, 251, 4, 67, "Section",ExpressionUUID->"6145a6a3-9a51-4c33-a061-7244d3d8ef28"],
Cell[993081, 19910, 1907, 49, 148, "Text",ExpressionUUID->"7357377f-e2dc-4020-848f-b2624a5a25b0"],
Cell[CellGroupData[{
Cell[995013, 19963, 162, 3, 54, "Subsection",ExpressionUUID->"e01cd60b-75fb-442e-8d9d-c612a3e5e032"],
Cell[995178, 19968, 162, 3, 38, "CodeText",ExpressionUUID->"02dbf7d2-0d81-46bb-a626-d4945a9405ff"],
Cell[995343, 19973, 416, 7, 30, "Input",ExpressionUUID->"38d81484-264c-48f8-864a-ed200329332b"],
Cell[995762, 19982, 267, 6, 38, "CodeText",ExpressionUUID->"1e83d1e3-3185-46fc-8c7c-a856f42e168c"],
Cell[996032, 19990, 1670, 45, 73, "Input",ExpressionUUID->"60b1eaf9-f6a4-4fd6-8f0b-8f6b51de3694"],
Cell[997705, 20037, 169, 3, 38, "CodeText",ExpressionUUID->"5987c8a0-32fc-4b8a-b527-e936c8efc835"],
Cell[997877, 20042, 1139, 29, 73, "Input",ExpressionUUID->"376e789a-2eea-4057-a551-2307d3e935b8"],
Cell[999019, 20073, 433, 8, 35, "Text",ExpressionUUID->"c9e929af-bb45-4ea2-9194-afbaec865b09"],
Cell[999455, 20083, 1039, 26, 73, "Input",ExpressionUUID->"9e85ff9e-c8e8-409f-8eac-22d77238a5e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1000531, 20114, 258, 6, 54, "Subsection",ExpressionUUID->"49eefb15-eb8a-4095-8382-47b4f3afc77a"],
Cell[1000792, 20122, 811, 15, 150, "Text",ExpressionUUID->"525e537a-1228-43cc-a71a-8e2652cc0204"],
Cell[1001606, 20139, 1002, 18, 30, "Input",ExpressionUUID->"87aa2c8c-8cdf-48ba-9cae-058fa63f0167"],
Cell[1002611, 20159, 1025, 20, 30, "Input",ExpressionUUID->"942ccc22-eb4f-4742-aeba-0601e584b965"],
Cell[CellGroupData[{
Cell[1003661, 20183, 1031, 19, 30, "Input",ExpressionUUID->"a43f15a9-9d2e-41af-a732-4ab292456aca"],
Cell[1004695, 20204, 52346, 967, 335, "Output",ExpressionUUID->"c41acc9b-97d3-485c-903d-46c8200b66dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1057078, 21176, 1334, 35, 94, "Input",ExpressionUUID->"1d048602-c454-4d4f-9180-d99500bbc0b9"],
Cell[1058415, 21213, 1407, 25, 34, "Output",ExpressionUUID->"113bc97c-4a6e-4c83-859c-88e8a0a256a5"],
Cell[1059825, 21240, 1089, 18, 34, "Output",ExpressionUUID->"5626113b-e70c-4d76-b12d-e88217072bd2"],
Cell[1060917, 21260, 3338, 90, 49, "Output",ExpressionUUID->"e7cdf8cc-0e60-4940-bb2b-6df510f90bd6"]
}, Open  ]],
Cell[1064270, 21353, 397, 10, 30, "Input",ExpressionUUID->"a223db8c-abfc-4727-bf71-3d5b7ad4839c"],
Cell[1064670, 21365, 433, 12, 30, "Input",ExpressionUUID->"81dd63f5-08d9-4700-9422-125b6b43ab0f"],
Cell[CellGroupData[{
Cell[1065128, 21381, 645, 14, 30, "Input",ExpressionUUID->"b1ca14ca-5575-4fe9-999f-0dcc20ed55b6"],
Cell[1065776, 21397, 52184, 964, 335, "Output",ExpressionUUID->"e9156fbb-a795-462b-a0e4-87fcf011b832"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1117997, 22366, 1319, 36, 94, "Input",ExpressionUUID->"ebe8879f-abf7-4008-806d-70e4358eab2f"],
Cell[1119319, 22404, 701, 15, 34, "Output",ExpressionUUID->"e7d72fd3-e45a-4587-8a8f-031efdce10ea"],
Cell[1120023, 22421, 384, 8, 34, "Output",ExpressionUUID->"895dd977-72bb-4f28-a3f5-b0b57affeab2"],
Cell[1120410, 22431, 2680, 82, 49, "Output",ExpressionUUID->"f46d032b-1b58-4e65-9227-913ebf464794"]
}, Open  ]],
Cell[1123105, 22516, 397, 10, 30, "Input",ExpressionUUID->"01fad745-b5cc-4f31-bbcd-33a8830cc402"],
Cell[1123505, 22528, 457, 12, 30, "Input",ExpressionUUID->"debdb3c2-f876-4adc-8262-b6f81d87c752"],
Cell[CellGroupData[{
Cell[1123987, 22544, 568, 14, 30, "Input",ExpressionUUID->"ba3181ce-22f3-46c3-b357-f969f3ff263a"],
Cell[1124558, 22560, 52196, 964, 335, "Output",ExpressionUUID->"c7f45f6a-f967-4543-b6bb-5ced73ac20fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1176791, 23529, 1344, 35, 94, "Input",ExpressionUUID->"56789ee7-9362-41fc-b2ea-6b4aff84d0ae"],
Cell[1178138, 23566, 727, 15, 34, "Output",ExpressionUUID->"cea8184b-8ccd-4514-b059-9ec9eaf35eae"],
Cell[1178868, 23583, 417, 9, 34, "Output",ExpressionUUID->"00a33b4a-4a50-449e-bcc8-a0d4b7e26fc4"],
Cell[1179288, 23594, 2796, 86, 50, "Output",ExpressionUUID->"54ffb718-7b6a-4983-8c22-e32bde486511"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1182133, 23686, 157, 3, 54, "Subsection",ExpressionUUID->"81e79a3c-1fac-4a6d-9ec6-44d9ac7e4128"],
Cell[1182293, 23691, 234, 6, 35, "Text",ExpressionUUID->"9d14cd42-0864-4585-b13a-61b2eeb970d9"],
Cell[CellGroupData[{
Cell[1182552, 23701, 157, 3, 45, "Subsubsection",ExpressionUUID->"4dbf9fac-7d41-4c25-9268-aeef1d30e2fb"],
Cell[CellGroupData[{
Cell[1182734, 23708, 2608, 57, 79, "Input",ExpressionUUID->"3e37f8f2-ed60-4a6c-a81b-3a7e569268d2"],
Cell[1185345, 23767, 77093, 1835, 268, "Output",ExpressionUUID->"97e6feb4-5d57-4048-8ec7-f986dcd2817a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1262487, 25608, 159, 3, 45, "Subsubsection",ExpressionUUID->"6425d86b-8019-4394-a42e-f67c1e3a3aeb"],
Cell[CellGroupData[{
Cell[1262671, 25615, 2185, 51, 79, "Input",ExpressionUUID->"e548daac-7a09-4572-8177-271117456546"],
Cell[1264859, 25668, 81900, 1968, 265, "Output",ExpressionUUID->"e82a2187-80c6-4e61-91b1-709f58755390"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1346808, 27642, 159, 3, 45, "Subsubsection",ExpressionUUID->"5d23a89b-e1f5-46f0-9009-27fbe10187b9"],
Cell[CellGroupData[{
Cell[1346992, 27649, 2281, 52, 79, "Input",ExpressionUUID->"0229070a-92d9-4347-8456-49286af79625"],
Cell[1349276, 27703, 78352, 1875, 278, "Output",ExpressionUUID->"1ebafeac-e62b-40de-8509-4deebc5b89f2"]
}, Open  ]],
Cell[1427643, 29581, 597, 11, 81, "Text",ExpressionUUID->"746d811d-2222-4cac-8569-ac1f4f0b500e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1428289, 29598, 170, 3, 54, "Subsection",ExpressionUUID->"0d29dbbf-0e67-4306-a81d-203b6da91101"],
Cell[1428462, 29603, 262, 6, 38, "CodeText",ExpressionUUID->"70c12036-8bac-42b0-be31-30fc48c3029d"],
Cell[CellGroupData[{
Cell[1428749, 29613, 1290, 29, 52, "Input",ExpressionUUID->"3f209008-f840-4d85-af69-140cb777b203"],
Cell[1430042, 29644, 127566, 2107, 64, "Output",ExpressionUUID->"65ab0ca8-1baa-4a42-9b03-bd04c030f121"]
}, Open  ]],
Cell[1557623, 31754, 227, 5, 38, "CodeText",ExpressionUUID->"ba37b820-4af2-432e-8262-98f348d690c2"],
Cell[1557853, 31761, 413, 10, 30, "Input",ExpressionUUID->"3e92099e-955e-43da-87bc-ebe8e7353c57"],
Cell[1558269, 31773, 228, 5, 38, "CodeText",ExpressionUUID->"1b8d55d3-dbef-4652-845d-425891ca218d"],
Cell[CellGroupData[{
Cell[1558522, 31782, 559, 12, 30, "Input",ExpressionUUID->"a8f7a70a-73d0-4c66-8967-640fb9ec3ecb"],
Cell[1559084, 31796, 6669, 195, 238, "Output",ExpressionUUID->"0ead41d5-1abd-4204-bd8d-26581d1cda0f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1565802, 31997, 84, 0, 54, "Subsection",ExpressionUUID->"047de2ee-5598-4a68-9571-ac954a9fd187"],
Cell[1565889, 31999, 322, 6, 35, "Text",ExpressionUUID->"80cf710d-4c97-4c13-9fb7-c47891f3689d"],
Cell[1566214, 32007, 184, 3, 38, "CodeText",ExpressionUUID->"3a2142bf-e13e-4646-bacf-69767354b67f"],
Cell[1566401, 32012, 818, 23, 73, "Input",ExpressionUUID->"f6bdf63f-b982-4b9a-9f0f-b40182c721d4"],
Cell[1567222, 32037, 1561, 40, 199, "Input",ExpressionUUID->"aea180e0-7edf-43de-81db-322130673802"],
Cell[CellGroupData[{
Cell[1568808, 32081, 113, 2, 30, "Input",ExpressionUUID->"b4efc6e9-0630-47f6-9e81-46bdebd50f9c"],
Cell[1568924, 32085, 2824, 85, 39, "Output",ExpressionUUID->"52fd2382-e842-4f2a-8a0b-537fd92a4d62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1571785, 32175, 538, 14, 73, "Input",ExpressionUUID->"8396ed58-9f26-43a7-a268-622427033d2b"],
Cell[1572326, 32191, 233, 6, 34, "Output",ExpressionUUID->"dd20dc49-dc41-42b1-b049-e43d37aba489"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1572596, 32202, 185, 4, 30, "Input",ExpressionUUID->"90543839-4170-4f47-aa1e-d5f8efea92bf"],
Cell[1572784, 32208, 130, 2, 34, "Output",ExpressionUUID->"5d5c5046-3d2e-4f5b-b156-26ddb7400cec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1572951, 32215, 113, 2, 30, "Input",ExpressionUUID->"351c46ae-2c7e-4442-9bbf-26833b3e0747"],
Cell[1573067, 32219, 5470, 165, 39, "Output",ExpressionUUID->"e10bba7e-fc91-4b5c-8e6d-3111a637090a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1578574, 32389, 230, 5, 52, "Input",ExpressionUUID->"34882bf2-6d39-4a7e-9a3f-c5fb53831070"],
Cell[1578807, 32396, 239, 6, 34, "Output",ExpressionUUID->"103f3999-9363-480d-af7b-91045974cfec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1579083, 32407, 185, 4, 30, "Input",ExpressionUUID->"ad4b6313-abc1-4886-9d6a-e17b8f601b7c"],
Cell[1579271, 32413, 129, 2, 34, "Output",ExpressionUUID->"1b74d147-f7f8-4aa0-936d-ffbeab037921"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1579437, 32420, 113, 2, 30, "Input",ExpressionUUID->"2f81ec13-8ceb-4bcd-8837-fa680bd6cbac"],
Cell[1579553, 32424, 696, 21, 39, "Output",ExpressionUUID->"40660078-1b9b-4385-92ec-f5a1d988b5e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1580286, 32450, 281, 5, 30, "Input",ExpressionUUID->"c3144b32-ca42-44b4-bcb6-f76f012e8e17"],
Cell[1580570, 32457, 229, 6, 34, "Output",ExpressionUUID->"0b3ffb1a-f7a8-4953-bcf5-f7daf338b5f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1580836, 32468, 185, 4, 30, "Input",ExpressionUUID->"c68cf099-10d8-4e65-9497-808d3337dd2f"],
Cell[1581024, 32474, 131, 2, 34, "Output",ExpressionUUID->"24ee2ef1-c713-4835-8da2-0bd1038d2e30"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1581216, 32483, 226, 4, 67, "Section",ExpressionUUID->"a102b5e2-d351-47a5-baba-b14cdc3baba6",
 CellTags->"Keywords",
 CellID->1137237116],
Cell[1581445, 32489, 541, 11, 32, "Item",ExpressionUUID->"d01f20cf-14b5-467a-8f62-2a66f523e11b"],
Cell[1581989, 32502, 602, 11, 53, "Item",ExpressionUUID->"084b254a-1785-49df-a896-bcb6897c89c3"],
Cell[1582594, 32515, 570, 11, 32, "Item",ExpressionUUID->"658fbe82-3947-474b-83ab-7bf584d50439"],
Cell[1583167, 32528, 281, 5, 32, "Item",ExpressionUUID->"16af6634-4d30-46fa-8d57-f2c8f0b3bed3"],
Cell[1583451, 32535, 321, 5, 32, "Item",ExpressionUUID->"015128aa-387a-415a-8442-50c3d41d5041"],
Cell[1583775, 32542, 297, 5, 32, "Item",ExpressionUUID->"e93d3d9f-81ed-430e-acfa-2b63a787e400"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1584109, 32552, 273, 6, 67, "Section",ExpressionUUID->"e8013d3d-af44-4865-a29a-7391e7799540"],
Cell[CellGroupData[{
Cell[1584407, 32562, 372, 8, 52, "Input",ExpressionUUID->"c5ba38b4-e29c-4396-9f73-0d38b228c0b8"],
Cell[1584782, 32572, 25262, 441, 61, "Output",ExpressionUUID->"8bae80f5-3169-4039-8199-2e0fc96be8bc"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

